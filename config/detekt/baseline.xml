<?xml version="1.0" ?>
<SmellBaseline>
  <ManuallySuppressedIssues></ManuallySuppressedIssues>
  <CurrentIssues>
    <ID>ArgumentListWrapping:AnnotatedString.kt$(SpanStyle(fontWeight = FontWeight.Bold, fontStyle = FontStyle.Italic), start, end)</ID>
    <ID>ArgumentListWrapping:AnnotatedString.kt$(fontWeight = FontWeight.Bold, fontStyle = FontStyle.Italic)</ID>
    <ID>ArgumentListWrapping:ApiMangaParser.kt$ApiMangaParser$("Content Rating", it.capitalize(Locale.US), MangaDexSearchMetadata.TAG_TYPE_DEFAULT)</ID>
    <ID>ArgumentListWrapping:ApiMangaParser.kt$ApiMangaParser$("Demographic", it.capitalize(Locale.US), MangaDexSearchMetadata.TAG_TYPE_DEFAULT)</ID>
    <ID>ArgumentListWrapping:ApiMangaParser.kt$ApiMangaParser$(Locale.US)</ID>
    <ID>ArgumentListWrapping:BatchAddScreen.kt$BatchAddScreen$(SYMR.strings.eh_batch_add_adding_galleries)</ID>
    <ID>ArgumentListWrapping:BatchAddScreen.kt$BatchAddScreen$(SYMR.strings.eh_batch_add_title)</ID>
    <ID>ArgumentListWrapping:BatchAddScreen.kt$BatchAddScreen$(text = stringResource(SYMR.strings.eh_batch_add_adding_galleries), style = MaterialTheme.typography.titleLarge)</ID>
    <ID>ArgumentListWrapping:BatchAddScreen.kt$BatchAddScreen$(text = stringResource(SYMR.strings.eh_batch_add_title), style = MaterialTheme.typography.titleLarge)</ID>
    <ID>ArgumentListWrapping:BiometricTimesScreen.kt$BiometricTimesScreen$(SYMR.strings.delete_time_range_confirmation, dialog.timeRange.formattedString)</ID>
    <ID>ArgumentListWrapping:BiometricTimesScreen.kt$BiometricTimesScreen$(context)</ID>
    <ID>ArgumentListWrapping:BiometricTimesScreen.kt$BiometricTimesScreen$(if (startTime == null) SYMR.strings.biometric_lock_start_time.getString(context) else SYMR.strings.biometric_lock_end_time.getString(context))</ID>
    <ID>ArgumentListWrapping:DataSaver.kt$BandwidthHeroDataSaver$(imageUrl)</ID>
    <ID>ArgumentListWrapping:DataSaver.kt$WsrvNlDataSaver$(imageUrl)</ID>
    <ID>ArgumentListWrapping:DownloadPageLoader.kt$DownloadPageLoader$(dbChapter.name, dbChapter.scanlator, /* SY --&gt; */ manga.ogTitle /* SY &lt;-- */, source)</ID>
    <ID>ArgumentListWrapping:EHConfigurator.kt$EHConfigurator$(SYMR.strings.eh_settings_out_of_slots_error, source.name)</ID>
    <ID>ArgumentListWrapping:EHConfigurator.kt$EHConfigurator$(context.stringResource(SYMR.strings.eh_settings_out_of_slots_error, source.name))</ID>
    <ID>ArgumentListWrapping:EditMergedSettingsDialog.kt$(factoryContext, binding, mergedData.manga.values.toList(), mergedData.references)</ID>
    <ID>ArgumentListWrapping:EnhancedFilePrinter.kt$EnhancedFilePrinter$(!(newFileName == null || newFileName.trim { it &lt;= ' ' }.isEmpty()))</ID>
    <ID>ArgumentListWrapping:ExtensionManager.kt$ExtensionManager$("Removing blacklisted extension: (name: %s, pkgName: %s)!", extension.name, extension.pkgName)</ID>
    <ID>ArgumentListWrapping:FavoritesSyncHelper.kt$FavoritesSyncHelper$(SYMR.strings.favorites_sync_gallery_multiple_categories_error, manga.id)</ID>
    <ID>ArgumentListWrapping:FavoritesSyncHelper.kt$FavoritesSyncHelper$(context.stringResource(SYMR.strings.favorites_sync_gallery_multiple_categories_error, manga.id))</ID>
    <ID>ArgumentListWrapping:FavoritesSyncHelper.kt$FavoritesSyncStatus.BadLibraryState.MangaInMultipleCategories$( SYMR.strings.favorites_sync_gallery_in_multiple_categories, manga.title, categories.joinToString { it.name }, )</ID>
    <ID>ArgumentListWrapping:GalleryAdder.kt$GalleryAddEvent.Fail.UnknownSource$(SYMR.strings.batch_add_unknown_source_log_message, galleryUrl)</ID>
    <ID>ArgumentListWrapping:GalleryAdder.kt$GalleryAddEvent.Fail.UnknownType$(SYMR.strings.batch_add_unknown_type_log_message, galleryUrl)</ID>
    <ID>ArgumentListWrapping:GalleryAdder.kt$GalleryAdder$(SYMR.strings.gallery_adder_chapter_fetch_error, url)</ID>
    <ID>ArgumentListWrapping:GalleryAdder.kt$GalleryAdder$(SYMR.strings.gallery_adder_could_not_identify_chapter, url)</ID>
    <ID>ArgumentListWrapping:GalleryAdder.kt$GalleryAdder$(SYMR.strings.gallery_adder_importing_gallery, url, fav.toString(), forceSource?.toString().orEmpty())</ID>
    <ID>ArgumentListWrapping:GalleryAdder.kt$GalleryAdder$(context.stringResource(SYMR.strings.gallery_adder_importing_gallery, url, fav.toString(), forceSource?.toString().orEmpty()))</ID>
    <ID>ArgumentListWrapping:GalleryAdder.kt$GalleryAdder$(url, context.stringResource(SYMR.strings.gallery_adder_chapter_fetch_error, url))</ID>
    <ID>ArgumentListWrapping:GalleryAdder.kt$GalleryAdder$(url, context.stringResource(SYMR.strings.gallery_adder_could_not_identify_chapter, url))</ID>
    <ID>ArgumentListWrapping:LibraryScreenModel.kt$LibraryScreenModel$("\\(.*?\\)".toRegex(), "")</ID>
    <ID>ArgumentListWrapping:LibraryScreenModel.kt$LibraryScreenModel$("\\[.*?]".toRegex(), "")</ID>
    <ID>ArgumentListWrapping:LibraryScreenModel.kt$LibraryScreenModel$("\\{.*?\\}".toRegex(), "")</ID>
    <ID>ArgumentListWrapping:LibraryScreenModel.kt$LibraryScreenModel$(MR.strings.publishing_finished)</ID>
    <ID>ArgumentListWrapping:LibraryScreenModel.kt$LibraryScreenModel$(it.source)</ID>
    <ID>ArgumentListWrapping:LibraryTab.kt$LibraryTab$(state.categories.lastIndex)</ID>
    <ID>ArgumentListWrapping:LibraryTab.kt$LibraryTab$(state.categories[screenModel.activeCategoryIndex.coerceAtMost(state.categories.lastIndex)])</ID>
    <ID>ArgumentListWrapping:LibraryUpdateJob.kt$LibraryUpdateJob$( listOf(Manga.create().copy(ogTitle = networkManga.title)), count, size, )</ID>
    <ID>ArgumentListWrapping:LibraryUpdateJob.kt$LibraryUpdateJob$(manga.id)</ID>
    <ID>ArgumentListWrapping:LocalSource.kt$LocalSource$(COMIC_INFO_FILE)</ID>
    <ID>ArgumentListWrapping:LocalSource.kt$LocalSource$(it, manga)</ID>
    <ID>ArgumentListWrapping:MangaScreen.kt$MangaScreen$(context, navigator, screenModel.source?.getMainSource(), successState.manga)</ID>
    <ID>ArgumentListWrapping:MangaScreen.kt$MangaScreen$(navigator, context, successState.manga, screenModel::smartSearchMerge)</ID>
    <ID>ArgumentListWrapping:MangaScreenModel.kt$MangaScreenModel$(getTracks.await(mangaId).first { it.trackerId == trackerManager.mdList.id }, trackerManager.mdList)</ID>
    <ID>ArgumentListWrapping:MangaScreenModel.kt$MangaScreenModel$(manga.source, chapters)</ID>
    <ID>ArgumentListWrapping:MangaScreenModel.kt$MangaScreenModel$(mangaId)</ID>
    <ID>ArgumentListWrapping:MangaScreenModel.kt$MangaScreenModel$(mangaId, applyScanlatorFilter = true)</ID>
    <ID>ArgumentListWrapping:MigrationListScreenModel.kt$MigrationListScreenModel$(localManga.toSManga(), throttleManager::throttle)</ID>
    <ID>ArgumentListWrapping:ReaderActivity.kt$ReaderActivity$(SYMR.strings.share_pages_info, manga.title, chapter.name, if (resources.configuration.layoutDirection == View.LAYOUT_DIRECTION_LTR) "${page.number}-${page.number + 1}" else "${page.number + 1}-${page.number}")</ID>
    <ID>ArgumentListWrapping:ReaderPreferences.kt$ReaderPreferences$("reader_bottom_buttons", ReaderBottomButton.BUTTONS_DEFAULTS)</ID>
    <ID>ArgumentListWrapping:SimilarHandler.kt$SimilarHandler$( mangaList, false, List(mangaList.size) { MangaDexSearchMetadata().also { it.relation = MangaDexRelation.SIMILAR } }, )</ID>
    <ID>ArgumentListWrapping:SourcesScreenModel.kt$SourcesScreenModel$(CATEGORY_KEY_PREFIX)</ID>
    <ID>ArgumentListWrapping:SourcesScreenModel.kt$SourcesScreenModel$(it.key.removePrefix(CATEGORY_KEY_PREFIX), it.value.firstOrNull()?.category != null)</ID>
    <ID>CommentSpacing:ChapterCache.kt$ChapterCache$//S Y &lt;--</ID>
    <ID>CommentSpacing:LibraryUpdateJob.kt$LibraryUpdateJob$//SY &lt;--</ID>
    <ID>CommentWrapping:BackupCreator.kt$BackupCreator$/* SY --&gt; */</ID>
    <ID>CommentWrapping:BackupRestorer.kt$BackupRestorer$/* SY --&gt; */</ID>
    <ID>CommentWrapping:BackupRestorer.kt$BackupRestorer$/* SY &lt;-- */</ID>
    <ID>CommentWrapping:BrowseSourceComfortableGrid.kt$/* SY --&gt; */</ID>
    <ID>CommentWrapping:BrowseSourceComfortableGrid.kt$/* SY &lt;-- */</ID>
    <ID>CommentWrapping:BrowseSourceCompactGrid.kt$/* SY --&gt; */</ID>
    <ID>CommentWrapping:BrowseSourceCompactGrid.kt$/* SY &lt;-- */</ID>
    <ID>CommentWrapping:BrowseSourceEHentaiList.kt$/* SY --&gt; */</ID>
    <ID>CommentWrapping:BrowseSourceEHentaiList.kt$/* SY &lt;-- */</ID>
    <ID>CommentWrapping:BrowseSourceList.kt$/* SY --&gt; */</ID>
    <ID>CommentWrapping:BrowseSourceList.kt$/* SY &lt;-- */</ID>
    <ID>CommentWrapping:BrowseSourceScreen.kt$/* SY --&gt; */</ID>
    <ID>CommentWrapping:BrowseSourceScreen.kt$/* SY &lt;-- */</ID>
    <ID>CommentWrapping:BrowseSourceScreen.kt$BrowseSourceScreen$/* SY --&gt; */</ID>
    <ID>CommentWrapping:BrowseSourceScreen.kt$BrowseSourceScreen$/* SY &lt;-- */</ID>
    <ID>CommentWrapping:BuildConfig.kt$/* SY --&gt; */</ID>
    <ID>CommentWrapping:BuildConfig.kt$/* SY &lt;-- */</ID>
    <ID>CommentWrapping:ChapterFilter.kt$/* SY --&gt; */</ID>
    <ID>CommentWrapping:ChapterFilter.kt$/* SY &lt;-- */</ID>
    <ID>CommentWrapping:ChapterFilterDownloaded.kt$/* SY --&gt; */</ID>
    <ID>CommentWrapping:ChapterGetNextUnread.kt$/* SY --&gt; */</ID>
    <ID>CommentWrapping:ChapterGetNextUnread.kt$/* SY &lt;-- */</ID>
    <ID>CommentWrapping:ChapterLoader.kt$ChapterLoader$/* --&gt; EH */</ID>
    <ID>CommentWrapping:ChapterLoader.kt$ChapterLoader$/* SY --&gt; */</ID>
    <ID>CommentWrapping:ChapterLoader.kt$ChapterLoader$/* SY &lt;-- */</ID>
    <ID>CommentWrapping:ClearDatabaseScreen.kt$ClearDatabaseScreenModel$/* SY --&gt; */</ID>
    <ID>CommentWrapping:ClearDatabaseScreen.kt$ClearDatabaseScreenModel$/* SY &lt;-- */</ID>
    <ID>CommentWrapping:CollapsibleBox.kt$/* SY --&gt; */</ID>
    <ID>CommentWrapping:CollapsibleBox.kt$/* SY &lt;-- */</ID>
    <ID>CommentWrapping:CreateCategoryWithName.kt$CreateCategoryWithName$/* SY --&gt; */</ID>
    <ID>CommentWrapping:CreateCategoryWithName.kt$CreateCategoryWithName$/* SY &lt;-- */</ID>
    <ID>CommentWrapping:DownloadCache.kt$DownloadCache$/* SY --&gt; */</ID>
    <ID>CommentWrapping:DownloadCache.kt$DownloadCache$/* SY &lt;-- */</ID>
    <ID>CommentWrapping:DownloadManager.kt$DownloadManager$/* SY --&gt; */</ID>
    <ID>CommentWrapping:DownloadManager.kt$DownloadManager$/* SY &lt;-- */</ID>
    <ID>CommentWrapping:DownloadPageLoader.kt$DownloadPageLoader$/* SY --&gt; */</ID>
    <ID>CommentWrapping:DownloadPageLoader.kt$DownloadPageLoader$/* SY &lt;-- */</ID>
    <ID>CommentWrapping:DownloadPendingDeleter.kt$DownloadPendingDeleter$/* SY --&gt; */</ID>
    <ID>CommentWrapping:DownloadPendingDeleter.kt$DownloadPendingDeleter$/* SY &lt;-- */</ID>
    <ID>CommentWrapping:DownloadProvider.kt$DownloadProvider$/* SY --&gt; */</ID>
    <ID>CommentWrapping:DownloadProvider.kt$DownloadProvider$/* SY &lt;-- */</ID>
    <ID>CommentWrapping:Downloader.kt$Downloader$/* SY --&gt; */</ID>
    <ID>CommentWrapping:Downloader.kt$Downloader$/* SY &lt;-- */</ID>
    <ID>CommentWrapping:EXHMigrations.kt$EXHMigrations$/* ALPHABETICAL */</ID>
    <ID>CommentWrapping:GetExtensionsByType.kt$GetExtensionsByType$/* SY --&gt; */</ID>
    <ID>CommentWrapping:GetExtensionsByType.kt$GetExtensionsByType$/* SY &lt;-- */</ID>
    <ID>CommentWrapping:HistoryScreenModelStateProvider.kt$HistoryScreenModelStateProvider.HistoryUiModelExamples$/* SY --&gt; */</ID>
    <ID>CommentWrapping:HistoryScreenModelStateProvider.kt$HistoryScreenModelStateProvider.HistoryUiModelExamples$/* SY &lt;-- */</ID>
    <ID>CommentWrapping:HomeScreen.kt$HomeScreen$/* SY --&gt; */</ID>
    <ID>CommentWrapping:HomeScreen.kt$HomeScreen$/* SY &lt;-- */</ID>
    <ID>CommentWrapping:HttpPageLoader.kt$HttpPageLoader$/* SY --&gt; */</ID>
    <ID>CommentWrapping:HttpSource.kt$HttpSource$/* SY &lt;-- */</ID>
    <ID>CommentWrapping:LibraryScreenModel.kt$LibraryScreenModel$/* SY --&gt; */</ID>
    <ID>CommentWrapping:LibraryScreenModel.kt$LibraryScreenModel$/* SY &lt;-- */</ID>
    <ID>CommentWrapping:LibrarySortMode.kt$LibrarySort.Companion$/* SY --&gt;*/</ID>
    <ID>CommentWrapping:LibrarySortMode.kt$LibrarySort.Companion$/* SY &lt;--*/</ID>
    <ID>CommentWrapping:LocalSource.kt$LocalSource$/* SY --&gt; */</ID>
    <ID>CommentWrapping:LocalSource.kt$LocalSource$/* SY &lt;-- */</ID>
    <ID>CommentWrapping:MangaBackupCreator.kt$/* SY --&gt; */</ID>
    <ID>CommentWrapping:MangaBackupCreator.kt$/* SY &lt;-- */</ID>
    <ID>CommentWrapping:MangaBackupCreator.kt$MangaBackupCreator$/* SY &lt;-- */</ID>
    <ID>CommentWrapping:MangaBottomActionMenu.kt$/* SY --&gt; */</ID>
    <ID>CommentWrapping:MangaBottomActionMenu.kt$/* SY &lt;-- */</ID>
    <ID>CommentWrapping:MangaChapterListItem.kt$/* SY --&gt; */</ID>
    <ID>CommentWrapping:MangaChapterListItem.kt$/* SY &lt;-- */</ID>
    <ID>CommentWrapping:MangaScreen.kt$/* SY --&gt; */</ID>
    <ID>CommentWrapping:MangaScreen.kt$/* SY &lt;-- */</ID>
    <ID>CommentWrapping:MangaScreenModel.kt$MangaScreenModel$/* SY --&gt; */</ID>
    <ID>CommentWrapping:MangaScreenModel.kt$MangaScreenModel$/* SY &lt;-- */</ID>
    <ID>CommentWrapping:MangasPage.kt$MangasPage$/* SY &lt;-- */</ID>
    <ID>CommentWrapping:NetworkHelper.kt$NetworkHelper$/* SY &lt;-- */</ID>
    <ID>CommentWrapping:NetworkToLocalManga.kt$NetworkToLocalManga$/* SY --&gt; */</ID>
    <ID>CommentWrapping:NetworkToLocalManga.kt$NetworkToLocalManga$/* SY &lt;-- */</ID>
    <ID>CommentWrapping:Page.kt$Page$/* SY &lt;-- */</ID>
    <ID>CommentWrapping:PagePreviewScreen.kt$/* TODO support unknown pageCount || state.hasNextPage*/</ID>
    <ID>CommentWrapping:ReaderActivity.kt$ReaderActivity$/* SY --&gt; */</ID>
    <ID>CommentWrapping:ReaderActivity.kt$ReaderActivity$/* SY &lt;-- */</ID>
    <ID>CommentWrapping:ReaderActivity.kt$ReaderActivity$/*else if (page.status == Page.LOAD_PAGE || page.status == Page.DOWNLOAD_IMAGE) { // Do nothing }*/</ID>
    <ID>CommentWrapping:ReaderActivity.kt$ReaderActivity.Companion$/* SY --&gt; */</ID>
    <ID>CommentWrapping:ReaderActivity.kt$ReaderActivity.Companion$/* SY &lt;-- */</ID>
    <ID>CommentWrapping:ReaderAppBars.kt$/*SY --&gt; */</ID>
    <ID>CommentWrapping:ReaderAppBars.kt$/*SY &lt;-- */</ID>
    <ID>CommentWrapping:ReaderTransitionView.kt$ReaderTransitionView$/* SY --&gt; */</ID>
    <ID>CommentWrapping:ReaderTransitionView.kt$ReaderTransitionView$/* SY &lt;-- */</ID>
    <ID>CommentWrapping:ReaderViewModel.kt$ReaderViewModel$/* SY --&gt; */</ID>
    <ID>CommentWrapping:ReaderViewModel.kt$ReaderViewModel$/* SY &lt;-- */</ID>
    <ID>CommentWrapping:ReaderViewModel.kt$ReaderViewModel.Dialog.PageActions$/* SY --&gt; */</ID>
    <ID>CommentWrapping:ReaderViewModel.kt$ReaderViewModel.Dialog.PageActions$/* SY &lt;-- */</ID>
    <ID>CommentWrapping:ReaderViewModel.kt$ReaderViewModel.Event.ShareImage$/* SY --&gt; */</ID>
    <ID>CommentWrapping:ReaderViewModel.kt$ReaderViewModel.Event.ShareImage$/* SY &lt;-- */</ID>
    <ID>CommentWrapping:RestoreOptions.kt$RestoreOptions$/* SY --&gt; */</ID>
    <ID>CommentWrapping:RestoreOptions.kt$RestoreOptions$/* SY &lt;-- */</ID>
    <ID>CommentWrapping:SecureActivityDelegate.kt$SecureActivityDelegate.Companion$/* SY --&gt; */</ID>
    <ID>CommentWrapping:SecureActivityDelegate.kt$SecureActivityDelegate.Companion$/* SY &lt;-- */</ID>
    <ID>CommentWrapping:SourceFilterDialog.kt$/* SY --&gt; */</ID>
    <ID>CommentWrapping:SourceFilterDialog.kt$/* SY &lt;-- */</ID>
    <ID>CommentWrapping:SourcePagingSource.kt$SourcePagingSource$/*SY --&gt; */</ID>
    <ID>CommentWrapping:SourcePagingSource.kt$SourcePagingSource$/*SY &lt;-- */</ID>
    <ID>CommentWrapping:SourceRepository.kt$/*SY --&gt; */</ID>
    <ID>CommentWrapping:SourceRepository.kt$/*SY &lt;-- */</ID>
    <ID>CommentWrapping:SourcesScreen.kt$/* SY --&gt; */</ID>
    <ID>CommentWrapping:SourcesScreen.kt$/* SY &lt;-- */</ID>
    <ID>CommentWrapping:SyncChaptersWithSource.kt$SyncChaptersWithSource$/* SY --&gt; */</ID>
    <ID>CommentWrapping:SyncChaptersWithSource.kt$SyncChaptersWithSource$/* SY &lt;-- */</ID>
    <ID>CommentWrapping:TrackChapter.kt$TrackChapter$/* SY --&gt; */</ID>
    <ID>CommentWrapping:TrackChapter.kt$TrackChapter$/* SY &lt;-- */</ID>
    <ID>CommentWrapping:UpdatesUiItem.kt$/* SY --&gt; */</ID>
    <ID>CommentWrapping:UpdatesUiItem.kt$/* SY &lt;-- */</ID>
    <ID>ComplexCondition:CustomMangaRepositoryImpl.kt$CustomMangaRepositoryImpl$mangaInfo.title == null &amp;&amp; mangaInfo.author == null &amp;&amp; mangaInfo.artist == null &amp;&amp; mangaInfo.thumbnailUrl == null &amp;&amp; mangaInfo.description == null &amp;&amp; mangaInfo.genre == null &amp;&amp; mangaInfo.status == null</ID>
    <ID>ComplexCondition:EHentaiUpdateWorker.kt$EHentaiUpdateWorker$(new.isNotEmpty() &amp;&amp; manga.id == acceptedRoot.manga.id) || (hasNew &amp;&amp; updatedManga.none { it.first.id == acceptedRoot.manga.id })</ID>
    <ID>ComplexCondition:LibraryUpdateJob.kt$LibraryUpdateJob$group == LibraryGroup.BY_DEFAULT || groupLibraryUpdateType == GroupLibraryMode.GLOBAL || (groupLibraryUpdateType == GroupLibraryMode.ALL_BUT_UNGROUPED &amp;&amp; group == LibraryGroup.UNGROUPED)</ID>
    <ID>ComplexCondition:MangaRestorer.kt$MangaRestorer$customTitle != null || customArtist != null || customAuthor != null || customThumbnailUrl != null || customDescription != null || customGenre != null || customStatus != 0</ID>
    <ID>ComplexCondition:MangaScreenModel.kt$MangaScreenModel$(selectedItem.selected &amp;&amp; selected) || (!selectedItem.selected &amp;&amp; !selected)</ID>
    <ID>ComplexCondition:PagerPageHolder.kt$PagerPageHolder$imageStream is BufferedInputStream &amp;&amp; !ImageUtil.isAnimatedAndSupported(imageStream) &amp;&amp; ImageUtil.isWideImage(imageStream) &amp;&amp; viewer.config.centerMarginType and PagerConfig.CenterMarginType.WIDE_PAGE_CENTER_MARGIN &gt; 0 &amp;&amp; !viewer.config.imageCropBorders</ID>
    <ID>ComplexCondition:PagerViewerAdapter.kt$PagerViewerAdapter$items[itemIndex]?.fullPage == true &amp;&amp; itemIndex &gt; 0 &amp;&amp; items[itemIndex - 1] != null &amp;&amp; (itemIndex - 1) % 2 == 0</ID>
    <ID>ComplexCondition:ReaderActivity.kt$ReaderActivity$readerPreferences.useAutoWebtoon().get() &amp;&amp; (manga?.readingMode?.toInt() ?: ReadingMode.DEFAULT.flagValue) == ReadingMode.DEFAULT.flagValue &amp;&amp; defaultReaderType != null &amp;&amp; defaultReaderType == ReadingMode.WEBTOON.flagValue</ID>
    <ID>ComplexCondition:ReaderNavigationOverlayView.kt$ReaderNavigationOverlayView$isVisible || (!showOnStart &amp;&amp; firstLaunch) || navigation is DisabledNavigation</ID>
    <ID>ComplexCondition:ReaderPageImageView.kt$ReaderPageImageView$config != null &amp;&amp; config!!.landscapeZoom &amp;&amp; config!!.minimumScaleType == SCALE_TYPE_CENTER_INSIDE &amp;&amp; sWidth &gt; sHeight &amp;&amp; scale == minScale</ID>
    <ID>ComplexCondition:SearchEngine.kt$SearchEngine$char == '-' &amp;&amp; !inQuotes &amp;&amp; (queuedRawText.isBlank() || queuedRawText.last() == ' ')</ID>
    <ID>ComplexCondition:SourceTagsUtil.kt$SourceTagsUtil$sourceId == EXH_SOURCE_ID || sourceId == EH_SOURCE_ID || sourceId in nHentaiSourceIds || sourceId in mangaDexSourceIds || sourceId == PURURIN_SOURCE_ID || sourceId == TSUMINO_SOURCE_ID</ID>
    <ID>ComplexCondition:TrackChapter.kt$TrackChapter$service == null || !service.isLoggedIn || chapterNumber &lt;= track.lastChapterRead /* SY --&gt; */ || (service is MdList &amp;&amp; track.status == FollowStatus.UNFOLLOWED.long)</ID>
    <ID>ComposableParamOrder:AutoCompleteItem.kt$AutoCompleteTextField</ID>
    <ID>ComposableParamOrder:ChapterSettingsDialog.kt$ChapterSettingsDialog</ID>
    <ID>ComposableParamOrder:FeedScreen.kt$RadioSelector</ID>
    <ID>ComposableParamOrder:GlobalSearchResultItems.kt$GlobalSearchResultItem</ID>
    <ID>ComposableParamOrder:LazyLibraryGrid.kt$LazyLibraryGrid</ID>
    <ID>ComposableParamOrder:SwitchPreferenceWidget.kt$SwitchPreferenceWidget</ID>
    <ID>ComposableParamOrder:TrackingPreferenceWidget.kt$TrackingPreferenceWidget</ID>
    <ID>ComposableParamOrder:TriStateListDialog.kt$TriStateListDialog</ID>
    <ID>CompositionLocalAllowlist:Navigator.kt$LocalBackPress</ID>
    <ID>CompositionLocalAllowlist:PreferenceItem.kt$LocalPreferenceHighlighted</ID>
    <ID>CompositionLocalAllowlist:PreferenceItem.kt$LocalPreferenceMinHeight</ID>
    <ID>ConstructorParameterNaming:AnilistModels.kt$ALManga$val average_score: Int</ID>
    <ID>ConstructorParameterNaming:AnilistModels.kt$ALManga$val image_url_lge: String</ID>
    <ID>ConstructorParameterNaming:AnilistModels.kt$ALManga$val publishing_status: String</ID>
    <ID>ConstructorParameterNaming:AnilistModels.kt$ALManga$val remote_id: Long</ID>
    <ID>ConstructorParameterNaming:AnilistModels.kt$ALManga$val start_date_fuzzy: Long</ID>
    <ID>ConstructorParameterNaming:AnilistModels.kt$ALManga$val title_user_pref: String</ID>
    <ID>ConstructorParameterNaming:AnilistModels.kt$ALManga$val total_chapters: Long</ID>
    <ID>ConstructorParameterNaming:AnilistModels.kt$ALUserManga$val chapters_read: Int</ID>
    <ID>ConstructorParameterNaming:AnilistModels.kt$ALUserManga$val completed_date_fuzzy: Long</ID>
    <ID>ConstructorParameterNaming:AnilistModels.kt$ALUserManga$val library_id: Long</ID>
    <ID>ConstructorParameterNaming:AnilistModels.kt$ALUserManga$val list_status: String</ID>
    <ID>ConstructorParameterNaming:AnilistModels.kt$ALUserManga$val score_raw: Int</ID>
    <ID>ConstructorParameterNaming:AnilistModels.kt$ALUserManga$val start_date_fuzzy: Long</ID>
    <ID>ConstructorParameterNaming:AnilistModels.kt$OAuth$val access_token: String</ID>
    <ID>ConstructorParameterNaming:AnilistModels.kt$OAuth$val expires_in: Long</ID>
    <ID>ConstructorParameterNaming:AnilistModels.kt$OAuth$val token_type: String</ID>
    <ID>ConstructorParameterNaming:BackupManga.kt$BackupManga$@ProtoNumber(103) var viewer_flags: Int? = null</ID>
    <ID>ConstructorParameterNaming:BangumiModels.kt$Collection$val ep_status: Int? = 0</ID>
    <ID>ConstructorParameterNaming:BangumiModels.kt$Collection$val vol_status: Int? = 0</ID>
    <ID>ConstructorParameterNaming:BangumiModels.kt$OAuth$val access_token: String</ID>
    <ID>ConstructorParameterNaming:BangumiModels.kt$OAuth$val created_at: Long = System.currentTimeMillis() / 1000</ID>
    <ID>ConstructorParameterNaming:BangumiModels.kt$OAuth$val expires_in: Long</ID>
    <ID>ConstructorParameterNaming:BangumiModels.kt$OAuth$val refresh_token: String?</ID>
    <ID>ConstructorParameterNaming:BangumiModels.kt$OAuth$val token_type: String</ID>
    <ID>ConstructorParameterNaming:BangumiModels.kt$OAuth$val user_id: Long?</ID>
    <ID>ConstructorParameterNaming:ExtensionDetailsScreenModel.kt$ExtensionDetailsScreenModel.State$private val _sources: ImmutableList&lt;ExtensionSourceItem&gt;? = null</ID>
    <ID>ConstructorParameterNaming:KavitaModels.kt$SeriesDto$val thumbnail_url: String? = ""</ID>
    <ID>ConstructorParameterNaming:KitsuModels.kt$OAuth$val access_token: String</ID>
    <ID>ConstructorParameterNaming:KitsuModels.kt$OAuth$val created_at: Long</ID>
    <ID>ConstructorParameterNaming:KitsuModels.kt$OAuth$val expires_in: Long</ID>
    <ID>ConstructorParameterNaming:KitsuModels.kt$OAuth$val refresh_token: String?</ID>
    <ID>ConstructorParameterNaming:KitsuModels.kt$OAuth$val token_type: String</ID>
    <ID>ConstructorParameterNaming:MyAnimeListModels.kt$OAuth$val access_token: String</ID>
    <ID>ConstructorParameterNaming:MyAnimeListModels.kt$OAuth$val created_at: Long = System.currentTimeMillis()</ID>
    <ID>ConstructorParameterNaming:MyAnimeListModels.kt$OAuth$val expires_in: Long</ID>
    <ID>ConstructorParameterNaming:MyAnimeListModels.kt$OAuth$val refresh_token: String</ID>
    <ID>ConstructorParameterNaming:MyAnimeListModels.kt$OAuth$val token_type: String</ID>
    <ID>ConstructorParameterNaming:PagePreviewSource.kt$PagePreviewInfo$@Transient private val _progress: MutableStateFlow&lt;Int&gt; = MutableStateFlow(-1)</ID>
    <ID>ConstructorParameterNaming:ShikimoriModels.kt$OAuth$val access_token: String</ID>
    <ID>ConstructorParameterNaming:ShikimoriModels.kt$OAuth$val created_at: Long</ID>
    <ID>ConstructorParameterNaming:ShikimoriModels.kt$OAuth$val expires_in: Long</ID>
    <ID>ConstructorParameterNaming:ShikimoriModels.kt$OAuth$val refresh_token: String?</ID>
    <ID>ConstructorParameterNaming:ShikimoriModels.kt$OAuth$val token_type: String</ID>
    <ID>CyclomaticComplexMethod:AnilistModels.kt$fun DomainTrack.toAnilistScore(): String</ID>
    <ID>CyclomaticComplexMethod:ApiMangaParser.kt$ApiMangaParser$fun parseIntoMetadata( metadata: MangaDexSearchMetadata, mangaDto: MangaDto, simpleChapters: List&lt;String&gt;, statistics: StatisticsMangaDto?, )</ID>
    <ID>CyclomaticComplexMethod:BottomReaderBar.kt$@Composable fun BottomReaderBar( // SY --&gt; enabledButtons: ImmutableSet&lt;String&gt;, // SY &lt;-- backgroundColor: Color, readingMode: ReadingMode, onClickReadingMode: () -&gt; Unit, orientation: ReaderOrientation, onClickOrientation: () -&gt; Unit, cropEnabled: Boolean, onClickCropBorder: () -&gt; Unit, onClickSettings: () -&gt; Unit, // SY --&gt; currentReadingMode: ReadingMode, dualPageSplitEnabled: Boolean, doublePages: Boolean, onClickChapterList: () -&gt; Unit, onClickWebView: (() -&gt; Unit)?, onClickShare: (() -&gt; Unit)?, onClickPageLayout: () -&gt; Unit, onClickShiftPage: () -&gt; Unit, // SY &lt;-- )</ID>
    <ID>CyclomaticComplexMethod:BrowseSourceEHentaiList.kt$@Composable fun BrowseSourceEHentaiListItem( manga: Manga, // SY --&gt; metadata: RaisedSearchMetadata?, // SY &lt;-- onClick: () -&gt; Unit = {}, onLongClick: () -&gt; Unit = onClick, )</ID>
    <ID>CyclomaticComplexMethod:BrowseSourceScreen.kt$@Composable fun BrowseSourceContent( source: Source?, mangaList: LazyPagingItems&lt;StateFlow&lt;/* SY --&gt; */Pair&lt;Manga, RaisedSearchMetadata?&gt;/* SY &lt;-- */&gt;&gt;, columns: GridCells, // SY --&gt; ehentaiBrowseDisplayMode: Boolean, // SY &lt;-- displayMode: LibraryDisplayMode, snackbarHostState: SnackbarHostState, contentPadding: PaddingValues, // SY --&gt; onWebViewClick: (() -&gt; Unit)?, onHelpClick: (() -&gt; Unit)?, onLocalSourceHelpClick: (() -&gt; Unit)?, // SY &lt;-- onMangaClick: (Manga) -&gt; Unit, onMangaLongClick: (Manga) -&gt; Unit, )</ID>
    <ID>CyclomaticComplexMethod:BrowseSourceScreen.kt$BrowseSourceScreen$@Composable override fun Content()</ID>
    <ID>CyclomaticComplexMethod:BrowseSourceScreenModel.kt$BrowseSourceScreenModel$fun searchGenre(genreName: String)</ID>
    <ID>CyclomaticComplexMethod:Button.kt$ButtonElevation$@Composable private fun animateElevation( enabled: Boolean, interactionSource: InteractionSource, ): State&lt;Dp&gt;</ID>
    <ID>CyclomaticComplexMethod:ChapterLoader.kt$ChapterLoader$private fun getPageLoader(chapter: ReaderChapter): PageLoader</ID>
    <ID>CyclomaticComplexMethod:Chip.kt$ChipElevation$@Composable private fun animateElevation( enabled: Boolean, interactionSource: InteractionSource, ): State&lt;Dp&gt;</ID>
    <ID>CyclomaticComplexMethod:DownloadCache.kt$DownloadCache$private fun renewCache()</ID>
    <ID>CyclomaticComplexMethod:EHentai.kt$EHentai$override fun searchMangaRequest(page: Int, query: String, filters: FilterList): Request</ID>
    <ID>CyclomaticComplexMethod:EHentai.kt$EHentai$override suspend fun parseIntoMetadata(metadata: EHentaiSearchMetadata, input: Document)</ID>
    <ID>CyclomaticComplexMethod:EHentai.kt$EHentai$private fun extendedGenericMangaParse(doc: Document)</ID>
    <ID>CyclomaticComplexMethod:EHentaiDescriptionAdapter.kt$@Composable fun EHentaiDescription(state: State.Success, openMetadataViewer: () -&gt; Unit, search: (String) -&gt; Unit)</ID>
    <ID>CyclomaticComplexMethod:EHentaiUpdateWorker.kt$EHentaiUpdateWorker$private suspend fun startUpdating()</ID>
    <ID>CyclomaticComplexMethod:EXHMigrations.kt$EXHMigrations$fun upgrade( context: Context, preferenceStore: PreferenceStore, basePreferences: BasePreferences, uiPreferences: UiPreferences, networkPreferences: NetworkPreferences, sourcePreferences: SourcePreferences, securityPreferences: SecurityPreferences, libraryPreferences: LibraryPreferences, readerPreferences: ReaderPreferences, backupPreferences: BackupPreferences, trackerManager: TrackerManager, pagePreviewCache: PagePreviewCache, ): Boolean</ID>
    <ID>CyclomaticComplexMethod:EditMangaDialog.kt$private fun onViewCreated(manga: Manga, context: Context, binding: EditMangaDialogBinding, scope: CoroutineScope)</ID>
    <ID>CyclomaticComplexMethod:EditMergedSettingsHeaderAdapter.kt$EditMergedSettingsHeaderAdapter.HeaderViewHolder$fun bind()</ID>
    <ID>CyclomaticComplexMethod:EhUConfigBuilder.kt$EhUConfigBuilder$fun build(hathPerks: EHHathPerksResponse): FormBody</ID>
    <ID>CyclomaticComplexMethod:ExtensionLoader.kt$ExtensionLoader$private fun loadExtension(context: Context, extensionInfo: ExtensionInfo): LoadResult</ID>
    <ID>CyclomaticComplexMethod:ExtensionsScreen.kt$@Composable private fun ExtensionContent( state: ExtensionsScreenModel.State, contentPadding: PaddingValues, onLongClickItem: (Extension) -&gt; Unit, onClickItemCancel: (Extension) -&gt; Unit, onOpenWebView: (Extension.Available) -&gt; Unit, onInstallExtension: (Extension.Available) -&gt; Unit, onUninstallExtension: (Extension) -&gt; Unit, onUpdateExtension: (Extension.Installed) -&gt; Unit, onTrustExtension: (Extension.Untrusted) -&gt; Unit, onOpenExtension: (Extension.Installed) -&gt; Unit, onClickUpdateAll: () -&gt; Unit, )</ID>
    <ID>CyclomaticComplexMethod:ExtensionsScreen.kt$@Composable private fun ExtensionItemContent( extension: Extension, installStep: InstallStep, modifier: Modifier = Modifier, )</ID>
    <ID>CyclomaticComplexMethod:FilterHandler.kt$FilterHandler$fun getQueryMap(filters: FilterList): Map&lt;String, Any&gt;</ID>
    <ID>CyclomaticComplexMethod:FilterSerializer.kt$FilterSerializer$fun deserialize(filter: Filter&lt;Any?&gt;, json: JsonObject)</ID>
    <ID>CyclomaticComplexMethod:GalleryAdder.kt$GalleryAdder$suspend fun addGallery( context: Context, url: String, fav: Boolean = false, forceSource: UrlImportableSource? = null, throttleFunc: suspend () -&gt; Unit = {}, retry: Int = 1, ): GalleryAddEvent</ID>
    <ID>CyclomaticComplexMethod:GetSourcesWithFavoriteCount.kt$GetSourcesWithFavoriteCount$private fun sortFn( direction: SetMigrateSorting.Direction, sorting: SetMigrateSorting.Mode, ): java.util.Comparator&lt;Pair&lt;Source, Long&gt;&gt;</ID>
    <ID>CyclomaticComplexMethod:ImageUtil.kt$ImageUtil$fun chooseBackground(context: Context, imageStream: InputStream): Drawable</ID>
    <ID>CyclomaticComplexMethod:LewdMangaChecker.kt$private fun isHentaiSource(source: String): Boolean</ID>
    <ID>CyclomaticComplexMethod:LibraryScreenModel.kt$LibraryScreenModel$fun getCategoryName( context: Context, category: Category?, groupType: Int, categoryName: String, ): String</ID>
    <ID>CyclomaticComplexMethod:LibraryScreenModel.kt$LibraryScreenModel$private fun LibraryMap.applySort( // Map&lt;MangaId, List&lt;Track&gt;&gt; trackMap: Map&lt;Long, List&lt;Track&gt;&gt;, /* SY --&gt; */ groupSort: LibrarySort? = null, /* SY &lt;-- */ ): LibraryMap</ID>
    <ID>CyclomaticComplexMethod:LibraryScreenModel.kt$LibraryScreenModel$private fun filterManga( queries: List&lt;QueryComponent&gt;, libraryManga: LibraryManga, tracks: List&lt;Track&gt;?, source: Source?, checkGenre: Boolean = true, searchTags: List&lt;SearchTag&gt;? = null, searchTitles: List&lt;SearchTitle&gt;? = null, loggedInTrackServices: Map&lt;Long, TriState&gt;, ): Boolean</ID>
    <ID>CyclomaticComplexMethod:LibraryScreenModel.kt$LibraryScreenModel$private fun getGroupedMangaItems( groupType: Int, libraryManga: List&lt;LibraryItem&gt;, ): LibraryMap</ID>
    <ID>CyclomaticComplexMethod:LibraryScreenModel.kt$LibraryScreenModel$private suspend fun LibraryMap.applyFilters( trackMap: Map&lt;Long, List&lt;Track&gt;&gt;, loggedInTrackers: Map&lt;Long, TriState&gt;, ): LibraryMap</ID>
    <ID>CyclomaticComplexMethod:LibrarySortMode.kt$LibrarySort.Companion$fun deserialize(serialized: String): LibrarySort</ID>
    <ID>CyclomaticComplexMethod:LibraryTab.kt$LibraryTab$@Composable override fun Content()</ID>
    <ID>CyclomaticComplexMethod:LibraryUpdateJob.kt$LibraryUpdateJob$private suspend fun addMangaToQueue(categoryId: Long, group: Int, groupExtra: String?)</ID>
    <ID>CyclomaticComplexMethod:LibraryUpdateJob.kt$LibraryUpdateJob$private suspend fun updateChapterList()</ID>
    <ID>CyclomaticComplexMethod:LocalFavoritesStorage.kt$LocalFavoritesStorage$private fun FavoriteEntry.urlEquals(other: FavoriteEntry)</ID>
    <ID>CyclomaticComplexMethod:LocalSource.kt$LocalSource$override suspend fun getMangaDetails(manga: SManga): SManga</ID>
    <ID>CyclomaticComplexMethod:LocalSource.kt$LocalSource$override suspend fun getSearchManga(page: Int, query: String, filters: FilterList): MangasPage</ID>
    <ID>CyclomaticComplexMethod:LocalSource.kt$LocalSource$private fun updateCover(chapter: SChapter, manga: SManga): UniFile?</ID>
    <ID>CyclomaticComplexMethod:MainActivity.kt$MainActivity$override fun onCreate(savedInstanceState: Bundle?)</ID>
    <ID>CyclomaticComplexMethod:MainActivity.kt$MainActivity$private fun handleIntentAction(intent: Intent, navigator: Navigator): Boolean</ID>
    <ID>CyclomaticComplexMethod:MangaBackupCreator.kt$MangaBackupCreator$private suspend fun backupManga(manga: Manga, options: BackupOptions): BackupManga</ID>
    <ID>CyclomaticComplexMethod:MangaChapterListItem.kt$@Composable fun MangaChapterListItem( title: String, date: String?, readProgress: String?, scanlator: String?, // SY --&gt; sourceName: String?, // SY &lt;-- read: Boolean, bookmark: Boolean, selected: Boolean, downloadIndicatorEnabled: Boolean, downloadStateProvider: () -&gt; Download.State, downloadProgressProvider: () -&gt; Int, chapterSwipeStartAction: LibraryPreferences.ChapterSwipeAction, chapterSwipeEndAction: LibraryPreferences.ChapterSwipeAction, onLongClick: () -&gt; Unit, onClick: () -&gt; Unit, onDownloadClick: ((ChapterDownloadAction) -&gt; Unit)?, onChapterSwipe: (LibraryPreferences.ChapterSwipeAction) -&gt; Unit, modifier: Modifier = Modifier, )</ID>
    <ID>CyclomaticComplexMethod:MangaInfoHeader.kt$@Composable private fun ColumnScope.MangaContentInfo( title: String, doSearch: (query: String, global: Boolean) -&gt; Unit, author: String?, artist: String?, status: Long, sourceName: String, isStubSource: Boolean, textAlign: TextAlign? = LocalTextStyle.current.textAlign, )</ID>
    <ID>CyclomaticComplexMethod:MangaScreen.kt$MangaScreen$@Composable override fun Content()</ID>
    <ID>CyclomaticComplexMethod:MangaScreenModel.kt$MangaScreenModel$fun toggleSelection( item: ChapterList.Item, selected: Boolean, userSelected: Boolean = false, fromLongPress: Boolean = false, )</ID>
    <ID>CyclomaticComplexMethod:MangaToolbar.kt$@Composable fun MangaToolbar( title: String, titleAlphaProvider: () -&gt; Float, hasFilters: Boolean, onBackClicked: () -&gt; Unit, onClickFilter: () -&gt; Unit, onClickShare: (() -&gt; Unit)?, onClickDownload: ((DownloadAction) -&gt; Unit)?, onClickEditCategory: (() -&gt; Unit)?, onClickRefresh: () -&gt; Unit, onClickMigrate: (() -&gt; Unit)?, // SY --&gt; onClickEditInfo: (() -&gt; Unit)?, onClickRecommend: (() -&gt; Unit)?, onClickMerge: (() -&gt; Unit)?, onClickMergedSettings: (() -&gt; Unit)?, // SY &lt;-- // For action mode actionModeCounter: Int, onSelectAll: () -&gt; Unit, onInvertSelection: () -&gt; Unit, modifier: Modifier = Modifier, backgroundAlphaProvider: () -&gt; Float = titleAlphaProvider, )</ID>
    <ID>CyclomaticComplexMethod:MangaType.kt$fun Manga.mangaType(sourceName: String? = Injekt.get&lt;SourceManager&gt;().get(source)?.name): MangaType</ID>
    <ID>CyclomaticComplexMethod:MangaType.kt$private fun isComicSource(sourceName: String): Boolean</ID>
    <ID>CyclomaticComplexMethod:MangaType.kt$private fun isManhwaSource(sourceName: String): Boolean</ID>
    <ID>CyclomaticComplexMethod:MetadataUIUtil.kt$MetadataUIUtil$fun getGenreAndColour(context: Context, genre: String)</ID>
    <ID>CyclomaticComplexMethod:MigrationListScreen.kt$MigrationListScreen$@Composable override fun Content()</ID>
    <ID>CyclomaticComplexMethod:MigrationListScreenModel.kt$MigrationListScreenModel$private suspend fun migrateMangaInternal( prevManga: Manga, manga: Manga, replace: Boolean, )</ID>
    <ID>CyclomaticComplexMethod:MigrationListScreenModel.kt$MigrationListScreenModel$private suspend fun runMigrations(mangas: List&lt;MigratingManga&gt;)</ID>
    <ID>CyclomaticComplexMethod:Migrations.kt$Migrations$fun upgrade( context: Context, preferenceStore: PreferenceStore, basePreferences: BasePreferences, uiPreferences: UiPreferences, networkPreferences: NetworkPreferences, sourcePreferences: SourcePreferences, securityPreferences: SecurityPreferences, libraryPreferences: LibraryPreferences, readerPreferences: ReaderPreferences, backupPreferences: BackupPreferences, trackerManager: TrackerManager, ): Boolean</ID>
    <ID>CyclomaticComplexMethod:NHentaiDescriptionAdapter.kt$@Composable fun NHentaiDescription(state: State.Success, openMetadataViewer: () -&gt; Unit)</ID>
    <ID>CyclomaticComplexMethod:NHentaiSearchMetadata.kt$NHentaiSearchMetadata$override fun createMangaInfo(manga: SManga): SManga</ID>
    <ID>CyclomaticComplexMethod:NotificationReceiver.kt$NotificationReceiver$override fun onReceive(context: Context, intent: Intent)</ID>
    <ID>CyclomaticComplexMethod:PagerPageHolder.kt$PagerPageHolder$private fun mergePages(imageStream: InputStream, imageStream2: InputStream?): InputStream</ID>
    <ID>CyclomaticComplexMethod:PagerPageHolder.kt$PagerPageHolder$private fun splitInHalf(imageStream: InputStream): InputStream</ID>
    <ID>CyclomaticComplexMethod:PagerViewer.kt$PagerViewer$override fun handleKeyEvent(event: KeyEvent): Boolean</ID>
    <ID>CyclomaticComplexMethod:PagerViewerAdapter.kt$PagerViewerAdapter$fun setChapters(chapters: ViewerChapters, forceTransition: Boolean)</ID>
    <ID>CyclomaticComplexMethod:PagerViewerAdapter.kt$PagerViewerAdapter$private fun setJoinedItems(useSecondPage: Boolean = false)</ID>
    <ID>CyclomaticComplexMethod:PreferenceItem.kt$@Composable internal fun PreferenceItem( item: Preference.PreferenceItem&lt;*&gt;, highlightKey: String?, )</ID>
    <ID>CyclomaticComplexMethod:PururinDescriptionAdapter.kt$@Composable fun PururinDescription(state: State.Success, openMetadataViewer: () -&gt; Unit)</ID>
    <ID>CyclomaticComplexMethod:RateLimitInterceptor.kt$RateLimitInterceptor$override fun intercept(chain: Interceptor.Chain): Response</ID>
    <ID>CyclomaticComplexMethod:ReaderActivity.kt$ReaderActivity$override fun onCreate(savedInstanceState: Bundle?)</ID>
    <ID>CyclomaticComplexMethod:ReaderActivity.kt$ReaderActivity$private fun initializeMenu()</ID>
    <ID>CyclomaticComplexMethod:ReaderViewModel.kt$ReaderViewModel$private suspend fun updateChapterProgress( readerChapter: ReaderChapter, page: Page/* SY --&gt; */, hasExtraPage: Boolean, /* SY &lt;-- */ )</ID>
    <ID>CyclomaticComplexMethod:Scaffold.kt$@Composable private fun ScaffoldLayout( fabPosition: FabPosition, topBar: @Composable () -&gt; Unit, startBar: @Composable () -&gt; Unit, content: @Composable (PaddingValues) -&gt; Unit, snackbar: @Composable () -&gt; Unit, fab: @Composable () -&gt; Unit, contentWindowInsets: WindowInsets, bottomBar: @Composable () -&gt; Unit, )</ID>
    <ID>CyclomaticComplexMethod:SearchEngine.kt$SearchEngine$fun parseQuery(query: String, enableWildcard: Boolean = true)</ID>
    <ID>CyclomaticComplexMethod:SettingsEhScreen.kt$SettingsEhScreen$private fun getRelativeTimeFromNow(then: Duration): RelativeTime</ID>
    <ID>CyclomaticComplexMethod:SettingsEhScreen.kt$SettingsEhScreen$private fun getRelativeTimeString(relativeTime: RelativeTime, context: Context): String</ID>
    <ID>CyclomaticComplexMethod:SourceTagsUtil.kt$SourceTagsUtil$fun getLocaleSourceUtil(language: String?)</ID>
    <ID>CyclomaticComplexMethod:SourceTagsUtil.kt$SourceTagsUtil$fun getWrappedTag( sourceId: Long?, namespace: String? = null, tag: String? = null, fullTag: String? = null, ): String?</ID>
    <ID>CyclomaticComplexMethod:SourcesScreenModel.kt$SourcesScreenModel$private fun collectLatestSources(sources: List&lt;Source&gt;, categories: List&lt;String&gt;, showLatest: Boolean, showPin: Boolean)</ID>
    <ID>CyclomaticComplexMethod:SyncChaptersWithSource.kt$SyncChaptersWithSource$suspend fun await( rawSourceChapters: List&lt;SChapter&gt;, manga: Manga, source: Source, manualFetch: Boolean = false, fetchWindow: Pair&lt;Long, Long&gt; = Pair(0, 0), ): List&lt;Chapter&gt;</ID>
    <ID>CyclomaticComplexMethod:TrackStatus.kt$TrackStatus.Companion$fun parseTrackerStatus(trackerManager: TrackerManager, tracker: Long, status: Long): TrackStatus?</ID>
    <ID>CyclomaticComplexMethod:TriStateListDialog.kt$@Composable fun &lt;T&gt; TriStateListDialog( title: String, message: String? = null, items: List&lt;T&gt;, initialChecked: List&lt;T&gt;, initialInversed: List&lt;T&gt;, itemLabel: @Composable (T) -&gt; String, onDismissRequest: () -&gt; Unit, onValueChanged: (newIncluded: List&lt;T&gt;, newExcluded: List&lt;T&gt;) -&gt; Unit, )</ID>
    <ID>CyclomaticComplexMethod:TsuminoDescriptionAdapter.kt$@Composable fun TsuminoDescription(state: State.Success, openMetadataViewer: () -&gt; Unit)</ID>
    <ID>CyclomaticComplexMethod:UpdatesScreenModel.kt$UpdatesScreenModel$fun toggleSelection( item: UpdatesItem, selected: Boolean, userSelected: Boolean = false, fromLongPress: Boolean = false, )</ID>
    <ID>CyclomaticComplexMethod:VerticalFastScroller.kt$@Composable fun VerticalFastScroller( listState: LazyListState, modifier: Modifier = Modifier, thumbAllowed: () -&gt; Boolean = { true }, thumbColor: Color = MaterialTheme.colorScheme.primary, topContentPadding: Dp = Dp.Hairline, bottomContentPadding: Dp = Dp.Hairline, endContentPadding: Dp = Dp.Hairline, content: @Composable () -&gt; Unit, )</ID>
    <ID>CyclomaticComplexMethod:VerticalFastScroller.kt$@Composable fun VerticalGridFastScroller( state: LazyGridState, columns: GridCells, arrangement: Arrangement.Horizontal, contentPadding: PaddingValues, modifier: Modifier = Modifier, thumbAllowed: () -&gt; Boolean = { true }, thumbColor: Color = MaterialTheme.colorScheme.primary, topContentPadding: Dp = Dp.Hairline, bottomContentPadding: Dp = Dp.Hairline, endContentPadding: Dp = Dp.Hairline, content: @Composable () -&gt; Unit, )</ID>
    <ID>CyclomaticComplexMethod:WebtoonRecyclerView.kt$WebtoonRecyclerView.Detector$override fun onTouchEvent(ev: MotionEvent): Boolean</ID>
    <ID>CyclomaticComplexMethod:WebtoonViewer.kt$WebtoonViewer$override fun handleKeyEvent(event: KeyEvent): Boolean</ID>
    <ID>DestructuringDeclarationWithTooManyEntries:ExtensionsScreenModel.kt$ExtensionsScreenModel$(_updates, _installed, _available, _untrusted)</ID>
    <ID>DestructuringDeclarationWithTooManyEntries:MangaInfoHeader.kt$(shrunk, expanded, actual, scrim)</ID>
    <ID>DestructuringDeclarationWithTooManyEntries:MangaScreenModel.kt$MangaScreenModel$(manga, chapters /* SY --&gt; */, flatMetadata, mergedData /* SY &lt;-- */)</ID>
    <ID>DestructuringDeclarationWithTooManyEntries:NamespaceTags.kt$(_, text, search, border)</ID>
    <ID>EmptyCatchBlock:EnhancedFilePrinter.kt$EnhancedFilePrinter.Writer${ }</ID>
    <ID>EmptyCatchBlock:MigrationListScreenModel.kt$MigrationListScreenModel${ }</ID>
    <ID>EmptyCatchBlock:RarPageLoader.kt$RarPageLoader${ }</ID>
    <ID>EmptyDefaultConstructor:FavoritesSyncHelper.kt$FavoritesSyncStatus$()</ID>
    <ID>EnumEntryNameCase:EhUConfigBuilder.kt$Entry.ImageSize$1280 : ImageSize</ID>
    <ID>EnumEntryNameCase:EhUConfigBuilder.kt$Entry.ImageSize$1600 : ImageSize</ID>
    <ID>EnumEntryNameCase:EhUConfigBuilder.kt$Entry.ImageSize$2400 : ImageSize</ID>
    <ID>EnumEntryNameCase:EhUConfigBuilder.kt$Entry.ImageSize$780 : ImageSize</ID>
    <ID>EnumEntryNameCase:EhUConfigBuilder.kt$Entry.ImageSize$980 : ImageSize</ID>
    <ID>EnumEntryNameCase:EhUConfigBuilder.kt$Entry.SearchResultsCount$100 : SearchResultsCount</ID>
    <ID>EnumEntryNameCase:EhUConfigBuilder.kt$Entry.SearchResultsCount$200 : SearchResultsCount</ID>
    <ID>EnumEntryNameCase:EhUConfigBuilder.kt$Entry.SearchResultsCount$25 : SearchResultsCount</ID>
    <ID>EnumEntryNameCase:EhUConfigBuilder.kt$Entry.SearchResultsCount$50 : SearchResultsCount</ID>
    <ID>EnumEntryNameCase:EhUConfigBuilder.kt$Entry.ThumbnailRows$10 : ThumbnailRows</ID>
    <ID>EnumEntryNameCase:EhUConfigBuilder.kt$Entry.ThumbnailRows$20 : ThumbnailRows</ID>
    <ID>EnumEntryNameCase:EhUConfigBuilder.kt$Entry.ThumbnailRows$4 : ThumbnailRows</ID>
    <ID>EnumEntryNameCase:EhUConfigBuilder.kt$Entry.ThumbnailRows$40 : ThumbnailRows</ID>
    <ID>EnumNaming:EhUConfigBuilder.kt$Entry.ImageSize$1280 : ImageSize</ID>
    <ID>EnumNaming:EhUConfigBuilder.kt$Entry.ImageSize$1600 : ImageSize</ID>
    <ID>EnumNaming:EhUConfigBuilder.kt$Entry.ImageSize$2400 : ImageSize</ID>
    <ID>EnumNaming:EhUConfigBuilder.kt$Entry.ImageSize$780 : ImageSize</ID>
    <ID>EnumNaming:EhUConfigBuilder.kt$Entry.ImageSize$980 : ImageSize</ID>
    <ID>EnumNaming:EhUConfigBuilder.kt$Entry.SearchResultsCount$100 : SearchResultsCount</ID>
    <ID>EnumNaming:EhUConfigBuilder.kt$Entry.SearchResultsCount$200 : SearchResultsCount</ID>
    <ID>EnumNaming:EhUConfigBuilder.kt$Entry.SearchResultsCount$25 : SearchResultsCount</ID>
    <ID>EnumNaming:EhUConfigBuilder.kt$Entry.SearchResultsCount$50 : SearchResultsCount</ID>
    <ID>EnumNaming:EhUConfigBuilder.kt$Entry.ThumbnailRows$10 : ThumbnailRows</ID>
    <ID>EnumNaming:EhUConfigBuilder.kt$Entry.ThumbnailRows$20 : ThumbnailRows</ID>
    <ID>EnumNaming:EhUConfigBuilder.kt$Entry.ThumbnailRows$4 : ThumbnailRows</ID>
    <ID>EnumNaming:EhUConfigBuilder.kt$Entry.ThumbnailRows$40 : ThumbnailRows</ID>
    <ID>EqualsAlwaysReturnsTrueOrFalse:FilterList.kt$FilterList$override fun equals(other: Any?): Boolean</ID>
    <ID>ExplicitItLambdaParameter:ColorFilterPage.kt${ index, it -&gt; FilterChip( selected = colorFilterMode == index, onClick = { screenModel.preferences.colorFilterMode().set(index) }, label = { Text(stringResource(it.first)) }, ) }</ID>
    <ID>ExplicitItLambdaParameter:FavoritesSyncHelper.kt$FavoritesSyncHelper${ index, it -&gt; status.value = FavoritesSyncStatus.Processing( context.stringResource(SYMR.strings.favorites_sync_remove_from_local, index + 1, changeSet.removed.size), title = it.title, ) val url = it.getUrl() // Consider both EX and EH sources listOf( EXH_SOURCE_ID, EH_SOURCE_ID, ).forEach { val manga = getManga.await(url, it) if (manga?.favorite == true) { updateManga.awaitUpdateFavorite(manga.id, false) removedManga += manga } } }</ID>
    <ID>ExplicitItLambdaParameter:FavoritesSyncHelper.kt$FavoritesSyncHelper${ index, it -&gt; status.value = FavoritesSyncStatus.Processing( message = context.stringResource(SYMR.strings.favorites_sync_add_to_local, index + 1, changeSet.added.size), isThrottle = needWarnThrottle(), context = context, title = it.title, ) throttleManager.throttle() // Import using gallery adder val result = galleryAdder.addGallery( context = context, url = "${exh.baseUrl}${it.getUrl()}", fav = true, forceSource = exh, throttleFunc = throttleManager::throttle, retry = 3, ) if (result is GalleryAddEvent.Fail) { if (result is GalleryAddEvent.Fail.NotFound) { logger.e(context.stringResource(SYMR.strings.favorites_sync_remote_not_exist, it.getUrl())) // Skip this gallery, it no longer exists return@forEachIndexed } val errorString = context.stringResource(SYMR.strings.favorites_sync_failed_to_add_to_local) + when (result) { is GalleryAddEvent.Fail.Error -&gt; context.stringResource( SYMR.strings.favorites_sync_failed_to_add_to_local_error, it.title, result.logMessage, ) is GalleryAddEvent.Fail.UnknownType -&gt; context.stringResource( SYMR.strings.favorites_sync_failed_to_add_to_local_unknown_type, it.title, result.galleryUrl, ) is GalleryAddEvent.Fail.UnknownSource -&gt; context.stringResource( SYMR.strings.favorites_sync_failed_to_add_to_local_unknown_type, it.title, result.galleryUrl, ) } if (prefs.exhLenientSync().get()) { errorList += errorString } else { status.value = FavoritesSyncStatus.Error(errorString) throw IgnoredException(errorString) } } else if (result is GalleryAddEvent.Success) { insertedMangaCategories += categories[it.category].id to result.manga } }</ID>
    <ID>ExplicitItLambdaParameter:FavoritesSyncHelper.kt$FavoritesSyncHelper${ index, it -&gt; status.value = FavoritesSyncStatus.Processing( message = context.stringResource(SYMR.strings.favorites_sync_adding_to_remote, index + 1, changeSet.added.size), isThrottle = needWarnThrottle(), context = context, title = it.title, ) throttleManager.throttle() addGalleryRemote(errorList, it) }</ID>
    <ID>ExplicitItLambdaParameter:LibraryTab.kt$LibraryTab${ it: LibraryManga -&gt; scope.launchIO { val chapter = screenModel.getNextUnreadChapter(it.manga) if (chapter != null) { context.startActivity( ReaderActivity.newIntent(context, chapter.mangaId, chapter.id), ) } else { snackbarHostState.showSnackbar(context.stringResource(MR.strings.no_next_chapter)) } } Unit }</ID>
    <ID>ExplicitItLambdaParameter:ReadingModePage.kt${ index, it -&gt; FilterChip( selected = centerMarginType == index, onClick = { screenModel.preferences.centerMarginType().set(index) }, label = { Text(stringResource(it)) }, ) }</ID>
    <ID>ExplicitItLambdaParameter:ReadingModePage.kt${ index, it -&gt; FilterChip( selected = imageScaleType == index + 1, onClick = { screenModel.preferences.imageScaleType().set(index + 1) }, label = { Text(stringResource(it)) }, ) }</ID>
    <ID>ExplicitItLambdaParameter:ReadingModePage.kt${ index, it -&gt; FilterChip( selected = pageLayout == index, onClick = { screenModel.preferences.pageLayout().set(index) }, label = { Text(stringResource(it)) }, ) }</ID>
    <ID>ExplicitItLambdaParameter:ReadingModePage.kt${ index, it -&gt; FilterChip( selected = selected == index, onClick = { onSelect(index) }, label = { Text(stringResource(it)) }, ) }</ID>
    <ID>ExplicitItLambdaParameter:ReadingModePage.kt${ index, it -&gt; FilterChip( selected = zoomStart == index + 1, onClick = { screenModel.preferences.zoomStart().set(index + 1) }, label = { Text(stringResource(it)) }, ) }</ID>
    <ID>ExplicitItLambdaParameter:SettingsReaderScreen.kt$SettingsReaderScreen${ index, it -&gt; index + 1 to stringResource(it) }</ID>
    <ID>ExplicitItLambdaParameter:SettingsReaderScreen.kt$SettingsReaderScreen${ index, it -&gt; index to stringResource(it) }</ID>
    <ID>Filename:__Assets.kt$exh.assets.ehassets.exh.__Assets.kt</ID>
    <ID>Filename:__EhAssets.kt$exh.assets.__EhAssets.kt</ID>
    <ID>Filename:__Ehassets.kt$exh.assets.ehassets.exh.assets.__Ehassets.kt</ID>
    <ID>Filename:__Exh.kt$exh.assets.ehassets.__Exh.kt</ID>
    <ID>FinalNewline:Commands.kt$.Commands.kt</ID>
    <ID>ForEachOnRange:MangaBottomActionMenu.kt$0..&lt;5</ID>
    <ID>ForEachOnRange:MangaBottomActionMenu.kt$0..&lt;7</ID>
    <ID>ForEachOnRange:PagerViewerAdapter.kt$PagerViewerAdapter$fullPageBeforeIndex until items.size</ID>
    <ID>ForEachOnRange:UpdatesWidget.kt$0..&lt;rowCount</ID>
    <ID>ForbiddenComment:AddTracks.kt$AddTracks$// TODO: merge into [SyncChapterProgressWithTrack]?</ID>
    <ID>ForbiddenComment:AddTracks.kt$AddTracks$// TODO: update all trackers based on common data</ID>
    <ID>ForbiddenComment:AppTheme.kt$AppTheme.NORD$// TODO: re-enable for preview</ID>
    <ID>ForbiddenComment:BackupRestorer.kt$BackupRestorer$// TODO: optionally trigger online library + tracker update</ID>
    <ID>ForbiddenComment:BangumiApi.kt$BangumiApi$// TODO: get user readed chapter here</ID>
    <ID>ForbiddenComment:BaseTracker.kt$BaseTracker$// TODO: Store all scores as 10 point in the future maybe?</ID>
    <ID>ForbiddenComment:BaselineProfileGenerator.kt$BaselineProfileGenerator$// TODO: automate storage permissions and possibly open manga details screen too?</ID>
    <ID>ForbiddenComment:CategoryDialogs.kt$// TODO: https://issuetracker.google.com/issues/204502668</ID>
    <ID>ForbiddenComment:Chapter.kt$// TODO: Remove when all deps are migrated</ID>
    <ID>ForbiddenComment:ConfigurableSource.kt$// TODO: use getSourcePreferences once all extensions are on ext-lib 1.5</ID>
    <ID>ForbiddenComment:DisplayExtensions.kt$// TODO: move the logic to `isTabletUi()` when main activity is rewritten in Compose</ID>
    <ID>ForbiddenComment:ExtensionReposDialogs.kt$// TODO: https://issuetracker.google.com/issues/204502668</ID>
    <ID>ForbiddenComment:GlobalSearchToolbar.kt$// TODO: make this UX better; it only applies when triggering a new search</ID>
    <ID>ForbiddenComment:HomeScreen.kt$HomeScreen$// TODO: https://issuetracker.google.com/u/0/issues/316327367</ID>
    <ID>ForbiddenComment:LibrarySettingsDialog.kt$// TODO: re-enable when custom intervals are ready for stable</ID>
    <ID>ForbiddenComment:LibraryTabs.kt$// TODO: use default when width is fixed upstream</ID>
    <ID>ForbiddenComment:LibraryUpdateJob.kt$LibraryUpdateJob$// TODO: surface skipped reasons to user?</ID>
    <ID>ForbiddenComment:LocalSource.kt$LocalSource$// TODO: remove support for this entirely after a while</ID>
    <ID>ForbiddenComment:Localize.kt$// TODO: janky workaround for https://github.com/icerockdev/moko-resources/issues/337</ID>
    <ID>ForbiddenComment:MainActivity.kt$MainActivity$// TODO: replace with ComponentActivity#enableEdgeToEdge</ID>
    <ID>ForbiddenComment:Manga.kt$// TODO: move these into the domain model</ID>
    <ID>ForbiddenComment:MangaCoverScreenModel.kt$MangaCoverScreenModel$// TODO: Handle animated cover</ID>
    <ID>ForbiddenComment:MangaInfoHeader.kt$// TODO: show something better when using custom interval</ID>
    <ID>ForbiddenComment:MigrateSourceTab.kt$// TODO: Jay wtf, need to clean this up sometime</ID>
    <ID>ForbiddenComment:PreferenceItem.kt$// TODO: use different composable?</ID>
    <ID>ForbiddenComment:ReaderPreferences.kt$ReaderPreferences$// TODO: default this to true if reader long strip ever goes stable</ID>
    <ID>ForbiddenComment:SettingsAdvancedScreen.kt$SettingsAdvancedScreen$// TODO: allow private option in stable versions once URL handling is more fleshed out</ID>
    <ID>ForbiddenComment:Tracker.kt$Tracker$// TODO: Store all scores as 10 point in the future maybe?</ID>
    <ID>ForbiddenComment:Tracker.kt$Tracker$// TODO: move this to an interactor, and update all trackers based on common data</ID>
    <ID>ForbiddenComment:VerticalFastScroller.kt$// TODO: Sometimes item height is not available when scrolling up</ID>
    <ID>FunctionNaming:Downloader.kt$Downloader$private fun _clearQueue()</ID>
    <ID>FunctionNaming:PagePreviews.kt$fun LazyListScope.PagePreviewItems( pagePreviewState: PagePreviewState, onOpenPage: (Int) -&gt; Unit, onMorePreviewsClicked: () -&gt; Unit, maxWidth: Dp, setMaxWidth: (Dp) -&gt; Unit, rowCount: Int, )</ID>
    <ID>FunctionNaming:Pin.kt$fun Pins(vararg pins: Pin)</ID>
    <ID>FunctionNaming:PullRefresh.kt$PullToRefreshStateImpl.Companion$fun Saver( extraVerticalOffset: Float, positionalThreshold: Float, enabled: () -&gt; Boolean, onRefresh: () -&gt; Unit, )</ID>
    <ID>FunctionNaming:Requests.kt$fun DELETE( url: String, headers: Headers = DEFAULT_HEADERS, body: RequestBody = DEFAULT_BODY, cache: CacheControl = DEFAULT_CACHE_CONTROL, ): Request</ID>
    <ID>FunctionNaming:Requests.kt$fun GET( url: HttpUrl, headers: Headers = DEFAULT_HEADERS, cache: CacheControl = DEFAULT_CACHE_CONTROL, ): Request</ID>
    <ID>FunctionNaming:Requests.kt$fun GET( url: String, headers: Headers = DEFAULT_HEADERS, cache: CacheControl = DEFAULT_CACHE_CONTROL, ): Request</ID>
    <ID>FunctionNaming:Requests.kt$fun PATCH( url: String, headers: Headers = DEFAULT_HEADERS, body: RequestBody = DEFAULT_BODY, cache: CacheControl = DEFAULT_CACHE_CONTROL, ): Request</ID>
    <ID>FunctionNaming:Requests.kt$fun POST( url: String, headers: Headers = DEFAULT_HEADERS, body: RequestBody = DEFAULT_BODY, cache: CacheControl = DEFAULT_CACHE_CONTROL, ): Request</ID>
    <ID>FunctionNaming:Requests.kt$fun PUT( url: String, headers: Headers = DEFAULT_HEADERS, body: RequestBody = DEFAULT_BODY, cache: CacheControl = DEFAULT_CACHE_CONTROL, ): Request</ID>
    <ID>FunctionParameterNaming:MangaScreen.kt$MangaScreen$manga_: Manga?</ID>
    <ID>FunctionParameterNaming:MangaScreen.kt$MangaScreen$source_: Source?</ID>
    <ID>FunctionParameterNaming:SChapter.kt$SChapter.Companion$chapter_number: Float = -1F</ID>
    <ID>FunctionParameterNaming:SChapter.kt$SChapter.Companion$date_upload: Long = 0</ID>
    <ID>FunctionParameterNaming:SManga.kt$SManga.Companion$thumbnail_url: String? = null</ID>
    <ID>FunctionParameterNaming:SManga.kt$thumbnail_url: String? = this.originalThumbnailUrl</ID>
    <ID>FunctionParameterNaming:WebViewInterceptor.kt$_name: String</ID>
    <ID>FunctionParameterNaming:WebViewInterceptor.kt$_value: String</ID>
    <ID>ImplicitDefaultLocale:MetadataUtil.kt$MetadataUtil$String.format("%.1f %sB", bytes / unit.toDouble().pow(exp.toDouble()), pre)</ID>
    <ID>ImplicitDefaultLocale:TimeRange.kt$TimeRange$String.format("%02d:%02d - %02d:%02d", startHour, startMinute, endHour, endMinute)</ID>
    <ID>ImportOrdering:Commands.kt$import org.gradle.api.Project import java.io.ByteArrayOutputStream import java.text.SimpleDateFormat import java.util.TimeZone import java.util.Date</ID>
    <ID>ImportOrdering:LocalCoverManager.kt$import android.content.Context import com.hippo.unifile.UniFile import eu.kanade.tachiyomi.source.model.SManga import eu.kanade.tachiyomi.util.storage.CbzCrypto import tachiyomi.core.common.storage.addStreamToZip import eu.kanade.tachiyomi.util.storage.DiskUtil import tachiyomi.core.common.storage.nameWithoutExtension import tachiyomi.core.common.util.system.ImageUtil import tachiyomi.source.local.io.LocalSourceFileSystem import java.io.InputStream</ID>
    <ID>ImportOrdering:LocalSource.kt$import android.content.Context import android.os.Build import com.hippo.unifile.UniFile import eu.kanade.tachiyomi.source.CatalogueSource import eu.kanade.tachiyomi.source.Source import eu.kanade.tachiyomi.source.UnmeteredSource import eu.kanade.tachiyomi.source.model.FilterList import eu.kanade.tachiyomi.source.model.MangasPage import eu.kanade.tachiyomi.source.model.SChapter import eu.kanade.tachiyomi.source.model.SManga import eu.kanade.tachiyomi.util.lang.compareToCaseInsensitiveNaturalOrder import eu.kanade.tachiyomi.util.storage.CbzCrypto import eu.kanade.tachiyomi.util.storage.EpubFile import kotlinx.coroutines.async import kotlinx.coroutines.awaitAll import kotlinx.serialization.json.Json import kotlinx.serialization.json.decodeFromStream import kotlinx.serialization.json.encodeToStream import logcat.LogPriority import nl.adaptivity.xmlutil.AndroidXmlReader import nl.adaptivity.xmlutil.serialization.XML import tachiyomi.core.common.i18n.stringResource import tachiyomi.core.metadata.comicinfo.COMIC_INFO_FILE import tachiyomi.core.metadata.comicinfo.ComicInfo import tachiyomi.core.metadata.comicinfo.copyFromComicInfo import tachiyomi.core.metadata.comicinfo.getComicInfo import tachiyomi.core.metadata.tachiyomi.MangaDetails import tachiyomi.core.common.storage.UniFileTempFileManager import tachiyomi.core.common.storage.addStreamToZip import tachiyomi.core.common.storage.extension import tachiyomi.core.common.storage.getCoverStreamFromZip import tachiyomi.core.common.storage.getZipInputStream import tachiyomi.core.common.storage.isEncryptedZip import tachiyomi.core.common.storage.nameWithoutExtension import tachiyomi.core.common.util.lang.withIOContext import tachiyomi.core.common.util.system.ImageUtil import tachiyomi.core.common.util.system.logcat import tachiyomi.domain.chapter.service.ChapterRecognition import tachiyomi.domain.manga.model.Manga import tachiyomi.i18n.MR import tachiyomi.source.local.filter.OrderBy import tachiyomi.source.local.image.LocalCoverManager import tachiyomi.source.local.io.Archive import tachiyomi.source.local.io.Format import tachiyomi.source.local.io.LocalSourceFileSystem import tachiyomi.source.local.metadata.fillMetadata import uy.kohesive.injekt.injectLazy import java.io.InputStream import java.nio.charset.StandardCharsets import kotlin.time.Duration.Companion.days import com.github.junrar.Archive as JunrarArchive import tachiyomi.domain.source.model.Source as DomainSource</ID>
    <ID>Indentation:BackupCreator.kt$BackupCreator$ </ID>
    <ID>Indentation:LocalSource.kt$LocalSource$ </ID>
    <ID>Indentation:LocalesConfigPlugin.kt$ </ID>
    <ID>Indentation:PagerPageHolder.kt$PagerPageHolder$ </ID>
    <ID>InstanceOfCheckForException:AppUpdateDownloadJob.kt$AppUpdateDownloadJob$e is CancellationException</ID>
    <ID>InstanceOfCheckForException:AppUpdateDownloadJob.kt$AppUpdateDownloadJob$e is StreamResetException</ID>
    <ID>InstanceOfCheckForException:BackupRestoreJob.kt$BackupRestoreJob$e is CancellationException</ID>
    <ID>InstanceOfCheckForException:Downloader.kt$Downloader$e is CancellationException</ID>
    <ID>InstanceOfCheckForException:Downloader.kt$Downloader$error is CancellationException</ID>
    <ID>InstanceOfCheckForException:EHentaiUpdateWorker.kt$EHentaiUpdateWorker$t is EHentai.GalleryNotFoundException</ID>
    <ID>InstanceOfCheckForException:GalleryAdder.kt$GalleryAdder$e is EHentai.GalleryNotFoundException</ID>
    <ID>InstanceOfCheckForException:HttpPageLoader.kt$HttpPageLoader$e is CancellationException</ID>
    <ID>InstanceOfCheckForException:LibraryUpdateJob.kt$LibraryUpdateJob$e is CancellationException</ID>
    <ID>InstanceOfCheckForException:MangaScreen.kt$MangaScreen$e is CancellationException</ID>
    <ID>InstanceOfCheckForException:MangaScreenModel.kt$MangaScreenModel$e is HttpException</ID>
    <ID>InstanceOfCheckForException:MangaScreenModel.kt$MangaScreenModel$e is NoChaptersException</ID>
    <ID>InstanceOfCheckForException:MergedSource.kt$MergedSource$e is CancellationException</ID>
    <ID>InstanceOfCheckForException:MetadataUpdateJob.kt$MetadataUpdateJob$e is CancellationException</ID>
    <ID>InstanceOfCheckForException:MigrationListScreenModel.kt$MigrationListScreenModel$e is CancellationException</ID>
    <ID>InstanceOfCheckForException:ReaderViewModel.kt$ReaderViewModel$e is CancellationException</ID>
    <ID>InstanceOfCheckForException:RxCoroutineBridge.kt$e !is CancellationException</ID>
    <ID>InstanceOfCheckForException:SmartSearchScreenModel.kt$SmartSearchScreenModel$e is CancellationException</ID>
    <ID>InstanceOfCheckForException:UncaughtExceptionInterceptor.kt$UncaughtExceptionInterceptor$e is IOException</ID>
    <ID>LargeClass:Artist.kt$Artist : TagList</ID>
    <ID>LargeClass:Artist2.kt$Artist2 : TagList</ID>
    <ID>LargeClass:Character.kt$Character : TagList</ID>
    <ID>LargeClass:EHentai.kt$EHentai : HttpSourceMetadataSourceUrlImportableSourceNamespaceSourcePagePreviewSource</ID>
    <ID>LargeClass:EXHMigrations.kt$EXHMigrations</ID>
    <ID>LargeClass:Group.kt$Group : TagList</ID>
    <ID>LargeClass:LibraryScreenModel.kt$LibraryScreenModel : StateScreenModel</ID>
    <ID>LargeClass:MangaScreenModel.kt$MangaScreenModel : StateScreenModel</ID>
    <ID>LargeClass:Parody.kt$Parody : TagList</ID>
    <ID>LargeClass:ReaderActivity.kt$ReaderActivity : BaseActivity</ID>
    <ID>LargeClass:ReaderViewModel.kt$ReaderViewModel : ViewModel</ID>
    <ID>LargeClass:SettingsAdvancedScreen.kt$SettingsAdvancedScreen : SearchableSettings</ID>
    <ID>LargeClass:SettingsEhScreen.kt$SettingsEhScreen : SearchableSettings</ID>
    <ID>LongMethod:AnilistApi.kt$AnilistApi$suspend fun findLibManga(track: Track, userid: Int): Track?</ID>
    <ID>LongMethod:ApiMangaParser.kt$ApiMangaParser$fun parseIntoMetadata( metadata: MangaDexSearchMetadata, mangaDto: MangaDto, simpleChapters: List&lt;String&gt;, statistics: StatisticsMangaDto?, )</ID>
    <ID>LongMethod:AppModule.kt$AppModule$override fun InjektRegistrar.registerInjectables()</ID>
    <ID>LongMethod:Artist.kt$Artist$override fun getTags1(): List&lt;String&gt;</ID>
    <ID>LongMethod:Artist.kt$Artist$override fun getTags2(): List&lt;String&gt;</ID>
    <ID>LongMethod:Artist.kt$Artist$override fun getTags3(): List&lt;String&gt;</ID>
    <ID>LongMethod:Artist2.kt$Artist2$override fun getTags1(): List&lt;String&gt;</ID>
    <ID>LongMethod:Artist2.kt$Artist2$override fun getTags2(): List&lt;String&gt;</ID>
    <ID>LongMethod:Artist2.kt$Artist2$override fun getTags3(): List&lt;String&gt;</ID>
    <ID>LongMethod:BatchAddScreenModel.kt$BatchAddScreenModel$private fun addGalleries(context: Context, galleries: String)</ID>
    <ID>LongMethod:ChapterLoader.kt$ChapterLoader$private fun getPageLoader(chapter: ReaderChapter): PageLoader</ID>
    <ID>LongMethod:Character.kt$Character$override fun getTags1(): List&lt;String&gt;</ID>
    <ID>LongMethod:Character.kt$Character$override fun getTags2(): List&lt;String&gt;</ID>
    <ID>LongMethod:Character.kt$Character$override fun getTags3(): List&lt;String&gt;</ID>
    <ID>LongMethod:Cosplayer.kt$Cosplayer$override fun getTags1(): List&lt;String&gt;</ID>
    <ID>LongMethod:DomainModule.kt$DomainModule$override fun InjektRegistrar.registerInjectables()</ID>
    <ID>LongMethod:DownloadCache.kt$DownloadCache$private fun renewCache()</ID>
    <ID>LongMethod:Downloader.kt$Downloader$private suspend fun downloadChapter(download: Download)</ID>
    <ID>LongMethod:EHentai.kt$EHentai$override suspend fun parseIntoMetadata(metadata: EHentaiSearchMetadata, input: Document)</ID>
    <ID>LongMethod:EHentai.kt$EHentai$private fun extendedGenericMangaParse(doc: Document)</ID>
    <ID>LongMethod:EHentai.kt$EHentai$suspend fun getChapterList(manga: SManga, throttleFunc: suspend () -&gt; Unit): List&lt;SChapter&gt;</ID>
    <ID>LongMethod:EHentaiUpdateHelper.kt$EHentaiUpdateHelper$private fun getChapterList( accepted: ChapterChain, toDiscard: List&lt;ChapterChain&gt;, chainsAsChapters: List&lt;Chapter&gt;, ): Triple&lt;List&lt;ChapterUpdate&gt;, List&lt;Chapter&gt;, Boolean&gt;</ID>
    <ID>LongMethod:EHentaiUpdateHelper.kt$EHentaiUpdateHelper$suspend fun findAcceptedRootAndDiscardOthers( sourceId: Long, chapters: List&lt;Chapter&gt;, ): Triple&lt;ChapterChain, List&lt;ChapterChain&gt;, Boolean&gt;</ID>
    <ID>LongMethod:EHentaiUpdateWorker.kt$EHentaiUpdateWorker$private suspend fun startUpdating()</ID>
    <ID>LongMethod:EXHMigrations.kt$EXHMigrations$fun upgrade( context: Context, preferenceStore: PreferenceStore, basePreferences: BasePreferences, uiPreferences: UiPreferences, networkPreferences: NetworkPreferences, sourcePreferences: SourcePreferences, securityPreferences: SecurityPreferences, libraryPreferences: LibraryPreferences, readerPreferences: ReaderPreferences, backupPreferences: BackupPreferences, trackerManager: TrackerManager, pagePreviewCache: PagePreviewCache, ): Boolean</ID>
    <ID>LongMethod:EditMangaDialog.kt$private fun onViewCreated(manga: Manga, context: Context, binding: EditMangaDialogBinding, scope: CoroutineScope)</ID>
    <ID>LongMethod:EditMergedSettingsHeaderAdapter.kt$EditMergedSettingsHeaderAdapter.HeaderViewHolder$fun bind()</ID>
    <ID>LongMethod:EhUConfigBuilder.kt$EhUConfigBuilder$fun build(hathPerks: EHHathPerksResponse): FormBody</ID>
    <ID>LongMethod:ExtensionLoader.kt$ExtensionLoader$private fun loadExtension(context: Context, extensionInfo: ExtensionInfo): LoadResult</ID>
    <ID>LongMethod:FavoritesSyncHelper.kt$FavoritesSyncHelper$private suspend fun applyChangeSetToLocal(errorList: MutableList&lt;String&gt;, changeSet: ChangeSet)</ID>
    <ID>LongMethod:FavoritesSyncHelper.kt$FavoritesSyncHelper$private suspend fun beginSync()</ID>
    <ID>LongMethod:Female.kt$Female$override fun getTags1(): List&lt;String&gt;</ID>
    <ID>LongMethod:FilterHandler.kt$FilterHandler$fun getQueryMap(filters: FilterList): Map&lt;String, Any&gt;</ID>
    <ID>LongMethod:FilterHandler.kt$FilterHandler$internal fun getTags()</ID>
    <ID>LongMethod:GalleryAdder.kt$GalleryAdder$suspend fun addGallery( context: Context, url: String, fav: Boolean = false, forceSource: UrlImportableSource? = null, throttleFunc: suspend () -&gt; Unit = {}, retry: Int = 1, ): GalleryAddEvent</ID>
    <ID>LongMethod:Group.kt$Group$override fun getTags1(): List&lt;String&gt;</ID>
    <ID>LongMethod:Group.kt$Group$override fun getTags2(): List&lt;String&gt;</ID>
    <ID>LongMethod:Group.kt$Group$override fun getTags3(): List&lt;String&gt;</ID>
    <ID>LongMethod:Group2.kt$Group2$override fun getTags1(): List&lt;String&gt;</ID>
    <ID>LongMethod:ImageUtil.kt$ImageUtil$fun chooseBackground(context: Context, imageStream: InputStream): Drawable</ID>
    <ID>LongMethod:LibraryQuery.kt$LibraryQuery$override fun &lt;R&gt; execute(mapper: (SqlCursor) -&gt; QueryResult&lt;R&gt;): QueryResult&lt;R&gt;</ID>
    <ID>LongMethod:LibraryScreenModel.kt$LibraryScreenModel$private fun LibraryMap.applySort( // Map&lt;MangaId, List&lt;Track&gt;&gt; trackMap: Map&lt;Long, List&lt;Track&gt;&gt;, /* SY --&gt; */ groupSort: LibrarySort? = null, /* SY &lt;-- */ ): LibraryMap</ID>
    <ID>LongMethod:LibraryScreenModel.kt$LibraryScreenModel$private fun filterManga( queries: List&lt;QueryComponent&gt;, libraryManga: LibraryManga, tracks: List&lt;Track&gt;?, source: Source?, checkGenre: Boolean = true, searchTags: List&lt;SearchTag&gt;? = null, searchTitles: List&lt;SearchTitle&gt;? = null, loggedInTrackServices: Map&lt;Long, TriState&gt;, ): Boolean</ID>
    <ID>LongMethod:LibraryScreenModel.kt$LibraryScreenModel$private fun getGroupedMangaItems( groupType: Int, libraryManga: List&lt;LibraryItem&gt;, ): LibraryMap</ID>
    <ID>LongMethod:LibraryScreenModel.kt$LibraryScreenModel$private suspend fun LibraryMap.applyFilters( trackMap: Map&lt;Long, List&lt;Track&gt;&gt;, loggedInTrackers: Map&lt;Long, TriState&gt;, ): LibraryMap</ID>
    <ID>LongMethod:LibraryUpdateJob.kt$LibraryUpdateJob$private suspend fun addMangaToQueue(categoryId: Long, group: Int, groupExtra: String?)</ID>
    <ID>LongMethod:LibraryUpdateJob.kt$LibraryUpdateJob$private suspend fun updateChapterList()</ID>
    <ID>LongMethod:LocalSource.kt$LocalSource$override suspend fun getMangaDetails(manga: SManga): SManga</ID>
    <ID>LongMethod:LocalSource.kt$LocalSource$override suspend fun getSearchManga(page: Int, query: String, filters: FilterList): MangasPage</ID>
    <ID>LongMethod:MainActivity.kt$MainActivity$override fun onCreate(savedInstanceState: Bundle?)</ID>
    <ID>LongMethod:MainActivity.kt$MainActivity$private fun handleIntentAction(intent: Intent, navigator: Navigator): Boolean</ID>
    <ID>LongMethod:Male.kt$Male$override fun getTags1(): List&lt;String&gt;</ID>
    <ID>LongMethod:MangaScreen.kt$private fun LazyListScope.sharedChapterItems( manga: Manga, chapters: List&lt;ChapterList&gt;, isAnyChapterSelected: Boolean, chapterSwipeStartAction: LibraryPreferences.ChapterSwipeAction, chapterSwipeEndAction: LibraryPreferences.ChapterSwipeAction, // SY --&gt; alwaysShowReadingProgress: Boolean, // SY &lt;-- onChapterClicked: (Chapter) -&gt; Unit, onDownloadChapter: ((List&lt;ChapterList.Item&gt;, ChapterDownloadAction) -&gt; Unit)?, onChapterSelected: (ChapterList.Item, Boolean, Boolean, Boolean) -&gt; Unit, onChapterSwipe: (ChapterList.Item, LibraryPreferences.ChapterSwipeAction) -&gt; Unit, )</ID>
    <ID>LongMethod:MangaScreenModel.kt$MangaScreenModel$suspend fun smartSearchMerge(manga: Manga, originalMangaId: Long): Manga</ID>
    <ID>LongMethod:MigrationListScreenModel.kt$MigrationListScreenModel$private suspend fun migrateMangaInternal( prevManga: Manga, manga: Manga, replace: Boolean, )</ID>
    <ID>LongMethod:MigrationListScreenModel.kt$MigrationListScreenModel$private suspend fun runMigrations(mangas: List&lt;MigratingManga&gt;)</ID>
    <ID>LongMethod:Migrations.kt$Migrations$fun upgrade( context: Context, preferenceStore: PreferenceStore, basePreferences: BasePreferences, uiPreferences: UiPreferences, networkPreferences: NetworkPreferences, sourcePreferences: SourcePreferences, securityPreferences: SecurityPreferences, libraryPreferences: LibraryPreferences, readerPreferences: ReaderPreferences, backupPreferences: BackupPreferences, trackerManager: TrackerManager, ): Boolean</ID>
    <ID>LongMethod:Notifications.kt$Notifications$fun createChannels(context: Context)</ID>
    <ID>LongMethod:Other.kt$Other$override fun getTags1(): List&lt;String&gt;</ID>
    <ID>LongMethod:PagerPageHolder.kt$PagerPageHolder$private fun mergePages(imageStream: InputStream, imageStream2: InputStream?): InputStream</ID>
    <ID>LongMethod:PagerPageHolder.kt$PagerPageHolder$private suspend fun setImage()</ID>
    <ID>LongMethod:PagerViewerAdapter.kt$PagerViewerAdapter$private fun setJoinedItems(useSecondPage: Boolean = false)</ID>
    <ID>LongMethod:Parody.kt$Parody$override fun getTags1(): List&lt;String&gt;</ID>
    <ID>LongMethod:Parody.kt$Parody$override fun getTags2(): List&lt;String&gt;</ID>
    <ID>LongMethod:ReaderActivity.kt$ReaderActivity$override fun onCreate(savedInstanceState: Bundle?)</ID>
    <ID>LongMethod:ReaderActivity.kt$ReaderActivity$private fun initializeMenu()</ID>
    <ID>LongMethod:ReaderViewModel.kt$ReaderViewModel$suspend fun init(mangaId: Long, initialChapterId: Long /* SY --&gt; */, page: Int?/* SY &lt;-- */): Result&lt;Boolean&gt;</ID>
    <ID>LongMethod:SYDomainModule.kt$SYDomainModule$override fun InjektRegistrar.registerInjectables()</ID>
    <ID>LongMethod:SyncChaptersWithSource.kt$SyncChaptersWithSource$suspend fun await( rawSourceChapters: List&lt;SChapter&gt;, manga: Manga, source: Source, manualFetch: Boolean = false, fetchWindow: Pair&lt;Long, Long&gt; = Pair(0, 0), ): List&lt;Chapter&gt;</ID>
    <ID>LongMethod:SyncManager.kt$SyncManager$suspend fun syncData()</ID>
    <ID>LongMethod:Tester.kt$Tester$@Test fun localFavoritesStorageTester(): Unit</ID>
    <ID>LongMethod:TrackStatus.kt$TrackStatus.Companion$fun parseTrackerStatus(trackerManager: TrackerManager, tracker: Long, status: Long): TrackStatus?</ID>
    <ID>LongMethod:Tsumino.kt$Tsumino$override suspend fun parseIntoMetadata(metadata: TsuminoSearchMetadata, input: Document)</ID>
    <ID>LongMethod:UpdatesQuery.kt$UpdatesQuery$override fun &lt;R&gt; execute(mapper: (SqlCursor) -&gt; QueryResult&lt;R&gt;): QueryResult&lt;R&gt;</ID>
    <ID>LongMethod:UpdatesUiItem.kt$internal fun LazyListScope.updatesUiItems( uiModels: List&lt;UpdatesUiModel&gt;, selectionMode: Boolean, // SY --&gt; preserveReadingPosition: Boolean, // SY &lt;-- onUpdateSelected: (UpdatesItem, Boolean, Boolean, Boolean) -&gt; Unit, onClickCover: (UpdatesItem) -&gt; Unit, onClickUpdate: (UpdatesItem) -&gt; Unit, onDownloadChapter: (List&lt;UpdatesItem&gt;, ChapterDownloadAction) -&gt; Unit, )</ID>
    <ID>LongMethod:WebtoonRecyclerView.kt$WebtoonRecyclerView.Detector$override fun onTouchEvent(ev: MotionEvent): Boolean</ID>
    <ID>LongParameterList:ChapterLoader.kt$ChapterLoader$( private val context: Context, private val downloadManager: DownloadManager, private val downloadProvider: DownloadProvider, private val manga: Manga, private val source: Source, // SY --&gt; private val sourceManager: SourceManager, private val readerPrefs: ReaderPreferences, private val mergedReferences: List&lt;MergedMangaReference&gt;, private val mergedManga: Map&lt;Long, Manga&gt;, // SY &lt;-- )</ID>
    <ID>LongParameterList:ChapterMapper.kt$ChapterMapper$( id: Long, mangaId: Long, url: String, name: String, scanlator: String?, read: Boolean, bookmark: Boolean, lastPageRead: Long, chapterNumber: Double, sourceOrder: Long, dateFetch: Long, dateUpload: Long, lastModifiedAt: Long, version: Long, @Suppress("UNUSED_PARAMETER") isSyncing: Long, )</ID>
    <ID>LongParameterList:Chip.kt$ChipColors$( private val containerColor: Color, private val labelColor: Color, private val leadingIconContentColor: Color, private val trailingIconContentColor: Color, private val disabledContainerColor: Color, private val disabledLabelColor: Color, private val disabledLeadingIconContentColor: Color, private val disabledTrailingIconContentColor: Color, )</ID>
    <ID>LongParameterList:EXHMigrations.kt$EXHMigrations$( context: Context, preferenceStore: PreferenceStore, basePreferences: BasePreferences, uiPreferences: UiPreferences, networkPreferences: NetworkPreferences, sourcePreferences: SourcePreferences, securityPreferences: SecurityPreferences, libraryPreferences: LibraryPreferences, readerPreferences: ReaderPreferences, backupPreferences: BackupPreferences, trackerManager: TrackerManager, pagePreviewCache: PagePreviewCache, )</ID>
    <ID>LongParameterList:FavoritesEntryRepositoryImpl.kt$FavoritesEntryRepositoryImpl$( gid: String, token: String, title: String, category: Long, otherGid: String?, otherToken: String?, )</ID>
    <ID>LongParameterList:HistoryMapper.kt$HistoryMapper$( historyId: Long, mangaId: Long, chapterId: Long, title: String, thumbnailUrl: String?, sourceId: Long, isFavorite: Boolean, coverLastModified: Long, chapterNumber: Double, readAt: Date?, readDuration: Long, )</ID>
    <ID>LongParameterList:MangaChapterListItem.kt$( action: LibraryPreferences.ChapterSwipeAction, read: Boolean, bookmark: Boolean, downloadState: Download.State, background: Color, onSwipe: () -&gt; Unit, )</ID>
    <ID>LongParameterList:MangaCoverFetcher.kt$MangaCoverFetcher$( private val url: String?, private val isLibraryManga: Boolean, private val options: Options, private val coverFileLazy: Lazy&lt;File?&gt;, private val customCoverFileLazy: Lazy&lt;File&gt;, private val diskCacheKeyLazy: Lazy&lt;String&gt;, private val sourceLazy: Lazy&lt;HttpSource?&gt;, private val callFactoryLazy: Lazy&lt;Call.Factory&gt;, private val diskCacheLazy: Lazy&lt;DiskCache&gt;, )</ID>
    <ID>LongParameterList:MangaRestorer.kt$MangaRestorer$( manga: Manga, chapters: List&lt;BackupChapter&gt;, categories: List&lt;Long&gt;, backupCategories: List&lt;BackupCategory&gt;, history: List&lt;BackupHistory&gt;, tracks: List&lt;BackupTracking&gt;, excludedScanlators: List&lt;String&gt;, // SY --&gt; mergedMangaReferences: List&lt;BackupMergedMangaReference&gt;, flatMetadata: BackupFlatMetadata?, customManga: CustomMangaInfo?, // SY &lt;-- )</ID>
    <ID>LongParameterList:MangaScreen.kt$( manga: Manga, chapters: List&lt;ChapterList&gt;, isAnyChapterSelected: Boolean, chapterSwipeStartAction: LibraryPreferences.ChapterSwipeAction, chapterSwipeEndAction: LibraryPreferences.ChapterSwipeAction, // SY --&gt; alwaysShowReadingProgress: Boolean, // SY &lt;-- onChapterClicked: (Chapter) -&gt; Unit, onDownloadChapter: ((List&lt;ChapterList.Item&gt;, ChapterDownloadAction) -&gt; Unit)?, onChapterSelected: (ChapterList.Item, Boolean, Boolean, Boolean) -&gt; Unit, onChapterSwipe: (ChapterList.Item, LibraryPreferences.ChapterSwipeAction) -&gt; Unit, )</ID>
    <ID>LongParameterList:MangaScreenModel.kt$MangaScreenModel$( title: String?, author: String?, artist: String?, thumbnailUrl: String?, description: String?, tags: List&lt;String&gt;?, status: Long?, )</ID>
    <ID>LongParameterList:MergedMangaMapper.kt$MergedMangaMapper$( id: Long, isInfoManga: Boolean, getChapterUpdates: Boolean, chapterSortMode: Long, chapterPriority: Long, downloadChapters: Boolean, mergeId: Long, mergeUrl: String, mangaId: Long?, mangaUrl: String, mangaSourceId: Long, )</ID>
    <ID>LongParameterList:Migrations.kt$Migrations$( context: Context, preferenceStore: PreferenceStore, basePreferences: BasePreferences, uiPreferences: UiPreferences, networkPreferences: NetworkPreferences, sourcePreferences: SourcePreferences, securityPreferences: SecurityPreferences, libraryPreferences: LibraryPreferences, readerPreferences: ReaderPreferences, backupPreferences: BackupPreferences, trackerManager: TrackerManager, )</ID>
    <ID>LongParameterList:PageHandler.kt$PageHandler$( private val headers: Headers, private val service: MangaDexService, private val mangaPlusHandler: MangaPlusHandler, private val comikeyHandler: ComikeyHandler, private val bilibiliHandler: BilibiliHandler, private val azukiHandler: AzukiHandler, private val mangaHotHandler: MangaHotHandler, private val preferences: TrackPreferences, private val mdList: MdList, )</ID>
    <ID>LongParameterList:PagePreviewFetcher.kt$PagePreviewFetcher$( private val page: PagePreview, private val options: Options, private val pagePreviewFile: () -&gt; File, private val isInCache: () -&gt; Boolean, private val writeToCache: (Source) -&gt; Unit, private val diskCacheKeyLazy: Lazy&lt;String&gt;, private val sourceLazy: Lazy&lt;PagePreviewSource?&gt;, private val callFactoryLazy: Lazy&lt;Call.Factory&gt;, private val diskCacheLazy: Lazy&lt;DiskCache&gt;, )</ID>
    <ID>LongParameterList:PagePreviews.kt$( pagePreviewState: PagePreviewState, onOpenPage: (Int) -&gt; Unit, onMorePreviewsClicked: () -&gt; Unit, maxWidth: Dp, setMaxWidth: (Dp) -&gt; Unit, rowCount: Int, )</ID>
    <ID>LongParameterList:ReaderViewModel.kt$ReaderViewModel$( page1: ReaderPage, page2: ReaderPage, isLTR: Boolean, @ColorInt bg: Int, location: Location, manga: Manga, )</ID>
    <ID>LongParameterList:Scrollbar.kt$( orientation: Orientation, reverseDirection: Boolean, atEnd: Boolean, showScrollbar: Boolean, thickness: Float, color: Color, alpha: () -&gt; Float, thumbSize: Float, scrollOffset: Float, positionOffset: Float, )</ID>
    <ID>LongParameterList:SetMangaChapterFlags.kt$SetMangaChapterFlags$( mangaId: Long, unreadFilter: Long, downloadedFilter: Long, bookmarkedFilter: Long, sortingMode: Long, sortingDirection: Long, displayMode: Long, )</ID>
    <ID>LongParameterList:SyncChaptersWithSource.kt$SyncChaptersWithSource$( private val downloadManager: DownloadManager, private val downloadProvider: DownloadProvider, private val chapterRepository: ChapterRepository, private val shouldUpdateDbChapter: ShouldUpdateDbChapter, private val updateManga: UpdateManga, private val updateChapter: UpdateChapter, private val getChaptersByMangaId: GetChaptersByMangaId, private val getExcludedScanlators: GetExcludedScanlators, )</ID>
    <ID>LongParameterList:TrackMapper.kt$TrackMapper$( id: Long, mangaId: Long, syncId: Long, remoteId: Long, libraryId: Long?, title: String, lastChapterRead: Double, totalChapters: Long, status: Long, score: Double, remoteUrl: String, startDate: Long, finishDate: Long, )</ID>
    <ID>LongParameterList:UpdatesRepositoryImpl.kt$UpdatesRepositoryImpl$( mangaId: Long, mangaTitle: String, chapterId: Long, chapterName: String, scanlator: String?, read: Boolean, bookmark: Boolean, lastPageRead: Long, sourceId: Long, favorite: Boolean, thumbnailUrl: String?, coverLastModified: Long, dateUpload: Long, dateFetch: Long, )</ID>
    <ID>LongParameterList:UpdatesUiItem.kt$( uiModels: List&lt;UpdatesUiModel&gt;, selectionMode: Boolean, // SY --&gt; preserveReadingPosition: Boolean, // SY &lt;-- onUpdateSelected: (UpdatesItem, Boolean, Boolean, Boolean) -&gt; Unit, onClickCover: (UpdatesItem) -&gt; Unit, onClickUpdate: (UpdatesItem) -&gt; Unit, onDownloadChapter: (List&lt;UpdatesItem&gt;, ChapterDownloadAction) -&gt; Unit, )</ID>
    <ID>LongParameterList:WebtoonRecyclerView.kt$WebtoonRecyclerView$( fromRate: Float, toRate: Float, fromX: Float, toX: Float, fromY: Float, toY: Float, )</ID>
    <ID>LoopWithTooManyJumpStatements:DownloadStore.kt$DownloadStore$for</ID>
    <ID>LoopWithTooManyJumpStatements:EHentaiUpdateWorker.kt$EHentaiUpdateWorker$for</ID>
    <ID>LoopWithTooManyJumpStatements:GoogleDriveSyncService.kt$GoogleDriveSyncService$while</ID>
    <ID>LoopWithTooManyJumpStatements:ImageUtil.kt$ImageUtil$for</ID>
    <ID>LoopWithTooManyJumpStatements:Kavita.kt$Kavita$for</ID>
    <ID>LoopWithTooManyJumpStatements:MemAutoFlushingLookupTable.kt$MemAutoFlushingLookupTable$while</ID>
    <ID>LoopWithTooManyJumpStatements:MigrationListScreenModel.kt$MigrationListScreenModel$for</ID>
    <ID>LoopWithTooManyJumpStatements:RateLimitInterceptor.kt$RateLimitInterceptor$while</ID>
    <ID>LoopWithTooManyJumpStatements:UpdatesScreenModel.kt$UpdatesScreenModel$for</ID>
    <ID>MagicNumber:AdaptiveSheet.kt$220</ID>
    <ID>MagicNumber:AdaptiveSheet.kt$90</ID>
    <ID>MagicNumber:Anilist.kt$Anilist$10</ID>
    <ID>MagicNumber:Anilist.kt$Anilist$10.0</ID>
    <ID>MagicNumber:Anilist.kt$Anilist$100</ID>
    <ID>MagicNumber:Anilist.kt$Anilist$10f</ID>
    <ID>MagicNumber:Anilist.kt$Anilist$18</ID>
    <ID>MagicNumber:Anilist.kt$Anilist$20</ID>
    <ID>MagicNumber:Anilist.kt$Anilist$20.0</ID>
    <ID>MagicNumber:Anilist.kt$Anilist$25</ID>
    <ID>MagicNumber:Anilist.kt$Anilist$25.0</ID>
    <ID>MagicNumber:Anilist.kt$Anilist$35</ID>
    <ID>MagicNumber:Anilist.kt$Anilist$5</ID>
    <ID>MagicNumber:Anilist.kt$Anilist$60</ID>
    <ID>MagicNumber:AnilistApi.kt$AnilistApi$31536000000</ID>
    <ID>MagicNumber:AnilistModels.kt$10</ID>
    <ID>MagicNumber:AnilistModels.kt$30</ID>
    <ID>MagicNumber:AnilistModels.kt$35</ID>
    <ID>MagicNumber:AnilistModels.kt$50</ID>
    <ID>MagicNumber:AnilistModels.kt$60</ID>
    <ID>MagicNumber:AnilistModels.kt$70</ID>
    <ID>MagicNumber:AnilistModels.kt$90</ID>
    <ID>MagicNumber:App.kt$App$300</ID>
    <ID>MagicNumber:App.kt$App$8</ID>
    <ID>MagicNumber:AppModule.kt$AppModule$25</ID>
    <ID>MagicNumber:AppThemePreferenceWidget.kt$0.3f</ID>
    <ID>MagicNumber:AppThemePreferenceWidget.kt$0.5f</ID>
    <ID>MagicNumber:AppThemePreferenceWidget.kt$0.6f</ID>
    <ID>MagicNumber:AppThemePreferenceWidget.kt$0.7f</ID>
    <ID>MagicNumber:AppThemePreferenceWidget.kt$0.8f</ID>
    <ID>MagicNumber:AppThemePreferenceWidget.kt$16f</ID>
    <ID>MagicNumber:AppThemePreferenceWidget.kt$9f</ID>
    <ID>MagicNumber:AppUpdateDownloadJob.kt$AppUpdateDownloadJob.&lt;no name provided&gt;$100</ID>
    <ID>MagicNumber:AppUpdateDownloadJob.kt$AppUpdateDownloadJob.&lt;no name provided&gt;$200</ID>
    <ID>MagicNumber:AppUpdateNotifier.kt$AppUpdateNotifier$100</ID>
    <ID>MagicNumber:AutoCompleteItem.kt$100</ID>
    <ID>MagicNumber:Backup.kt$Backup$100</ID>
    <ID>MagicNumber:Backup.kt$Backup$101</ID>
    <ID>MagicNumber:Backup.kt$Backup$104</ID>
    <ID>MagicNumber:Backup.kt$Backup$105</ID>
    <ID>MagicNumber:Backup.kt$Backup$600</ID>
    <ID>MagicNumber:BackupCategory.kt$BackupCategory$100</ID>
    <ID>MagicNumber:BackupCreateJob.kt$BackupCreateJob.Companion$10</ID>
    <ID>MagicNumber:BackupDecoder.kt$BackupDecoder$0x1f8b</ID>
    <ID>MagicNumber:BackupFlatMetadata.kt$BackupFlatMetadata$3</ID>
    <ID>MagicNumber:BackupHistory.kt$BackupHistory$3</ID>
    <ID>MagicNumber:BackupMergedMangaReference.kt$BackupMergedMangaReference$3</ID>
    <ID>MagicNumber:BackupMergedMangaReference.kt$BackupMergedMangaReference$4</ID>
    <ID>MagicNumber:BackupMergedMangaReference.kt$BackupMergedMangaReference$5</ID>
    <ID>MagicNumber:BackupMergedMangaReference.kt$BackupMergedMangaReference$6</ID>
    <ID>MagicNumber:BackupMergedMangaReference.kt$BackupMergedMangaReference$7</ID>
    <ID>MagicNumber:BackupMergedMangaReference.kt$BackupMergedMangaReference$8</ID>
    <ID>MagicNumber:BackupPreferences.kt$BackupPreferences$12</ID>
    <ID>MagicNumber:BackupSavedSearch.kt$BackupSavedSearch$3</ID>
    <ID>MagicNumber:BackupSavedSearch.kt$BackupSavedSearch$4</ID>
    <ID>MagicNumber:BackupSearchMetadata.kt$BackupSearchMetadata$3</ID>
    <ID>MagicNumber:BackupSearchMetadata.kt$BackupSearchMetadata$4</ID>
    <ID>MagicNumber:BackupSearchTag.kt$BackupSearchTag$3</ID>
    <ID>MagicNumber:BackupTracking.kt$BackupTracking$10</ID>
    <ID>MagicNumber:BackupTracking.kt$BackupTracking$100</ID>
    <ID>MagicNumber:BackupTracking.kt$BackupTracking$11</ID>
    <ID>MagicNumber:BackupTracking.kt$BackupTracking$3</ID>
    <ID>MagicNumber:BackupTracking.kt$BackupTracking$4</ID>
    <ID>MagicNumber:BackupTracking.kt$BackupTracking$5</ID>
    <ID>MagicNumber:BackupTracking.kt$BackupTracking$6</ID>
    <ID>MagicNumber:BackupTracking.kt$BackupTracking$7</ID>
    <ID>MagicNumber:BackupTracking.kt$BackupTracking$8</ID>
    <ID>MagicNumber:BackupTracking.kt$BackupTracking$9</ID>
    <ID>MagicNumber:Bangumi.kt$Bangumi$145</ID>
    <ID>MagicNumber:Bangumi.kt$Bangumi$153</ID>
    <ID>MagicNumber:Bangumi.kt$Bangumi$240</ID>
    <ID>MagicNumber:BangumiInterceptor.kt$BangumiInterceptor$1000</ID>
    <ID>MagicNumber:BangumiModels.kt$1000</ID>
    <ID>MagicNumber:BangumiModels.kt$3600</ID>
    <ID>MagicNumber:BangumiModels.kt$OAuth$1000</ID>
    <ID>MagicNumber:BasePreferenceWidget.kt$200</ID>
    <ID>MagicNumber:BatchAddScreen.kt$BatchAddScreen$0.15f</ID>
    <ID>MagicNumber:BrowseIcons.kt$0x1F888888</ID>
    <ID>MagicNumber:BrowseSourceEHentaiList.kt$0.5F</ID>
    <ID>MagicNumber:BrowseSourceEHentaiList.kt$0xE1E2ECFF</ID>
    <ID>MagicNumber:BrowseSourceEHentaiList.kt$0xFF005ED7</ID>
    <ID>MagicNumber:BrowseSourceEHentaiList.kt$5</ID>
    <ID>MagicNumber:CbzCrypto.kt$CbzCrypto$100</ID>
    <ID>MagicNumber:CbzCrypto.kt$CbzCrypto$128</ID>
    <ID>MagicNumber:CbzCrypto.kt$CbzCrypto$42</ID>
    <ID>MagicNumber:ChapterCache.kt$ChapterCache$1024</ID>
    <ID>MagicNumber:ChapterDownloadIndicator.kt$0.5f</ID>
    <ID>MagicNumber:ChapterNavigator.kt$90f</ID>
    <ID>MagicNumber:ChapterRecognition.kt$ChapterRecognition$10</ID>
    <ID>MagicNumber:ChapterRecognition.kt$ChapterRecognition$10.0</ID>
    <ID>MagicNumber:ChapterRecognition.kt$ChapterRecognition$2.0</ID>
    <ID>MagicNumber:ChapterRecognition.kt$ChapterRecognition$3</ID>
    <ID>MagicNumber:CircularProgressIndicator.kt$2000</ID>
    <ID>MagicNumber:ColorFilterPage.kt$16</ID>
    <ID>MagicNumber:ColorFilterPage.kt$24</ID>
    <ID>MagicNumber:ColorFilterPage.kt$8</ID>
    <ID>MagicNumber:CommonMangaItem.kt$0.33f</ID>
    <ID>MagicNumber:CommonMangaItem.kt$0xAA000000</ID>
    <ID>MagicNumber:ContextExtensions.kt$3</ID>
    <ID>MagicNumber:ContextExtensions.kt$50</ID>
    <ID>MagicNumber:DateExtensions.kt$7</ID>
    <ID>MagicNumber:DelayedTrackingUpdateJob.kt$DelayedTrackingUpdateJob$3</ID>
    <ID>MagicNumber:DelayedTrackingUpdateJob.kt$DelayedTrackingUpdateJob.Companion$5</ID>
    <ID>MagicNumber:DeviceUtil.kt$DeviceUtil$1024</ID>
    <ID>MagicNumber:DeviceUtil.kt$DeviceUtil$3L</ID>
    <ID>MagicNumber:DeviceUtil.kt$DeviceUtil$90000</ID>
    <ID>MagicNumber:DiskUtil.kt$DiskUtil$240</ID>
    <ID>MagicNumber:DomainSourceHelpers.kt$6900</ID>
    <ID>MagicNumber:DomainSourceHelpers.kt$6999</ID>
    <ID>MagicNumber:Download.kt$Download.State.DOWNLOADED$3</ID>
    <ID>MagicNumber:Download.kt$Download.State.ERROR$4</ID>
    <ID>MagicNumber:DownloadCache.kt$DownloadCache$1000</ID>
    <ID>MagicNumber:DownloadDropdownMenu.kt$10</ID>
    <ID>MagicNumber:DownloadDropdownMenu.kt$25</ID>
    <ID>MagicNumber:DownloadDropdownMenu.kt$5</ID>
    <ID>MagicNumber:DownloadHolder.kt$DownloadHolder$100</ID>
    <ID>MagicNumber:DownloadNotifier.kt$DownloadNotifier$15</ID>
    <ID>MagicNumber:DownloadNotifier.kt$DownloadNotifier$30</ID>
    <ID>MagicNumber:DownloadProvider.kt$DownloadProvider$4</ID>
    <ID>MagicNumber:DownloadQueueScreen.kt$DownloadQueueScreen$0.08f</ID>
    <ID>MagicNumber:DownloadQueueScreen.kt$DownloadQueueScreen$0.12f</ID>
    <ID>MagicNumber:DownloadQueueScreenModel.kt$DownloadQueueScreenModel$50</ID>
    <ID>MagicNumber:Downloader.kt$Downloader$100</ID>
    <ID>MagicNumber:Downloader.kt$Downloader$1000</ID>
    <ID>MagicNumber:Downloader.kt$Downloader$3</ID>
    <ID>MagicNumber:Downloader.kt$Downloader$5</ID>
    <ID>MagicNumber:DropdownMenu.kt$56</ID>
    <ID>MagicNumber:EHConfigurator.kt$EHConfigurator$3</ID>
    <ID>MagicNumber:EHDebugModeOverlay.kt$0x7F000000</ID>
    <ID>MagicNumber:EHDebugModeOverlay.kt$FpsState$1000f</ID>
    <ID>MagicNumber:EHentai.kt$EHentai$0.5</ID>
    <ID>MagicNumber:EHentai.kt$EHentai$14</ID>
    <ID>MagicNumber:EHentai.kt$EHentai$16</ID>
    <ID>MagicNumber:EHentai.kt$EHentai$17</ID>
    <ID>MagicNumber:EHentai.kt$EHentai$200</ID>
    <ID>MagicNumber:EHentai.kt$EHentai$2007</ID>
    <ID>MagicNumber:EHentai.kt$EHentai$2099</ID>
    <ID>MagicNumber:EHentai.kt$EHentai$21</ID>
    <ID>MagicNumber:EHentai.kt$EHentai$3</ID>
    <ID>MagicNumber:EHentai.kt$EHentai$4</ID>
    <ID>MagicNumber:EHentai.kt$EHentai$404</ID>
    <ID>MagicNumber:EHentai.kt$EHentai$5</ID>
    <ID>MagicNumber:EHentai.kt$EHentai$8</ID>
    <ID>MagicNumber:EHentai.kt$EHentai$9</ID>
    <ID>MagicNumber:EHentai.kt$EHentai.GenreGroup$128</ID>
    <ID>MagicNumber:EHentai.kt$EHentai.GenreGroup$16</ID>
    <ID>MagicNumber:EHentai.kt$EHentai.GenreGroup$256</ID>
    <ID>MagicNumber:EHentai.kt$EHentai.GenreGroup$32</ID>
    <ID>MagicNumber:EHentai.kt$EHentai.GenreGroup$4</ID>
    <ID>MagicNumber:EHentai.kt$EHentai.GenreGroup$512</ID>
    <ID>MagicNumber:EHentai.kt$EHentai.GenreGroup$64</ID>
    <ID>MagicNumber:EHentai.kt$EHentai.GenreGroup$8</ID>
    <ID>MagicNumber:EHentai.kt$EHentai.ThumbnailPreviewInterceptor$100</ID>
    <ID>MagicNumber:EHentai.kt$EHentai.ToplistOption.ALL_TIME$11</ID>
    <ID>MagicNumber:EHentai.kt$EHentai.ToplistOption.PAST_MONTH$13</ID>
    <ID>MagicNumber:EHentai.kt$EHentai.ToplistOption.PAST_YEAR$12</ID>
    <ID>MagicNumber:EHentai.kt$EHentai.ToplistOption.YESTERDAY$15</ID>
    <ID>MagicNumber:EHentaiUpdateWorker.kt$EHentaiUpdateWorker.Companion$10</ID>
    <ID>MagicNumber:EXHMigrations.kt$EXHMigrations$0b00100000L</ID>
    <ID>MagicNumber:EXHMigrations.kt$EXHMigrations$0b00111100L</ID>
    <ID>MagicNumber:EXHMigrations.kt$EXHMigrations$10</ID>
    <ID>MagicNumber:EXHMigrations.kt$EXHMigrations$12</ID>
    <ID>MagicNumber:EXHMigrations.kt$EXHMigrations$14</ID>
    <ID>MagicNumber:EXHMigrations.kt$EXHMigrations$16</ID>
    <ID>MagicNumber:EXHMigrations.kt$EXHMigrations$17</ID>
    <ID>MagicNumber:EXHMigrations.kt$EXHMigrations$18</ID>
    <ID>MagicNumber:EXHMigrations.kt$EXHMigrations$20</ID>
    <ID>MagicNumber:EXHMigrations.kt$EXHMigrations$22</ID>
    <ID>MagicNumber:EXHMigrations.kt$EXHMigrations$23</ID>
    <ID>MagicNumber:EXHMigrations.kt$EXHMigrations$24</ID>
    <ID>MagicNumber:EXHMigrations.kt$EXHMigrations$27</ID>
    <ID>MagicNumber:EXHMigrations.kt$EXHMigrations$28</ID>
    <ID>MagicNumber:EXHMigrations.kt$EXHMigrations$29</ID>
    <ID>MagicNumber:EXHMigrations.kt$EXHMigrations$3</ID>
    <ID>MagicNumber:EXHMigrations.kt$EXHMigrations$31</ID>
    <ID>MagicNumber:EXHMigrations.kt$EXHMigrations$32</ID>
    <ID>MagicNumber:EXHMigrations.kt$EXHMigrations$38</ID>
    <ID>MagicNumber:EXHMigrations.kt$EXHMigrations$39</ID>
    <ID>MagicNumber:EXHMigrations.kt$EXHMigrations$4</ID>
    <ID>MagicNumber:EXHMigrations.kt$EXHMigrations$40</ID>
    <ID>MagicNumber:EXHMigrations.kt$EXHMigrations$41</ID>
    <ID>MagicNumber:EXHMigrations.kt$EXHMigrations$42</ID>
    <ID>MagicNumber:EXHMigrations.kt$EXHMigrations$43</ID>
    <ID>MagicNumber:EXHMigrations.kt$EXHMigrations$44</ID>
    <ID>MagicNumber:EXHMigrations.kt$EXHMigrations$45</ID>
    <ID>MagicNumber:EXHMigrations.kt$EXHMigrations$5</ID>
    <ID>MagicNumber:EXHMigrations.kt$EXHMigrations$52</ID>
    <ID>MagicNumber:EXHMigrations.kt$EXHMigrations$56</ID>
    <ID>MagicNumber:EXHMigrations.kt$EXHMigrations$57</ID>
    <ID>MagicNumber:EXHMigrations.kt$EXHMigrations$58</ID>
    <ID>MagicNumber:EXHMigrations.kt$EXHMigrations$59</ID>
    <ID>MagicNumber:EXHMigrations.kt$EXHMigrations$6</ID>
    <ID>MagicNumber:EXHMigrations.kt$EXHMigrations$60</ID>
    <ID>MagicNumber:EXHMigrations.kt$EXHMigrations$66</ID>
    <ID>MagicNumber:EXHMigrations.kt$EXHMigrations$6907</ID>
    <ID>MagicNumber:EXHMigrations.kt$EXHMigrations$6907L</ID>
    <ID>MagicNumber:EXHMigrations.kt$EXHMigrations$6909L</ID>
    <ID>MagicNumber:EXHMigrations.kt$EXHMigrations$6912</ID>
    <ID>MagicNumber:EXHMigrations.kt$EXHMigrations$6912L</ID>
    <ID>MagicNumber:EXHMigrations.kt$EXHMigrations$7</ID>
    <ID>MagicNumber:EXHMigrations.kt$EXHMigrations$8</ID>
    <ID>MagicNumber:EXHMigrations.kt$EXHMigrations$9</ID>
    <ID>MagicNumber:EditMangaDialog.kt$20</ID>
    <ID>MagicNumber:EditMangaDialog.kt$3</ID>
    <ID>MagicNumber:EditMangaDialog.kt$4</ID>
    <ID>MagicNumber:EditMangaDialog.kt$40</ID>
    <ID>MagicNumber:EditMangaDialog.kt$46</ID>
    <ID>MagicNumber:EditMangaDialog.kt$5</ID>
    <ID>MagicNumber:EditMangaDialog.kt$6</ID>
    <ID>MagicNumber:EditMangaDialog.kt$61</ID>
    <ID>MagicNumber:EditMangaDialog.kt$62</ID>
    <ID>MagicNumber:EditMangaDialog.kt$63</ID>
    <ID>MagicNumber:EditMergedMangaHolder.kt$EditMergedMangaHolder$0.5F</ID>
    <ID>MagicNumber:EditMergedSettingsHeaderAdapter.kt$EditMergedSettingsHeaderAdapter.HeaderViewHolder$0.5F</ID>
    <ID>MagicNumber:EditMergedSettingsHeaderAdapter.kt$EditMergedSettingsHeaderAdapter.HeaderViewHolder$3</ID>
    <ID>MagicNumber:EhLoginWebViewScreen.kt$0.5F</ID>
    <ID>MagicNumber:EhLoginWebViewScreen.kt$0.8F</ID>
    <ID>MagicNumber:EhLoginWebViewScreen.kt$0xb5000000</ID>
    <ID>MagicNumber:EhUConfigBuilder.kt$Entry.Categories$3</ID>
    <ID>MagicNumber:EhUConfigBuilder.kt$Entry.Categories$4</ID>
    <ID>MagicNumber:EhUConfigBuilder.kt$Entry.Categories$5</ID>
    <ID>MagicNumber:EhUConfigBuilder.kt$Entry.Categories$6</ID>
    <ID>MagicNumber:EhUConfigBuilder.kt$Entry.Categories$7</ID>
    <ID>MagicNumber:EhUConfigBuilder.kt$Entry.Categories$8</ID>
    <ID>MagicNumber:EhUConfigBuilder.kt$Entry.Categories$9</ID>
    <ID>MagicNumber:EhUConfigBuilder.kt$Entry.LanguageSystem$10</ID>
    <ID>MagicNumber:EhUConfigBuilder.kt$Entry.LanguageSystem$11</ID>
    <ID>MagicNumber:EhUConfigBuilder.kt$Entry.LanguageSystem$12</ID>
    <ID>MagicNumber:EhUConfigBuilder.kt$Entry.LanguageSystem$13</ID>
    <ID>MagicNumber:EhUConfigBuilder.kt$Entry.LanguageSystem$14</ID>
    <ID>MagicNumber:EhUConfigBuilder.kt$Entry.LanguageSystem$15</ID>
    <ID>MagicNumber:EhUConfigBuilder.kt$Entry.LanguageSystem$16</ID>
    <ID>MagicNumber:EhUConfigBuilder.kt$Entry.LanguageSystem$3</ID>
    <ID>MagicNumber:EhUConfigBuilder.kt$Entry.LanguageSystem$4</ID>
    <ID>MagicNumber:EhUConfigBuilder.kt$Entry.LanguageSystem$5</ID>
    <ID>MagicNumber:EhUConfigBuilder.kt$Entry.LanguageSystem$6</ID>
    <ID>MagicNumber:EhUConfigBuilder.kt$Entry.LanguageSystem$7</ID>
    <ID>MagicNumber:EhUConfigBuilder.kt$Entry.LanguageSystem$8</ID>
    <ID>MagicNumber:EhUConfigBuilder.kt$Entry.LanguageSystem$9</ID>
    <ID>MagicNumber:ExhUtils.kt$0.5f</ID>
    <ID>MagicNumber:ExhUtils.kt$0.75f</ID>
    <ID>MagicNumber:ExhUtils.kt$0.9f</ID>
    <ID>MagicNumber:ExhUtils.kt$3f</ID>
    <ID>MagicNumber:ExtensionDetailsScreen.kt$1.5f</ID>
    <ID>MagicNumber:ExtensionInstallService.kt$ExtensionInstallService$100</ID>
    <ID>MagicNumber:FavoritesSyncHelper.kt$FavoritesSyncHelper$10</ID>
    <ID>MagicNumber:FeedScreenModel.kt$FeedScreenModel$10</ID>
    <ID>MagicNumber:FetchInterval.kt$FetchInterval$10</ID>
    <ID>MagicNumber:FetchInterval.kt$FetchInterval$1000</ID>
    <ID>MagicNumber:FetchInterval.kt$FetchInterval$3</ID>
    <ID>MagicNumber:FetchInterval.kt$FetchInterval$7</ID>
    <ID>MagicNumber:FetchInterval.kt$FetchInterval$8</ID>
    <ID>MagicNumber:FollowStatus.kt$FollowStatus.DROPPED$5L</ID>
    <ID>MagicNumber:FollowStatus.kt$FollowStatus.ON_HOLD$3L</ID>
    <ID>MagicNumber:FollowStatus.kt$FollowStatus.PLAN_TO_READ$4L</ID>
    <ID>MagicNumber:FollowStatus.kt$FollowStatus.RE_READING$6L</ID>
    <ID>MagicNumber:GetApplicationRelease.kt$GetApplicationRelease$3</ID>
    <ID>MagicNumber:GlanceUtils.kt$10</ID>
    <ID>MagicNumber:GlanceUtils.kt$64</ID>
    <ID>MagicNumber:GlanceUtils.kt$95</ID>
    <ID>MagicNumber:GlobalSearchItem.kt$99f</ID>
    <ID>MagicNumber:GoogleDriveSyncService.kt$GoogleDriveSyncService$10</ID>
    <ID>MagicNumber:GoogleDriveSyncService.kt$GoogleDriveSyncService$1000L</ID>
    <ID>MagicNumber:GoogleDriveSyncService.kt$GoogleDriveSyncService$16000L</ID>
    <ID>MagicNumber:GoogleDriveSyncService.kt$GoogleDriveSyncService$3</ID>
    <ID>MagicNumber:Hash.kt$Hash$15</ID>
    <ID>MagicNumber:Hash.kt$Hash$240</ID>
    <ID>MagicNumber:Hash.kt$Hash$4</ID>
    <ID>MagicNumber:HttpSource.kt$HttpSource$0xff</ID>
    <ID>MagicNumber:HttpSource.kt$HttpSource$7</ID>
    <ID>MagicNumber:HttpSource.kt$HttpSource$8</ID>
    <ID>MagicNumber:ImageUtil.kt$ImageUtil$0.01</ID>
    <ID>MagicNumber:ImageUtil.kt$ImageUtil$0.0275</ID>
    <ID>MagicNumber:ImageUtil.kt$ImageUtil$100</ID>
    <ID>MagicNumber:ImageUtil.kt$ImageUtil$14</ID>
    <ID>MagicNumber:ImageUtil.kt$ImageUtil$16384</ID>
    <ID>MagicNumber:ImageUtil.kt$ImageUtil$18</ID>
    <ID>MagicNumber:ImageUtil.kt$ImageUtil$200</ID>
    <ID>MagicNumber:ImageUtil.kt$ImageUtil$22</ID>
    <ID>MagicNumber:ImageUtil.kt$ImageUtil$25</ID>
    <ID>MagicNumber:ImageUtil.kt$ImageUtil$3</ID>
    <ID>MagicNumber:ImageUtil.kt$ImageUtil$30</ID>
    <ID>MagicNumber:ImageUtil.kt$ImageUtil$32</ID>
    <ID>MagicNumber:ImageUtil.kt$ImageUtil$40</ID>
    <ID>MagicNumber:ImageUtil.kt$ImageUtil$5</ID>
    <ID>MagicNumber:ImageUtil.kt$ImageUtil$50</ID>
    <ID>MagicNumber:ImageUtil.kt$ImageUtil$6</ID>
    <ID>MagicNumber:ImageUtil.kt$ImageUtil$740</ID>
    <ID>MagicNumber:ImageUtil.kt$ImageUtil$9</ID>
    <ID>MagicNumber:ImageUtil.kt$ImageUtil$96</ID>
    <ID>MagicNumber:ImageUtil.kt$ImageUtil$98</ID>
    <ID>MagicNumber:ImageUtil.kt$ImageUtil$99</ID>
    <ID>MagicNumber:IsTrackUnfollowed.kt$IsTrackUnfollowed$60L</ID>
    <ID>MagicNumber:Kavita.kt$Kavita$0xff</ID>
    <ID>MagicNumber:Kavita.kt$Kavita$148</ID>
    <ID>MagicNumber:Kavita.kt$Kavita$198</ID>
    <ID>MagicNumber:Kavita.kt$Kavita$3</ID>
    <ID>MagicNumber:Kavita.kt$Kavita$7</ID>
    <ID>MagicNumber:Kavita.kt$Kavita$74</ID>
    <ID>MagicNumber:Kavita.kt$Kavita$8</ID>
    <ID>MagicNumber:KavitaApi.kt$KavitaApi$200</ID>
    <ID>MagicNumber:KavitaApi.kt$KavitaApi$204</ID>
    <ID>MagicNumber:KavitaApi.kt$KavitaApi$401</ID>
    <ID>MagicNumber:KavitaApi.kt$KavitaApi$500</ID>
    <ID>MagicNumber:KavitaModels.kt$OAuth$3</ID>
    <ID>MagicNumber:Kitsu.kt$Kitsu$20</ID>
    <ID>MagicNumber:Kitsu.kt$Kitsu$37</ID>
    <ID>MagicNumber:Kitsu.kt$Kitsu$50</ID>
    <ID>MagicNumber:Kitsu.kt$Kitsu$51</ID>
    <ID>MagicNumber:KitsuModels.kt$1000</ID>
    <ID>MagicNumber:KitsuModels.kt$3600</ID>
    <ID>MagicNumber:Komga.kt$Komga$37</ID>
    <ID>MagicNumber:Komga.kt$Komga$50</ID>
    <ID>MagicNumber:Komga.kt$Komga$51</ID>
    <ID>MagicNumber:LewdMangaChecker.kt$6905L</ID>
    <ID>MagicNumber:LewdMangaChecker.kt$6913L</ID>
    <ID>MagicNumber:LibraryScreenModel.kt$LibraryScreenModel$10</ID>
    <ID>MagicNumber:LibraryScreenModel.kt$LibraryScreenModel$25</ID>
    <ID>MagicNumber:LibraryScreenModel.kt$LibraryScreenModel$5</ID>
    <ID>MagicNumber:LibrarySettingsDialog.kt$3</ID>
    <ID>MagicNumber:LibrarySortMode.kt$LibrarySort.Direction.Ascending$0b01000000</ID>
    <ID>MagicNumber:LibrarySortMode.kt$LibrarySort.Type.ChapterFetchDate$0b00011000</ID>
    <ID>MagicNumber:LibrarySortMode.kt$LibrarySort.Type.DateAdded$0b00011100</ID>
    <ID>MagicNumber:LibrarySortMode.kt$LibrarySort.Type.LastRead$0b00000100</ID>
    <ID>MagicNumber:LibrarySortMode.kt$LibrarySort.Type.LastUpdate$0b00001000</ID>
    <ID>MagicNumber:LibrarySortMode.kt$LibrarySort.Type.LatestChapter$0b00010100</ID>
    <ID>MagicNumber:LibrarySortMode.kt$LibrarySort.Type.TagList$0b00100100</ID>
    <ID>MagicNumber:LibrarySortMode.kt$LibrarySort.Type.TotalChapters$0b00010000</ID>
    <ID>MagicNumber:LibrarySortMode.kt$LibrarySort.Type.TrackerMean$0b000100000</ID>
    <ID>MagicNumber:LibrarySortMode.kt$LibrarySort.Type.UnreadCount$0b00001100</ID>
    <ID>MagicNumber:LibraryToolbar.kt$0.08f</ID>
    <ID>MagicNumber:LibraryToolbar.kt$0.12f</ID>
    <ID>MagicNumber:LibraryUpdateJob.kt$LibraryUpdateJob$5</ID>
    <ID>MagicNumber:LibraryUpdateJob.kt$LibraryUpdateJob.Companion$10</ID>
    <ID>MagicNumber:LibraryUpdateNotifier.kt$LibraryUpdateNotifier$40</ID>
    <ID>MagicNumber:MangaBottomActionMenu.kt$3</ID>
    <ID>MagicNumber:MangaBottomActionMenu.kt$4</ID>
    <ID>MagicNumber:MangaBottomActionMenu.kt$5</ID>
    <ID>MagicNumber:MangaBottomActionMenu.kt$6</ID>
    <ID>MagicNumber:MangaBottomActionMenu.kt$7</ID>
    <ID>MagicNumber:MangaCover.kt$MangaCover.Book$3f</ID>
    <ID>MagicNumber:MangaDexAuthInterceptor.kt$MangaDexAuthInterceptor$401</ID>
    <ID>MagicNumber:MangaDexDescriptionAdapter.kt$100.0</ID>
    <ID>MagicNumber:MangaInfoHeader.kt$0.2f</ID>
    <ID>MagicNumber:MangaInfoHeader.kt$0.65f</ID>
    <ID>MagicNumber:MangaPlusHandler.kt$MangaPlusHandler$16</ID>
    <ID>MagicNumber:MangaScreenModel.kt$MangaScreenModel$10</ID>
    <ID>MagicNumber:MangaScreenModel.kt$MangaScreenModel$103</ID>
    <ID>MagicNumber:MangaScreenModel.kt$MangaScreenModel$25</ID>
    <ID>MagicNumber:MangaScreenModel.kt$MangaScreenModel$5</ID>
    <ID>MagicNumber:MangaUpdates.kt$MangaUpdates$146</ID>
    <ID>MagicNumber:MangaUpdates.kt$MangaUpdates$160</ID>
    <ID>MagicNumber:MangaUpdates.kt$MangaUpdates$173</ID>
    <ID>MagicNumber:MangaUpdatesApi.kt$MangaUpdatesApi$200</ID>
    <ID>MagicNumber:MdList.kt$MdList$3L</ID>
    <ID>MagicNumber:MdList.kt$MdList$43</ID>
    <ID>MagicNumber:MdList.kt$MdList$48</ID>
    <ID>MagicNumber:MdList.kt$MdList$4L</ID>
    <ID>MagicNumber:MdList.kt$MdList$53</ID>
    <ID>MagicNumber:MdList.kt$MdList$5L</ID>
    <ID>MagicNumber:MdList.kt$MdList$6L</ID>
    <ID>MagicNumber:MemAutoFlushingLookupTable.kt$MemAutoFlushingLookupTable$4</ID>
    <ID>MagicNumber:MemAutoFlushingLookupTable.kt$MemAutoFlushingLookupTable$8</ID>
    <ID>MagicNumber:MergedSource.kt$MergedSource$5</ID>
    <ID>MagicNumber:MetadataUIUtil.kt$MetadataUIUtil$10</ID>
    <ID>MagicNumber:MetadataUIUtil.kt$MetadataUIUtil$3</ID>
    <ID>MagicNumber:MetadataUIUtil.kt$MetadataUIUtil$4</ID>
    <ID>MagicNumber:MetadataUIUtil.kt$MetadataUIUtil$5</ID>
    <ID>MagicNumber:MetadataUIUtil.kt$MetadataUIUtil$6</ID>
    <ID>MagicNumber:MetadataUIUtil.kt$MetadataUIUtil$7</ID>
    <ID>MagicNumber:MetadataUIUtil.kt$MetadataUIUtil$8</ID>
    <ID>MagicNumber:MetadataUIUtil.kt$MetadataUIUtil$9</ID>
    <ID>MagicNumber:MetadataUpdateJob.kt$MetadataUpdateJob$5</ID>
    <ID>MagicNumber:MetadataUtil.kt$MetadataUtil$1000</ID>
    <ID>MagicNumber:MetadataUtil.kt$MetadataUtil$1024</ID>
    <ID>MagicNumber:MigrationActionIcon.kt$56</ID>
    <ID>MagicNumber:MigrationItem.kt$0.33f</ID>
    <ID>MagicNumber:MigrationItem.kt$0xAA000000</ID>
    <ID>MagicNumber:MigrationListScreen.kt$0.2f</ID>
    <ID>MagicNumber:MigrationListScreenModel.kt$MigrationListScreenModel$3</ID>
    <ID>MagicNumber:Migrations.kt$Migrations$105</ID>
    <ID>MagicNumber:Migrations.kt$Migrations$106</ID>
    <ID>MagicNumber:Migrations.kt$Migrations$113</ID>
    <ID>MagicNumber:Migrations.kt$Migrations$114</ID>
    <ID>MagicNumber:Migrations.kt$Migrations$116</ID>
    <ID>MagicNumber:Migrations.kt$Migrations$117</ID>
    <ID>MagicNumber:Migrations.kt$Migrations$12</ID>
    <ID>MagicNumber:Migrations.kt$Migrations$15</ID>
    <ID>MagicNumber:Migrations.kt$Migrations$19</ID>
    <ID>MagicNumber:Migrations.kt$Migrations$26</ID>
    <ID>MagicNumber:Migrations.kt$Migrations$3</ID>
    <ID>MagicNumber:Migrations.kt$Migrations$4</ID>
    <ID>MagicNumber:Migrations.kt$Migrations$44</ID>
    <ID>MagicNumber:Migrations.kt$Migrations$5</ID>
    <ID>MagicNumber:Migrations.kt$Migrations$52</ID>
    <ID>MagicNumber:Migrations.kt$Migrations$54</ID>
    <ID>MagicNumber:Migrations.kt$Migrations$57</ID>
    <ID>MagicNumber:Migrations.kt$Migrations$59</ID>
    <ID>MagicNumber:Migrations.kt$Migrations$6</ID>
    <ID>MagicNumber:Migrations.kt$Migrations$60</ID>
    <ID>MagicNumber:Migrations.kt$Migrations$61</ID>
    <ID>MagicNumber:Migrations.kt$Migrations$64</ID>
    <ID>MagicNumber:Migrations.kt$Migrations$7</ID>
    <ID>MagicNumber:Migrations.kt$Migrations$70</ID>
    <ID>MagicNumber:Migrations.kt$Migrations$71</ID>
    <ID>MagicNumber:Migrations.kt$Migrations$72</ID>
    <ID>MagicNumber:Migrations.kt$Migrations$75</ID>
    <ID>MagicNumber:Migrations.kt$Migrations$77</ID>
    <ID>MagicNumber:Migrations.kt$Migrations$8</ID>
    <ID>MagicNumber:Migrations.kt$Migrations$81</ID>
    <ID>MagicNumber:Migrations.kt$Migrations$82</ID>
    <ID>MagicNumber:Migrations.kt$Migrations$84</ID>
    <ID>MagicNumber:Migrations.kt$Migrations$85</ID>
    <ID>MagicNumber:Migrations.kt$Migrations$86</ID>
    <ID>MagicNumber:Migrations.kt$Migrations$92</ID>
    <ID>MagicNumber:Migrations.kt$Migrations$96</ID>
    <ID>MagicNumber:Migrations.kt$Migrations$97</ID>
    <ID>MagicNumber:Migrations.kt$Migrations$99</ID>
    <ID>MagicNumber:Modifier.kt$0.16f</ID>
    <ID>MagicNumber:Modifier.kt$0.22f</ID>
    <ID>MagicNumber:MonetColorScheme.kt$MonetColorScheme.Companion$128</ID>
    <ID>MagicNumber:MyAnimeList.kt$MyAnimeList$162</ID>
    <ID>MagicNumber:MyAnimeList.kt$MyAnimeList$46</ID>
    <ID>MagicNumber:MyAnimeList.kt$MyAnimeList$81</ID>
    <ID>MagicNumber:MyAnimeListApi.kt$MyAnimeListApi$64</ID>
    <ID>MagicNumber:MyAnimeListInterceptor.kt$MyAnimeListInterceptor$401</ID>
    <ID>MagicNumber:NetworkHelper.kt$NetworkHelper$30</ID>
    <ID>MagicNumber:Page.kt$Page$100</ID>
    <ID>MagicNumber:PageIndicatorText.kt$235</ID>
    <ID>MagicNumber:PageIndicatorText.kt$45</ID>
    <ID>MagicNumber:PagePreviewCache.kt$PagePreviewCache$1024</ID>
    <ID>MagicNumber:PagePreviewSource.kt$PagePreviewInfo$100</ID>
    <ID>MagicNumber:PagerConfig.kt$PagerConfig$0x202125</ID>
    <ID>MagicNumber:PagerConfig.kt$PagerConfig$3</ID>
    <ID>MagicNumber:PagerConfig.kt$PagerConfig$4</ID>
    <ID>MagicNumber:PagerConfig.kt$PagerConfig$5</ID>
    <ID>MagicNumber:PagerPageHolder.kt$PagerPageHolder$100</ID>
    <ID>MagicNumber:PagerPageHolder.kt$PagerPageHolder$16</ID>
    <ID>MagicNumber:PagerPageHolder.kt$PagerPageHolder$48</ID>
    <ID>MagicNumber:PagerPageHolder.kt$PagerPageHolder$90f</ID>
    <ID>MagicNumber:PagerPageHolder.kt$PagerPageHolder$95</ID>
    <ID>MagicNumber:PagerPageHolder.kt$PagerPageHolder$96</ID>
    <ID>MagicNumber:PagerPageHolder.kt$PagerPageHolder$97</ID>
    <ID>MagicNumber:PagerViewer.kt$PagerViewer$5</ID>
    <ID>MagicNumber:PagerViewerAdapter.kt$PagerViewerAdapter$100</ID>
    <ID>MagicNumber:PkceUtil.kt$PkceUtil$50</ID>
    <ID>MagicNumber:PullRefresh.kt$PullToRefreshStateImpl$4</ID>
    <ID>MagicNumber:PururinDescriptionAdapter.kt$100.0</ID>
    <ID>MagicNumber:ReaderActivity.kt$ReaderActivity$100</ID>
    <ID>MagicNumber:ReaderActivity.kt$ReaderActivity$230</ID>
    <ID>MagicNumber:ReaderActivity.kt$ReaderActivity$242</ID>
    <ID>MagicNumber:ReaderActivity.kt$ReaderActivity.ReaderConfig$0.01f</ID>
    <ID>MagicNumber:ReaderActivity.kt$ReaderActivity.ReaderConfig$100</ID>
    <ID>MagicNumber:ReaderActivity.kt$ReaderActivity.ReaderConfig$100f</ID>
    <ID>MagicNumber:ReaderActivity.kt$ReaderActivity.ReaderConfig$255f</ID>
    <ID>MagicNumber:ReaderActivity.kt$ReaderActivity.ReaderConfig$3</ID>
    <ID>MagicNumber:ReaderContentOverlay.kt$100f</ID>
    <ID>MagicNumber:ReaderOrientation.kt$ReaderOrientation.FREE$0x00000008</ID>
    <ID>MagicNumber:ReaderOrientation.kt$ReaderOrientation.LANDSCAPE$0x00000018</ID>
    <ID>MagicNumber:ReaderOrientation.kt$ReaderOrientation.LOCKED_LANDSCAPE$0x00000028</ID>
    <ID>MagicNumber:ReaderOrientation.kt$ReaderOrientation.LOCKED_PORTRAIT$0x00000020</ID>
    <ID>MagicNumber:ReaderOrientation.kt$ReaderOrientation.PORTRAIT$0x00000010</ID>
    <ID>MagicNumber:ReaderOrientation.kt$ReaderOrientation.REVERSE_PORTRAIT$0x00000030</ID>
    <ID>MagicNumber:ReaderPageImageView.kt$ReaderPageImageView$180</ID>
    <ID>MagicNumber:ReaderPageImageView.kt$ReaderPageImageView$250</ID>
    <ID>MagicNumber:ReaderPageImageView.kt$ReaderPageImageView$500</ID>
    <ID>MagicNumber:ReaderPreferences.kt$ReaderPreferences$10</ID>
    <ID>MagicNumber:ReaderPreferences.kt$ReaderPreferences$3f</ID>
    <ID>MagicNumber:ReaderPreferences.kt$ReaderPreferences$500</ID>
    <ID>MagicNumber:ReaderPreferences.kt$ReaderPreferences.ReaderHideThreshold.HIGH$13</ID>
    <ID>MagicNumber:ReaderPreferences.kt$ReaderPreferences.ReaderHideThreshold.HIGHEST$5</ID>
    <ID>MagicNumber:ReaderPreferences.kt$ReaderPreferences.ReaderHideThreshold.LOW$31</ID>
    <ID>MagicNumber:ReaderPreferences.kt$ReaderPreferences.ReaderHideThreshold.LOWEST$47</ID>
    <ID>MagicNumber:ReaderProgressIndicator.kt$ReaderProgressIndicator$100f</ID>
    <ID>MagicNumber:ReaderSettingsDialog.kt$0.5f</ID>
    <ID>MagicNumber:ReaderViewModel.kt$ReaderViewModel$0.25</ID>
    <ID>MagicNumber:ReaderViewModel.kt$ReaderViewModel$9999</ID>
    <ID>MagicNumber:ReadingMode.kt$ReadingMode.CONTINUOUS_VERTICAL$0x00000005</ID>
    <ID>MagicNumber:ReadingMode.kt$ReadingMode.VERTICAL$0x00000003</ID>
    <ID>MagicNumber:ReadingMode.kt$ReadingMode.WEBTOON$0x00000004</ID>
    <ID>MagicNumber:ReadingModePage.kt$100f</ID>
    <ID>MagicNumber:ReadingModePage.kt$5</ID>
    <ID>MagicNumber:SaveImageNotifier.kt$SaveImageNotifier$1280</ID>
    <ID>MagicNumber:SaveImageNotifier.kt$SaveImageNotifier$720</ID>
    <ID>MagicNumber:Scaffold.kt$3</ID>
    <ID>MagicNumber:Scaffold.kt$4</ID>
    <ID>MagicNumber:Scaffold.kt$5</ID>
    <ID>MagicNumber:Scaffold.kt$6</ID>
    <ID>MagicNumber:Scaffold.kt$7</ID>
    <ID>MagicNumber:Scaffold.kt$8</ID>
    <ID>MagicNumber:Scaffold.kt$9</ID>
    <ID>MagicNumber:Scrollbar.kt$100</ID>
    <ID>MagicNumber:Scrollbar.kt$50</ID>
    <ID>MagicNumber:SecureActivityDelegate.kt$SecureActivityDelegate.Companion$60_000</ID>
    <ID>MagicNumber:SecurityPreferences.kt$SecurityPreferences$0x7F</ID>
    <ID>MagicNumber:SettingsDataScreen.kt$SettingsDataScreen$10080</ID>
    <ID>MagicNumber:SettingsDataScreen.kt$SettingsDataScreen$12</ID>
    <ID>MagicNumber:SettingsDataScreen.kt$SettingsDataScreen$1440</ID>
    <ID>MagicNumber:SettingsDataScreen.kt$SettingsDataScreen$168</ID>
    <ID>MagicNumber:SettingsDataScreen.kt$SettingsDataScreen$180</ID>
    <ID>MagicNumber:SettingsDataScreen.kt$SettingsDataScreen$24</ID>
    <ID>MagicNumber:SettingsDataScreen.kt$SettingsDataScreen$2880</ID>
    <ID>MagicNumber:SettingsDataScreen.kt$SettingsDataScreen$30</ID>
    <ID>MagicNumber:SettingsDataScreen.kt$SettingsDataScreen$360</ID>
    <ID>MagicNumber:SettingsDataScreen.kt$SettingsDataScreen$48</ID>
    <ID>MagicNumber:SettingsDataScreen.kt$SettingsDataScreen$6</ID>
    <ID>MagicNumber:SettingsDataScreen.kt$SettingsDataScreen$60</ID>
    <ID>MagicNumber:SettingsDataScreen.kt$SettingsDataScreen$720</ID>
    <ID>MagicNumber:SettingsDownloadScreen.kt$SettingsDownloadScreen$10</ID>
    <ID>MagicNumber:SettingsDownloadScreen.kt$SettingsDownloadScreen$3</ID>
    <ID>MagicNumber:SettingsDownloadScreen.kt$SettingsDownloadScreen$4</ID>
    <ID>MagicNumber:SettingsDownloadScreen.kt$SettingsDownloadScreen$5</ID>
    <ID>MagicNumber:SettingsEhScreen.kt$SettingsEhScreen$12</ID>
    <ID>MagicNumber:SettingsEhScreen.kt$SettingsEhScreen$24</ID>
    <ID>MagicNumber:SettingsEhScreen.kt$SettingsEhScreen$3</ID>
    <ID>MagicNumber:SettingsEhScreen.kt$SettingsEhScreen$30</ID>
    <ID>MagicNumber:SettingsEhScreen.kt$SettingsEhScreen$365</ID>
    <ID>MagicNumber:SettingsEhScreen.kt$SettingsEhScreen$48</ID>
    <ID>MagicNumber:SettingsEhScreen.kt$SettingsEhScreen$6</ID>
    <ID>MagicNumber:SettingsEhScreen.kt$SettingsEhScreen$7</ID>
    <ID>MagicNumber:SettingsEhScreen.kt$SettingsEhScreen.LanguageDialogState$10</ID>
    <ID>MagicNumber:SettingsEhScreen.kt$SettingsEhScreen.LanguageDialogState$11</ID>
    <ID>MagicNumber:SettingsEhScreen.kt$SettingsEhScreen.LanguageDialogState$12</ID>
    <ID>MagicNumber:SettingsEhScreen.kt$SettingsEhScreen.LanguageDialogState$13</ID>
    <ID>MagicNumber:SettingsEhScreen.kt$SettingsEhScreen.LanguageDialogState$14</ID>
    <ID>MagicNumber:SettingsEhScreen.kt$SettingsEhScreen.LanguageDialogState$15</ID>
    <ID>MagicNumber:SettingsEhScreen.kt$SettingsEhScreen.LanguageDialogState$16</ID>
    <ID>MagicNumber:SettingsEhScreen.kt$SettingsEhScreen.LanguageDialogState$3</ID>
    <ID>MagicNumber:SettingsEhScreen.kt$SettingsEhScreen.LanguageDialogState$4</ID>
    <ID>MagicNumber:SettingsEhScreen.kt$SettingsEhScreen.LanguageDialogState$5</ID>
    <ID>MagicNumber:SettingsEhScreen.kt$SettingsEhScreen.LanguageDialogState$6</ID>
    <ID>MagicNumber:SettingsEhScreen.kt$SettingsEhScreen.LanguageDialogState$7</ID>
    <ID>MagicNumber:SettingsEhScreen.kt$SettingsEhScreen.LanguageDialogState$8</ID>
    <ID>MagicNumber:SettingsEhScreen.kt$SettingsEhScreen.LanguageDialogState$9</ID>
    <ID>MagicNumber:SettingsItems.kt$0.5f</ID>
    <ID>MagicNumber:SettingsItems.kt$1.5f</ID>
    <ID>MagicNumber:SettingsLibraryScreen.kt$SettingsLibraryScreen$12</ID>
    <ID>MagicNumber:SettingsLibraryScreen.kt$SettingsLibraryScreen$168</ID>
    <ID>MagicNumber:SettingsLibraryScreen.kt$SettingsLibraryScreen$24</ID>
    <ID>MagicNumber:SettingsLibraryScreen.kt$SettingsLibraryScreen$48</ID>
    <ID>MagicNumber:SettingsLibraryScreen.kt$SettingsLibraryScreen$72</ID>
    <ID>MagicNumber:SettingsMainScreen.kt$SettingsMainScreen$0.02f</ID>
    <ID>MagicNumber:SettingsMainScreen.kt$SettingsMainScreen$0.05f</ID>
    <ID>MagicNumber:SettingsMainScreen.kt$SettingsMainScreen$3</ID>
    <ID>MagicNumber:SettingsMangadexScreen.kt$SettingsMangadexScreen$5</ID>
    <ID>MagicNumber:SettingsReaderScreen.kt$SettingsReaderScreen$10</ID>
    <ID>MagicNumber:SettingsReaderScreen.kt$SettingsReaderScreen$100f</ID>
    <ID>MagicNumber:SettingsReaderScreen.kt$SettingsReaderScreen$12</ID>
    <ID>MagicNumber:SettingsReaderScreen.kt$SettingsReaderScreen$14</ID>
    <ID>MagicNumber:SettingsReaderScreen.kt$SettingsReaderScreen$16</ID>
    <ID>MagicNumber:SettingsReaderScreen.kt$SettingsReaderScreen$20</ID>
    <ID>MagicNumber:SettingsReaderScreen.kt$SettingsReaderScreen$250</ID>
    <ID>MagicNumber:SettingsReaderScreen.kt$SettingsReaderScreen$3</ID>
    <ID>MagicNumber:SettingsReaderScreen.kt$SettingsReaderScreen$4</ID>
    <ID>MagicNumber:SettingsReaderScreen.kt$SettingsReaderScreen$5</ID>
    <ID>MagicNumber:SettingsReaderScreen.kt$SettingsReaderScreen$500</ID>
    <ID>MagicNumber:SettingsReaderScreen.kt$SettingsReaderScreen$6</ID>
    <ID>MagicNumber:SettingsReaderScreen.kt$SettingsReaderScreen$8</ID>
    <ID>MagicNumber:SettingsSearchScreen.kt$10</ID>
    <ID>MagicNumber:Shikimori.kt$Shikimori$40</ID>
    <ID>MagicNumber:ShikimoriModels.kt$1000</ID>
    <ID>MagicNumber:ShikimoriModels.kt$3600</ID>
    <ID>MagicNumber:SmartSearchEngine.kt$SmartSearchEngine$5</ID>
    <ID>MagicNumber:SourceFeedScreenModel.kt$SourceFeedScreenModel$10</ID>
    <ID>MagicNumber:SourcePreferences.kt$SourcePreferences$80</ID>
    <ID>MagicNumber:Surface.kt$100f</ID>
    <ID>MagicNumber:Surface.kt$4.5f</ID>
    <ID>MagicNumber:Suwayomi.kt$Suwayomi$255</ID>
    <ID>MagicNumber:Suwayomi.kt$Suwayomi$35</ID>
    <ID>MagicNumber:SyncDataJob.kt$SyncDataJob.Companion$10</ID>
    <ID>MagicNumber:SyncManager.kt$SyncManager$1000</ID>
    <ID>MagicNumber:SyncManager.kt$SyncManager$60000</ID>
    <ID>MagicNumber:SyncYomiSyncService.kt$SyncYomiSyncService$2000L</ID>
    <ID>MagicNumber:SyncYomiSyncService.kt$SyncYomiSyncService$30L</ID>
    <ID>MagicNumber:SyncYomiSyncService.kt$SyncYomiSyncService$32000L</ID>
    <ID>MagicNumber:Tabs.kt$0.08f</ID>
    <ID>MagicNumber:Tabs.kt$0.12f</ID>
    <ID>MagicNumber:TimeUtils.kt$4</ID>
    <ID>MagicNumber:TrackInfoDialog.kt$TrackChapterSelectorScreen.Model$10000</ID>
    <ID>MagicNumber:TrackInfoDialogSelector.kt$3L</ID>
    <ID>MagicNumber:TrackInfoDialogSelector.kt$4L</ID>
    <ID>MagicNumber:TrackInfoDialogSelector.kt$5L</ID>
    <ID>MagicNumber:TrackInfoDialogSelector.kt$6L</ID>
    <ID>MagicNumber:TrackStatus.kt$TrackStatus.COMPLETED$5</ID>
    <ID>MagicNumber:TrackStatus.kt$TrackStatus.DROPPED$6</ID>
    <ID>MagicNumber:TrackStatus.kt$TrackStatus.OTHER$7</ID>
    <ID>MagicNumber:TrackStatus.kt$TrackStatus.PAUSED$4</ID>
    <ID>MagicNumber:TrackStatus.kt$TrackStatus.PLAN_TO_READ$3</ID>
    <ID>MagicNumber:TrackerSearchPreviewProvider.kt$TrackerSearchPreviewProvider$10</ID>
    <ID>MagicNumber:TrackerSearchPreviewProvider.kt$TrackerSearchPreviewProvider$100</ID>
    <ID>MagicNumber:TrackerSearchPreviewProvider.kt$TrackerSearchPreviewProvider$1000L</ID>
    <ID>MagicNumber:TrackerSearchPreviewProvider.kt$TrackerSearchPreviewProvider$100L</ID>
    <ID>MagicNumber:TrackerSearchPreviewProvider.kt$TrackerSearchPreviewProvider$30</ID>
    <ID>MagicNumber:TrackerSearchPreviewProvider.kt$TrackerSearchPreviewProvider$365</ID>
    <ID>MagicNumber:TrackerSearchPreviewProvider.kt$TrackerSearchPreviewProvider$40</ID>
    <ID>MagicNumber:TrackingPreferenceWidget.kt$0xFF4CAF50</ID>
    <ID>MagicNumber:TsuminoDescriptionAdapter.kt$100.0</ID>
    <ID>MagicNumber:UiPreferences.kt$UiPreferences$4</ID>
    <ID>MagicNumber:UniFileTempFileManager.kt$UniFileTempFileManager$3</ID>
    <ID>MagicNumber:UniFileTempFileManager.kt$UniFileTempFileManager$8192</ID>
    <ID>MagicNumber:UpdatesScreenModel.kt$UpdatesScreenModel$3</ID>
    <ID>MagicNumber:VerticalFastScroller.kt$100</ID>
    <ID>MagicNumber:ViewerNavigation.kt$ViewerNavigation.NavigationRegion.LEFT$0x11</ID>
    <ID>MagicNumber:ViewerNavigation.kt$ViewerNavigation.NavigationRegion.LEFT$0x28</ID>
    <ID>MagicNumber:ViewerNavigation.kt$ViewerNavigation.NavigationRegion.LEFT$0x7D</ID>
    <ID>MagicNumber:ViewerNavigation.kt$ViewerNavigation.NavigationRegion.LEFT$0xCC</ID>
    <ID>MagicNumber:ViewerNavigation.kt$ViewerNavigation.NavigationRegion.MENU$0x81</ID>
    <ID>MagicNumber:ViewerNavigation.kt$ViewerNavigation.NavigationRegion.MENU$0x8D</ID>
    <ID>MagicNumber:ViewerNavigation.kt$ViewerNavigation.NavigationRegion.MENU$0x95</ID>
    <ID>MagicNumber:ViewerNavigation.kt$ViewerNavigation.NavigationRegion.MENU$0xCC</ID>
    <ID>MagicNumber:ViewerNavigation.kt$ViewerNavigation.NavigationRegion.NEXT$0x84</ID>
    <ID>MagicNumber:ViewerNavigation.kt$ViewerNavigation.NavigationRegion.NEXT$0x96</ID>
    <ID>MagicNumber:ViewerNavigation.kt$ViewerNavigation.NavigationRegion.NEXT$0xCC</ID>
    <ID>MagicNumber:ViewerNavigation.kt$ViewerNavigation.NavigationRegion.NEXT$0xE2</ID>
    <ID>MagicNumber:ViewerNavigation.kt$ViewerNavigation.NavigationRegion.PREV$0x33</ID>
    <ID>MagicNumber:ViewerNavigation.kt$ViewerNavigation.NavigationRegion.PREV$0x77</ID>
    <ID>MagicNumber:ViewerNavigation.kt$ViewerNavigation.NavigationRegion.PREV$0xCC</ID>
    <ID>MagicNumber:ViewerNavigation.kt$ViewerNavigation.NavigationRegion.PREV$0xFF</ID>
    <ID>MagicNumber:ViewerNavigation.kt$ViewerNavigation.NavigationRegion.RIGHT$0xA6</ID>
    <ID>MagicNumber:ViewerNavigation.kt$ViewerNavigation.NavigationRegion.RIGHT$0xCC</ID>
    <ID>MagicNumber:ViewerNavigation.kt$ViewerNavigation.NavigationRegion.RIGHT$0xCF</ID>
    <ID>MagicNumber:ViewerNavigation.kt$ViewerNavigation.NavigationRegion.RIGHT$0xD5</ID>
    <ID>MagicNumber:WebViewInterceptor.kt$WebViewInterceptor$30</ID>
    <ID>MagicNumber:WebtoonConfig.kt$WebtoonConfig$3</ID>
    <ID>MagicNumber:WebtoonConfig.kt$WebtoonConfig$4</ID>
    <ID>MagicNumber:WebtoonConfig.kt$WebtoonConfig$5</ID>
    <ID>MagicNumber:WebtoonPageHolder.kt$WebtoonPageHolder$0.8</ID>
    <ID>MagicNumber:WebtoonPageHolder.kt$WebtoonPageHolder$100f</ID>
    <ID>MagicNumber:WebtoonPageHolder.kt$WebtoonPageHolder$16</ID>
    <ID>MagicNumber:WebtoonPageHolder.kt$WebtoonPageHolder$90f</ID>
    <ID>MagicNumber:WebtoonRecyclerView.kt$WebtoonRecyclerView$0.4f</ID>
    <ID>MagicNumber:WebtoonRecyclerView.kt$WebtoonRecyclerView$400</ID>
    <ID>MagicNumber:WebtoonRecyclerView.kt$WebtoonRecyclerView.Detector$0.5f</ID>
    <ID>MagicNumber:WebtoonViewer.kt$WebtoonViewer$3</ID>
    <ID>MagicNumber:WebtoonViewer.kt$WebtoonViewer$5</ID>
    <ID>MagicNumber:WheelPicker.kt$0.2f</ID>
    <ID>MagicNumber:WheelPicker.kt$1.2f</ID>
    <ID>MagicNumber:WorkManagerExtensions.kt$500</ID>
    <ID>MatchingDeclarationName:ChapterDownloadIndicator.kt$ChapterDownloadAction</ID>
    <ID>MatchingDeclarationName:CommonMangaItem.kt$CommonMangaItemDefaults</ID>
    <ID>MatchingDeclarationName:EditMergedSettingsDialog.kt$EditMergedSettingsState : EditMergedMangaItemListener</ID>
    <ID>MatchingDeclarationName:EmptyScreen.kt$EmptyScreenAction</ID>
    <ID>MatchingDeclarationName:FeedScreen.kt$FeedItemUI</ID>
    <ID>MatchingDeclarationName:LibrarySortMode.kt$LibrarySort : FlagWithMask</ID>
    <ID>MatchingDeclarationName:MyAnimeListModels.kt$OAuth</ID>
    <ID>MatchingDeclarationName:NetworkStateTracker.kt$NetworkState</ID>
    <ID>MatchingDeclarationName:SettingsItems.kt$SettingsItemsPaddings</ID>
    <ID>MatchingDeclarationName:ShikimoriModels.kt$OAuth</ID>
    <ID>MatchingDeclarationName:SourceFeedScreen.kt$SourceFeedUI</ID>
    <ID>MatchingDeclarationName:SyncFavoritesProgressDialog.kt$SyncFavoritesProgressProperties</ID>
    <ID>MatchingDeclarationName:TabbedDialog.kt$TabbedDialogPaddings</ID>
    <ID>MatchingDeclarationName:__Assets.kt$AssetsGroup</ID>
    <ID>MatchingDeclarationName:__EhAssets.kt$EhAssets</ID>
    <ID>MatchingDeclarationName:__Ehassets.kt$EhassetsGroup</ID>
    <ID>MatchingDeclarationName:__Exh.kt$ExhGroup</ID>
    <ID>MaxLineLength:AnnotatedString.kt$Typeface.BOLD_ITALIC -&gt; addStyle(SpanStyle(fontWeight = FontWeight.Bold, fontStyle = FontStyle.Italic), start, end)</ID>
    <ID>MaxLineLength:ApiMangaParser.kt$ApiMangaParser$/*private fun isOneShot(chapter: ChapterSerializer, finalChapterNumber: String): Boolean { return chapter.title.equals("oneshot", true) || ((chapter.chapter.isNullOrEmpty() || chapter.chapter == "0") &amp;&amp; MdUtil.validOneShotFinalChapters.contains(finalChapterNumber)) }*/</ID>
    <ID>MaxLineLength:ApiMangaParser.kt$ApiMangaParser$?.</ID>
    <ID>MaxLineLength:AzukiHandler.kt$AzukiHandler$val url = element.jsonObject["image_wm"]!!.jsonObject["webp"]!!.jsonArray[1].jsonObject["url"]!!.jsonPrimitive.content</ID>
    <ID>MaxLineLength:BackupTracking.kt$_: Long, _: Long, syncId: Long, mediaId: Long, libraryId: Long?, title: String, lastChapterRead: Double, totalChapters: Long, status: Long, score: Double, remoteUrl: String, startDate: Long, finishDate: Long</ID>
    <ID>MaxLineLength:BangumiInterceptor.kt$BangumiInterceptor$"jobobby04/TachiyomiSY/v${BuildConfig.VERSION_NAME} (Android) (http://github.com/jobobby04/tachiyomisy)"</ID>
    <ID>MaxLineLength:BatchAddScreen.kt$BatchAddScreen$Text(text = stringResource(SYMR.strings.eh_batch_add_adding_galleries), style = MaterialTheme.typography.titleLarge)</ID>
    <ID>MaxLineLength:BatchAddScreen.kt$BatchAddScreen$Text(text = stringResource(SYMR.strings.eh_batch_add_title), style = MaterialTheme.typography.titleLarge)</ID>
    <ID>MaxLineLength:BiometricTimesScreen.kt$BiometricTimesScreen$.</ID>
    <ID>MaxLineLength:BiometricTimesScreen.kt$BiometricTimesScreen$text = stringResource(SYMR.strings.delete_time_range_confirmation, dialog.timeRange.formattedString)</ID>
    <ID>MaxLineLength:ComikeyHandler.kt$ComikeyHandler$private val urlForbidden = "https://fakeimg.pl/1800x2252/FFFFFF/000000/?font_size=120&amp;text=This%20chapter%20is%20not%20available%20for%20free.%0A%0AIf%20you%20have%20purchased%20this%20chapter%2C%20please%20%0Aopen%20the%20website%20in%20web%20view%20and%20log%20in."</ID>
    <ID>MaxLineLength:CoroutinesExtensions.kt$*</ID>
    <ID>MaxLineLength:DataSaver.kt$BandwidthHeroDataSaver$imageUrl.contains(".jpeg", true) || imageUrl.contains(".jpg", true) -&gt; if (ignoreJpg) imageUrl else getUrl(imageUrl)</ID>
    <ID>MaxLineLength:DataSaver.kt$WsrvNlDataSaver$imageUrl.contains(".jpeg", true) || imageUrl.contains(".jpg", true) -&gt; if (ignoreJpg) imageUrl else getUrl(imageUrl)</ID>
    <ID>MaxLineLength:DataSaver.kt$WsrvNlDataSaver$return</ID>
    <ID>MaxLineLength:DebugToggles.kt$DebugToggles.ENABLE_EXH_ROOT_REDIRECT$// Redirect to master version of gallery when encountering a gallery that has a parent/child that is already in the library</ID>
    <ID>MaxLineLength:DownloadPageLoader.kt$DownloadPageLoader$val chapterPath = downloadProvider.findChapterDir(dbChapter.name, dbChapter.scanlator, /* SY --&gt; */ manga.ogTitle /* SY &lt;-- */, source)</ID>
    <ID>MaxLineLength:Downloader.kt$Downloader$.</ID>
    <ID>MaxLineLength:Downloader.kt$Downloader$// using ImageUtils isImage and findImageType functions causes IO errors when deleting files to set Exif Metadata</ID>
    <ID>MaxLineLength:EHConfigurator.kt$EHConfigurator$throw IllegalStateException(context.stringResource(SYMR.strings.eh_settings_out_of_slots_error, source.name))</ID>
    <ID>MaxLineLength:EHHathPerksResponse.kt$EHHathPerksResponse$"EHHathPerksResponse(moreThumbs=$moreThumbs, thumbsUp=$thumbsUp, allThumbs=$allThumbs, pagingEnlargementI=$pagingEnlargementI, pagingEnlargementII=$pagingEnlargementII, pagingEnlargementIII=$pagingEnlargementIII)"</ID>
    <ID>MaxLineLength:EHentaiDescriptionAdapter.kt$binding.rating.text = (ratingFloat ?: 0F).toString() + " - " + MetadataUIUtil.getRatingString(context, ratingFloat?.times(2))</ID>
    <ID>MaxLineLength:EHentaiDescriptionAdapter.kt$binding.visible.text = context.stringResource(SYMR.strings.is_visible, meta.visible ?: context.stringResource(MR.strings.unknown))</ID>
    <ID>MaxLineLength:EHentaiUpdateWorker.kt$EHentaiUpdateWorker$"No chapters found for gallery (manga.id: %s, meta.gId: %s, meta.gToken: %s, failures-so-far: %s)!"</ID>
    <ID>MaxLineLength:EHentaiUpdateWorker.kt$EHentaiUpdateWorker$"Updating gallery (index: %s, manga.id: %s, meta.gId: %s, meta.gToken: %s, failures-so-far: %s, modifiedThisIteration.size: %s)..."</ID>
    <ID>MaxLineLength:EHentaiUpdateWorker.kt$EHentaiUpdateWorker$?:</ID>
    <ID>MaxLineLength:EHentaiUpdateWorker.kt$EHentaiUpdateWorker$if</ID>
    <ID>MaxLineLength:EditMergedMangaItem.kt$EditMergedMangaItem$class</ID>
    <ID>MaxLineLength:EditMergedMangaItem.kt$EditMergedMangaItem$override</ID>
    <ID>MaxLineLength:EditMergedSettingsDialog.kt$EditMergedSettingsState$val isPriorityOrder = mergeReference?.let { it.chapterSortMode == MergedMangaReference.CHAPTER_SORT_PRIORITY } ?: false</ID>
    <ID>MaxLineLength:EditMergedSettingsDialog.kt$state.onViewCreated(factoryContext, binding, mergedData.manga.values.toList(), mergedData.references)</ID>
    <ID>MaxLineLength:EditMergedSettingsHeaderAdapter.kt$EditMergedSettingsHeaderAdapter$class</ID>
    <ID>MaxLineLength:EditMergedSettingsHeaderAdapter.kt$EditMergedSettingsHeaderAdapter$fun canMove()</ID>
    <ID>MaxLineLength:EnhancedFilePrinter.kt$EnhancedFilePrinter$require(!(newFileName == null || newFileName.trim { it &lt;= ' ' }.isEmpty())) { "File name should not be empty." }</ID>
    <ID>MaxLineLength:ExtensionInstaller.kt$ExtensionInstaller$if</ID>
    <ID>MaxLineLength:ExtensionManager.kt$ExtensionManager$if (it) this@ExtensionManager.xLogD("Removing blacklisted extension: (name: %s, pkgName: %s)!", extension.name, extension.pkgName)</ID>
    <ID>MaxLineLength:ExtensionManager.kt$ExtensionManager$private</ID>
    <ID>MaxLineLength:ExtensionsScreenModel.kt$ExtensionsScreenModel$ExtensionUiModel.Header.Text(LocaleHelper.getSourceDisplayName(lang, context)) to exts.map(extensionMapper(downloads))</ID>
    <ID>MaxLineLength:FavoritesSyncHelper.kt$FavoritesSyncHelper$SYMR.strings.favorites_sync_failed_to_add_to_local_unknown_type</ID>
    <ID>MaxLineLength:FavoritesSyncHelper.kt$FavoritesSyncHelper$context.stringResource(SYMR.strings.favorites_sync_remove_from_local, index + 1, changeSet.removed.size)</ID>
    <ID>MaxLineLength:FavoritesSyncHelper.kt$FavoritesSyncHelper$logger.w(context.stringResource(SYMR.strings.favorites_sync_gallery_multiple_categories_error, manga.id))</ID>
    <ID>MaxLineLength:FavoritesSyncHelper.kt$FavoritesSyncHelper$message = context.stringResource(SYMR.strings.favorites_sync_add_to_local, index + 1, changeSet.added.size)</ID>
    <ID>MaxLineLength:FavoritesSyncHelper.kt$FavoritesSyncHelper$message = context.stringResource(SYMR.strings.favorites_sync_adding_to_remote, index + 1, changeSet.added.size)</ID>
    <ID>MaxLineLength:FavoritesSyncHelper.kt$FavoritesSyncHelper$status.value = FavoritesSyncStatus.Error(context.stringResource(SYMR.strings.favorites_sync_failed_to_featch))</ID>
    <ID>MaxLineLength:FavoritesSyncHelper.kt$FavoritesSyncHelper$status.value = FavoritesSyncStatus.Processing(context.stringResource(SYMR.strings.favorites_sync_cleaning_up))</ID>
    <ID>MaxLineLength:FavoritesSyncHelper.kt$FavoritesSyncHelper$status.value = FavoritesSyncStatus.Processing(context.stringResource(SYMR.strings.favorites_sync_downloading))</ID>
    <ID>MaxLineLength:FavoritesSyncHelper.kt$FavoritesSyncHelper$status.value = FavoritesSyncStatus.Processing(context.stringResource(SYMR.strings.favorites_sync_verifying_library))</ID>
    <ID>MaxLineLength:FeedScreenModel.kt$FeedScreenModel$private suspend</ID>
    <ID>MaxLineLength:GalleryAdder.kt$GalleryAddEvent.Fail.UnknownSource$override val logMessage = context.stringResource(SYMR.strings.batch_add_unknown_source_log_message, galleryUrl)</ID>
    <ID>MaxLineLength:GalleryAdder.kt$GalleryAddEvent.Fail.UnknownType$override val logMessage = context.stringResource(SYMR.strings.batch_add_unknown_type_log_message, galleryUrl)</ID>
    <ID>MaxLineLength:GalleryAdder.kt$GalleryAdder$GalleryAddEvent.Fail.Error(url, context.stringResource(SYMR.strings.gallery_adder_could_not_identify_chapter, url))</ID>
    <ID>MaxLineLength:GalleryAdder.kt$GalleryAdder$logger.d(context.stringResource(SYMR.strings.gallery_adder_importing_gallery, url, fav.toString(), forceSource?.toString().orEmpty()))</ID>
    <ID>MaxLineLength:GalleryAdder.kt$GalleryAdder$return GalleryAddEvent.Fail.Error(url, context.stringResource(SYMR.strings.gallery_adder_chapter_fetch_error, url))</ID>
    <ID>MaxLineLength:HBrowseDescriptionAdapter.kt$binding.pages.text = context.pluralStringResource(SYMR.plurals.num_pages, meta.length ?: 0, meta.length ?: 0)</ID>
    <ID>MaxLineLength:LibraryScreenModel.kt$LibraryScreenModel$!mangaTag.name.contains(searchedTag, true) || !mangaTag.namespace.equals(queryComponent.namespace, true)</ID>
    <ID>MaxLineLength:LibraryScreenModel.kt$LibraryScreenModel$(it.namespace.equals(queryComponent.namespace, true) &amp;&amp; tag?.run { it.name.contains(tag.asQuery(), true) } == true)</ID>
    <ID>MaxLineLength:LibraryScreenModel.kt$LibraryScreenModel$(list.getOrNull(0)?.toIntOrNull() ?: return@mapNotNull null) to (list.getOrNull(1) ?: return@mapNotNull null)</ID>
    <ID>MaxLineLength:LibraryScreenModel.kt$LibraryScreenModel$(loggedInTrackServices.isEmpty() || tracks == null || !filterTracks(query, tracks, context))</ID>
    <ID>MaxLineLength:LibraryScreenModel.kt$LibraryScreenModel$(loggedInTrackServices.isNotEmpty() &amp;&amp; tracks != null &amp;&amp; filterTracks(query, tracks, context))</ID>
    <ID>MaxLineLength:LibraryScreenModel.kt$LibraryScreenModel$SManga.PUBLISHING_FINISHED.toLong() -&gt; context.stringResource(MR.strings.publishing_finished)</ID>
    <ID>MaxLineLength:LibraryScreenModel.kt$LibraryScreenModel$searchTags == null || (queryComponent.namespace.isBlank() &amp;&amp; searchedTag.isNullOrBlank())</ID>
    <ID>MaxLineLength:LibraryScreenModel.kt$LibraryScreenModel$suspend</ID>
    <ID>MaxLineLength:LibraryScreenModel.kt$LibraryScreenModel$val</ID>
    <ID>MaxLineLength:LibraryScreenModel.kt$LibraryScreenModel$val manga1IndexOfTag = listOfTags.indexOfFirst { i1.libraryManga.manga.genre?.contains(it) ?: false }</ID>
    <ID>MaxLineLength:LibraryScreenModel.kt$LibraryScreenModel$val manga2IndexOfTag = listOfTags.indexOfFirst { i2.libraryManga.manga.genre?.contains(it) ?: false }</ID>
    <ID>MaxLineLength:LibraryScreenModel.kt$LibraryScreenModel$val mergedSource = sources.firstOrNull { mergedManga.source == it.id } as? HttpSource ?: return@merge</ID>
    <ID>MaxLineLength:LibraryScreenModel.kt$LibraryScreenModel$val sources = mergedMangas.distinctBy { it.source }.map { sourceManager.getOrStub(it.source) }</ID>
    <ID>MaxLineLength:LibraryTab.kt$LibraryTab$onClickRefresh(state.categories[screenModel.activeCategoryIndex.coerceAtMost(state.categories.lastIndex)])</ID>
    <ID>MaxLineLength:LibraryUpdateJob.kt$LibraryUpdateJob$if</ID>
    <ID>MaxLineLength:LibraryUpdateJob.kt$LibraryUpdateJob$readChapters.any { it.chapterNumber == chapter.chapterNumber }</ID>
    <ID>MaxLineLength:LibraryUpdateJob.kt$LibraryUpdateJob$val readChapters = getChaptersByMangaId.await(manga.id).filter { it.read }</ID>
    <ID>MaxLineLength:LibraryUpdateNotifier.kt$LibraryUpdateNotifier.Companion$const val HELP_WARNING_URL = "https://mihon.app/docs/faq/library#why-am-i-warned-about-large-bulk-updates-and-downloads"</ID>
    <ID>MaxLineLength:LocalFavoritesStorage.kt$LocalFavoritesStorage$(otherGid != null &amp;&amp; otherToken != null &amp;&amp; other.otherGid != null &amp;&amp; other.otherToken != null &amp;&amp; otherGid == other.otherGid &amp;&amp; otherToken == other.otherToken)</ID>
    <ID>MaxLineLength:LocalSource.kt$LocalSource$copiedFile.getZipInputStream(COMIC_INFO_FILE)?.let { setMangaDetailsFromComicInfoFile(it, manga) }</ID>
    <ID>MaxLineLength:MainActivity.kt$MainActivity$// or the Google-specific search intent (triggered by saying or typing "search *query* on *Tachiyomi*" in Google Search/Google Assistant)</ID>
    <ID>MaxLineLength:MangaChapterListItem.kt$if (readProgress != null || scanlator != null/* SY --&gt; */ || sourceName != null/* SY &lt;-- */) DotSeparatorText()</ID>
    <ID>MaxLineLength:MangaDex.kt$MangaDex$override suspend</ID>
    <ID>MaxLineLength:MangaDexDescriptionAdapter.kt$binding.rating.text = (round((ratingFloat ?: 0F) * 100.0) / 100.0).toString() + " - " + getRatingString(context, ratingFloat)</ID>
    <ID>MaxLineLength:MangaDexFollowsScreenModel.kt$MangaDexFollowsScreenModel$override</ID>
    <ID>MaxLineLength:MangaDexSimilarScreenModel.kt$MangaDexSimilarScreenModel$override</ID>
    <ID>MaxLineLength:MangaScreen.kt$MangaScreen$onMergeWithAnotherClicked = { mergeWithAnother(navigator, context, successState.manga, screenModel::smartSearchMerge) }</ID>
    <ID>MaxLineLength:MangaScreen.kt$MangaScreen$onRecommendClicked = { openRecommends(context, navigator, screenModel.source?.getMainSource(), successState.manga) }</ID>
    <ID>MaxLineLength:MangaScreenModel.kt$MangaScreenModel$/* SY --&gt; */ if (isMergedSource) it.manga.id in mergedIds else /* SY &lt;-- */ it.manga.id == successState?.manga?.id</ID>
    <ID>MaxLineLength:MangaScreenModel.kt$MangaScreenModel$alwaysShowReadingProgress = readerPreferences.preserveReadingPosition().get() &amp;&amp; manga.isEhBasedManga()</ID>
    <ID>MaxLineLength:MangaScreenModel.kt$MangaScreenModel$if</ID>
    <ID>MaxLineLength:MangaScreenModel.kt$MangaScreenModel$if (chapters.isEmpty() || !manga.shouldDownloadNewChapters(categories, downloadPreferences) || manga.isEhBasedManga()) return@launchNonCancellable</ID>
    <ID>MaxLineLength:MangaScreenModel.kt$MangaScreenModel$return TrackItem(getTracks.await(mangaId).first { it.trackerId == trackerManager.mdList.id }, trackerManager.mdList)</ID>
    <ID>MaxLineLength:MangaScreenModel.kt$MangaScreenModel$val</ID>
    <ID>MaxLineLength:MangaScreenModel.kt$MangaScreenModel$val (acceptedChain) = updateHelper.findAcceptedRootAndDiscardOthers(manga.source, chapters)</ID>
    <ID>MaxLineLength:MangaScreenModel.kt$MangaScreenModel$val isUpdateIntervalEnabled = LibraryPreferences.MANGA_OUTSIDE_RELEASE_PERIOD in libraryPreferences.autoUpdateMangaRestrictions().get()</ID>
    <ID>MaxLineLength:MangaScreenModel.kt$MangaScreenModel.State.Success$it.track != null &amp;&amp; ((it.tracker is MdList &amp;&amp; it.track.status != FollowStatus.UNFOLLOWED.long) || it.tracker !is MdList)</ID>
    <ID>MaxLineLength:MdUtil.kt$MdUtil.Companion$fun</ID>
    <ID>MaxLineLength:MemAutoFlushingLookupTable.kt$MemAutoFlushingLookupTable$*</ID>
    <ID>MaxLineLength:MetadataViewScreen.kt$MetadataViewScreen$contentPadding = paddingValues + WindowInsets.navigationBars.asPaddingValues() + topSmallPaddingValues</ID>
    <ID>MaxLineLength:MigrationListScreen.kt$MigrationListScreen$val mangaId = (items.orEmpty().firstOrNull()?.searchResult?.value as? MigratingManga.SearchResult.Result)?.id</ID>
    <ID>MaxLineLength:MigrationListScreenModel.kt$MigrationListScreenModel$if</ID>
    <ID>MaxLineLength:MigrationListScreenModel.kt$MigrationListScreenModel$manga.progress.value = validSources.size to processedSources.incrementAndGet()</ID>
    <ID>MaxLineLength:MigrationListScreenModel.kt$MigrationListScreenModel$source.getChapterList(localManga.toSManga(), throttleManager::throttle)</ID>
    <ID>MaxLineLength:MigrationListScreenModel.kt$MigrationListScreenModel$val prevChapter = prevMangaChapters.find { it.isRecognizedNumber &amp;&amp; it.chapterNumber == chapter.chapterNumber }</ID>
    <ID>MaxLineLength:MigrationSourceItem.kt$MigrationSourceItem$class</ID>
    <ID>MaxLineLength:MigrationSourceItem.kt$MigrationSourceItem$override</ID>
    <ID>MaxLineLength:NotificationExtensions.kt$if</ID>
    <ID>MaxLineLength:PageHandler.kt$PageHandler$suspend</ID>
    <ID>MaxLineLength:PagePreviewScreen.kt$(state.pageCount != null &amp;&amp; state.pageCount &gt; 1 /* TODO support unknown pageCount || state.hasNextPage*/)</ID>
    <ID>MaxLineLength:PagerConfig.kt$PagerConfig$var</ID>
    <ID>MaxLineLength:PagerPageHolder.kt$PagerPageHolder$val</ID>
    <ID>MaxLineLength:PagerViewer.kt$PagerViewer$val forceTransition = config.alwaysShowChapterTransition || adapter.joinedItems.getOrNull(pager.currentItem)?.first is ChapterTransition</ID>
    <ID>MaxLineLength:PreferenceScreen.kt$*</ID>
    <ID>MaxLineLength:PururinDescriptionAdapter.kt$binding.genre.text</ID>
    <ID>MaxLineLength:PururinDescriptionAdapter.kt$binding.rating.text = (round((ratingFloat ?: 0F) * 100.0) / 100.0).toString() + " - " + MetadataUIUtil.getRatingString(context, ratingFloat?.times(2))</ID>
    <ID>MaxLineLength:ReaderActivity.kt$ReaderActivity$if ((resources.configuration.layoutDirection == View.LAYOUT_DIRECTION_LTR) xor invertDoublePage) "${page.number}-${page.number + 1}" else "${page.number + 1}-${page.number}"</ID>
    <ID>MaxLineLength:ReaderActivity.kt$ReaderActivity$stringResource(SYMR.strings.share_pages_info, manga.title, chapter.name, if (resources.configuration.layoutDirection == View.LAYOUT_DIRECTION_LTR) "${page.number}-${page.number + 1}" else "${page.number + 1}-${page.number}")</ID>
    <ID>MaxLineLength:ReaderActivity.kt$ReaderActivity$val currentPage = (((viewer as? PagerViewer)?.currentPage ?: (viewer as? WebtoonViewer)?.currentPage) as? ReaderPage)?.index</ID>
    <ID>MaxLineLength:ReaderActivity.kt$ReaderActivity$val showVerticalSeekbar = !forceHorizontalSeekbar &amp;&amp; (verticalSeekbarLandscape || verticalSeekbarHorizontal) &amp;&amp; viewerIsVertical</ID>
    <ID>MaxLineLength:ReaderActivity.kt$ReaderActivity$val verticalSeekbarLandscape = configuration.orientation == Configuration.ORIENTATION_LANDSCAPE &amp;&amp; landscapeVerticalSeekbar</ID>
    <ID>MaxLineLength:ReaderActivity.kt$ReaderActivity$windowInsetsController.systemBarsBehavior = WindowInsetsControllerCompat.BEHAVIOR_SHOW_TRANSIENT_BARS_BY_SWIPE</ID>
    <ID>MaxLineLength:ReaderActivity.kt$ReaderActivity.Companion$fun</ID>
    <ID>MaxLineLength:ReaderActivity.kt$ReaderActivity.ReaderConfig$PagerConfig.PageLayout.AUTOMATIC -&gt; resources.configuration.orientation == Configuration.ORIENTATION_LANDSCAPE</ID>
    <ID>MaxLineLength:ReaderAppBars.kt$/* SY --&gt; actions = { AppBarActions( listOfNotNull( AppBar.Action( title = stringResource( if (bookmarked) MR.strings.action_remove_bookmark else MR.strings.action_bookmark ), icon = if (bookmarked) Icons.Outlined.Bookmark else Icons.Outlined.BookmarkBorder, onClick = onToggleBookmarked, ), onOpenInWebView?.let { AppBar.OverflowAction( title = stringResource(MR.strings.action_open_in_web_view), onClick = it, ) }, onShare?.let { AppBar.OverflowAction( title = stringResource(MR.strings.action_share), onClick = it, ) }, ), ) }, SY &lt;-- */</ID>
    <ID>MaxLineLength:ReaderPageImageView.kt$ReaderPageImageView$if</ID>
    <ID>MaxLineLength:ReaderPreferences.kt$ReaderPreferences$fun readerBottomButtons()</ID>
    <ID>MaxLineLength:ReaderViewModel.kt$ReaderViewModel$getMergedChaptersByMangaId.await(manga.id, applyScanlatorFilter = true)</ID>
    <ID>MaxLineLength:Scaffold.kt$*</ID>
    <ID>MaxLineLength:SecureActivityDelegate.kt$SecureActivityDelegate.Companion$requireUnlock</ID>
    <ID>MaxLineLength:ShikimoriApi.kt$ShikimoriApi$track.library_id = it["id"]!!.jsonPrimitive.long // save id of the entry for possible future delete request</ID>
    <ID>MaxLineLength:SourceFeedScreen.kt$SourceFeedScreen$fun</ID>
    <ID>MaxLineLength:SourcesScreenModel.kt$SourcesScreenModel$SourceUiModel.Header(it.key.removePrefix(CATEGORY_KEY_PREFIX), it.value.firstOrNull()?.category != null)</ID>
    <ID>MaxLineLength:SourcesScreenModel.kt$SourcesScreenModel$private</ID>
    <ID>MaxLineLength:SpecificHostRateLimitInterceptor.kt$*</ID>
    <ID>MaxLineLength:SyncService.kt$SyncService$*</ID>
    <ID>MaxLineLength:SyncService.kt$SyncService$val</ID>
    <ID>MaxLineLength:TsuminoDescriptionAdapter.kt$binding.pages.text = context.pluralStringResource(SYMR.plurals.num_pages, meta.length ?: 0, meta.length ?: 0)</ID>
    <ID>MaxLineLength:TsuminoDescriptionAdapter.kt$binding.rating.text = (round((meta.averageRating ?: 0F) * 100.0) / 100.0).toString() + " - " + MetadataUIUtil.getRatingString(context, meta.averageRating?.times(2))</ID>
    <ID>MaxLineLength:WebViewUtil.kt$WebViewUtil$*</ID>
    <ID>MaxLineLength:WebtoonPageHolder.kt$WebtoonPageHolder$cropBorders = (viewer.config.imageCropBorders &amp;&amp; viewer.isContinuous) || (viewer.config.continuousCropBorders &amp;&amp; !viewer.isContinuous)</ID>
    <ID>MaximumLineLength:AnnotatedString.kt$ </ID>
    <ID>MaximumLineLength:ApiMangaParser.kt$ApiMangaParser$ </ID>
    <ID>MaximumLineLength:AzukiHandler.kt$AzukiHandler$ </ID>
    <ID>MaximumLineLength:BackupTracking.kt$ </ID>
    <ID>MaximumLineLength:BangumiInterceptor.kt$BangumiInterceptor$ </ID>
    <ID>MaximumLineLength:BatchAddScreen.kt$BatchAddScreen$ </ID>
    <ID>MaximumLineLength:BiometricTimesScreen.kt$BiometricTimesScreen$ </ID>
    <ID>MaximumLineLength:ComikeyHandler.kt$ComikeyHandler$ </ID>
    <ID>MaximumLineLength:DataSaver.kt$BandwidthHeroDataSaver$ </ID>
    <ID>MaximumLineLength:DataSaver.kt$WsrvNlDataSaver$ </ID>
    <ID>MaximumLineLength:DownloadPageLoader.kt$DownloadPageLoader$ </ID>
    <ID>MaximumLineLength:EHConfigurator.kt$EHConfigurator$ </ID>
    <ID>MaximumLineLength:EHHathPerksResponse.kt$EHHathPerksResponse$ </ID>
    <ID>MaximumLineLength:EHentaiDescriptionAdapter.kt$ </ID>
    <ID>MaximumLineLength:EHentaiUpdateWorker.kt$EHentaiUpdateWorker$ </ID>
    <ID>MaximumLineLength:EditMergedMangaItem.kt$EditMergedMangaItem$ </ID>
    <ID>MaximumLineLength:EditMergedMangaItem.kt$EditMergedMangaItem$class</ID>
    <ID>MaximumLineLength:EditMergedSettingsDialog.kt$ </ID>
    <ID>MaximumLineLength:EditMergedSettingsDialog.kt$EditMergedSettingsState$ </ID>
    <ID>MaximumLineLength:EditMergedSettingsHeaderAdapter.kt$EditMergedSettingsHeaderAdapter$ </ID>
    <ID>MaximumLineLength:EditMergedSettingsHeaderAdapter.kt$EditMergedSettingsHeaderAdapter$class</ID>
    <ID>MaximumLineLength:EnhancedFilePrinter.kt$EnhancedFilePrinter$ </ID>
    <ID>MaximumLineLength:ExtensionInstaller.kt$ExtensionInstaller$ </ID>
    <ID>MaximumLineLength:ExtensionManager.kt$ExtensionManager$ </ID>
    <ID>MaximumLineLength:ExtensionsScreenModel.kt$ExtensionsScreenModel$ </ID>
    <ID>MaximumLineLength:FavoritesSyncHelper.kt$FavoritesSyncHelper$ </ID>
    <ID>MaximumLineLength:FeedScreenModel.kt$FeedScreenModel$ </ID>
    <ID>MaximumLineLength:GalleryAdder.kt$GalleryAddEvent.Fail.UnknownSource$ </ID>
    <ID>MaximumLineLength:GalleryAdder.kt$GalleryAddEvent.Fail.UnknownType$ </ID>
    <ID>MaximumLineLength:GalleryAdder.kt$GalleryAdder$ </ID>
    <ID>MaximumLineLength:HBrowseDescriptionAdapter.kt$ </ID>
    <ID>MaximumLineLength:LibraryScreenModel.kt$LibraryScreenModel$ </ID>
    <ID>MaximumLineLength:LibraryTab.kt$LibraryTab$ </ID>
    <ID>MaximumLineLength:LibraryUpdateJob.kt$LibraryUpdateJob$ </ID>
    <ID>MaximumLineLength:LibraryUpdateNotifier.kt$LibraryUpdateNotifier.Companion$ </ID>
    <ID>MaximumLineLength:LocalFavoritesStorage.kt$LocalFavoritesStorage$ </ID>
    <ID>MaximumLineLength:LocalSource.kt$LocalSource$ </ID>
    <ID>MaximumLineLength:MangaChapterListItem.kt$ </ID>
    <ID>MaximumLineLength:MangaDex.kt$MangaDex$ </ID>
    <ID>MaximumLineLength:MangaDexDescriptionAdapter.kt$ </ID>
    <ID>MaximumLineLength:MangaDexFollowsScreenModel.kt$MangaDexFollowsScreenModel$ </ID>
    <ID>MaximumLineLength:MangaDexSimilarScreenModel.kt$MangaDexSimilarScreenModel$ </ID>
    <ID>MaximumLineLength:MangaScreen.kt$MangaScreen$ </ID>
    <ID>MaximumLineLength:MangaScreenModel.kt$MangaScreenModel$ </ID>
    <ID>MaximumLineLength:MangaScreenModel.kt$MangaScreenModel.State.Success$ </ID>
    <ID>MaximumLineLength:MdUtil.kt$MdUtil.Companion$ </ID>
    <ID>MaximumLineLength:MetadataViewScreen.kt$MetadataViewScreen$ </ID>
    <ID>MaximumLineLength:MigrationListScreen.kt$MigrationListScreen$ </ID>
    <ID>MaximumLineLength:MigrationListScreenModel.kt$MigrationListScreenModel$ </ID>
    <ID>MaximumLineLength:MigrationSourceItem.kt$MigrationSourceItem$ </ID>
    <ID>MaximumLineLength:MigrationSourceItem.kt$MigrationSourceItem$class</ID>
    <ID>MaximumLineLength:NotificationExtensions.kt$ </ID>
    <ID>MaximumLineLength:PageHandler.kt$PageHandler$ </ID>
    <ID>MaximumLineLength:PagePreviewScreen.kt$ </ID>
    <ID>MaximumLineLength:PagerConfig.kt$PagerConfig$ </ID>
    <ID>MaximumLineLength:PagerPageHolder.kt$PagerPageHolder$ </ID>
    <ID>MaximumLineLength:PagerViewer.kt$PagerViewer$ </ID>
    <ID>MaximumLineLength:PururinDescriptionAdapter.kt$ </ID>
    <ID>MaximumLineLength:ReaderActivity.kt$ReaderActivity$ </ID>
    <ID>MaximumLineLength:ReaderActivity.kt$ReaderActivity.Companion$ </ID>
    <ID>MaximumLineLength:ReaderActivity.kt$ReaderActivity.ReaderConfig$ </ID>
    <ID>MaximumLineLength:ReaderPageImageView.kt$ReaderPageImageView$ </ID>
    <ID>MaximumLineLength:ReaderPreferences.kt$ReaderPreferences$ </ID>
    <ID>MaximumLineLength:ReaderViewModel.kt$ReaderViewModel$ </ID>
    <ID>MaximumLineLength:SecureActivityDelegate.kt$SecureActivityDelegate.Companion$ </ID>
    <ID>MaximumLineLength:ShikimoriApi.kt$ShikimoriApi$ </ID>
    <ID>MaximumLineLength:SourceFeedScreen.kt$SourceFeedScreen$ </ID>
    <ID>MaximumLineLength:SourcesScreenModel.kt$SourcesScreenModel$ </ID>
    <ID>MaximumLineLength:SyncService.kt$SyncService$ </ID>
    <ID>MaximumLineLength:TsuminoDescriptionAdapter.kt$ </ID>
    <ID>MaximumLineLength:WebtoonPageHolder.kt$WebtoonPageHolder$ </ID>
    <ID>MayBeConst:TsuminoSearchMetadata.kt$TsuminoSearchMetadata.Companion$val BASE_URL = "https://www.tsumino.com"</ID>
    <ID>MemberNameEqualsClassName:ExtensionInstaller.kt$ExtensionInstaller$private val extensionInstaller = Injekt.get&lt;BasePreferences&gt;().extensionInstaller()</ID>
    <ID>ModifierClickableOrder:ScanlatorFilterDialog.kt$clickable { if (isExcluded) { mutableExcludedScanlators.remove(scanlator) } else { mutableExcludedScanlators.add(scanlator) } }</ID>
    <ID>ModifierMissing:AppBar.kt$AppBarActions</ID>
    <ID>ModifierMissing:AppThemePreferenceWidget.kt$AppThemePreviewItem</ID>
    <ID>ModifierMissing:AutoCompleteItem.kt$AutoCompleteItem</ID>
    <ID>ModifierMissing:AutoCompleteItem.kt$AutoCompleteTextField</ID>
    <ID>ModifierMissing:BiometricTimesContent.kt$BiometricTimesContent</ID>
    <ID>ModifierMissing:BiometricTimesScreen.kt$BiometricTimesScreen</ID>
    <ID>ModifierMissing:BottomReaderBar.kt$BottomReaderBar</ID>
    <ID>ModifierMissing:BrowseSourceComfortableGrid.kt$BrowseSourceComfortableGrid</ID>
    <ID>ModifierMissing:BrowseSourceCompactGrid.kt$BrowseSourceCompactGrid</ID>
    <ID>ModifierMissing:BrowseSourceEHentaiList.kt$BrowseSourceEHentaiList</ID>
    <ID>ModifierMissing:BrowseSourceEHentaiList.kt$BrowseSourceEHentaiListItem</ID>
    <ID>ModifierMissing:BrowseSourceList.kt$BrowseSourceList</ID>
    <ID>ModifierMissing:BrowseSourceScreen.kt$BrowseSourceContent</ID>
    <ID>ModifierMissing:BrowseSourceSimpleToolbar.kt$BrowseSourceSimpleToolbar</ID>
    <ID>ModifierMissing:BrowseSourceToolbar.kt$BrowseSourceToolbar</ID>
    <ID>ModifierMissing:BrowseTabWrapper.kt$BrowseTabWrapper</ID>
    <ID>ModifierMissing:CategoryScreen.kt$CategoryScreen</ID>
    <ID>ModifierMissing:ChapterListDialog.kt$ChapterListDialog</ID>
    <ID>ModifierMissing:ChapterNavigator.kt$ChapterNavigator</ID>
    <ID>ModifierMissing:ChapterNavigator.kt$ChapterNavigatorVert</ID>
    <ID>ModifierMissing:ChapterSettingsDialog.kt$ChapterSettingsDialog</ID>
    <ID>ModifierMissing:ChapterSettingsDialog.kt$ScanlatorFilterItem</ID>
    <ID>ModifierMissing:CollapsibleBox.kt$CollapsibleBox</ID>
    <ID>ModifierMissing:CommonMangaItem.kt$MangaComfortableGridItem</ID>
    <ID>ModifierMissing:CommonMangaItem.kt$MangaCompactGridItem</ID>
    <ID>ModifierMissing:CommonMangaItem.kt$MangaListItem</ID>
    <ID>ModifierMissing:CrashScreen.kt$CrashScreen</ID>
    <ID>ModifierMissing:EHDebugModeOverlay.kt$DebugModeOverlay</ID>
    <ID>ModifierMissing:EHentaiDescriptionAdapter.kt$EHentaiDescription</ID>
    <ID>ModifierMissing:EhLoginWebViewScreen.kt$EhLoginWebViewScreen</ID>
    <ID>ModifierMissing:EightMusesDescriptionAdapter.kt$EightMusesDescription</ID>
    <ID>ModifierMissing:ExtensionDetailsScreen.kt$ExtensionDetailsScreen</ID>
    <ID>ModifierMissing:ExtensionFilterScreen.kt$ExtensionFilterScreen</ID>
    <ID>ModifierMissing:ExtensionReposScreen.kt$ExtensionReposScreen</ID>
    <ID>ModifierMissing:ExtensionsScreen.kt$ExtensionScreen</ID>
    <ID>ModifierMissing:FeedScreen.kt$FeedScreen</ID>
    <ID>ModifierMissing:FeedScreen.kt$RadioSelector</ID>
    <ID>ModifierMissing:GlobalSearchCardRow.kt$GlobalSearchCardRow</ID>
    <ID>ModifierMissing:GlobalSearchResultItems.kt$GlobalSearchErrorResultItem</ID>
    <ID>ModifierMissing:GlobalSearchResultItems.kt$GlobalSearchLoadingResultItem</ID>
    <ID>ModifierMissing:GlobalSearchScreen.kt$GlobalSearchScreen</ID>
    <ID>ModifierMissing:GlobalSearchToolbar.kt$GlobalSearchToolbar</ID>
    <ID>ModifierMissing:HBrowseDescriptionAdapter.kt$HBrowseDescription</ID>
    <ID>ModifierMissing:HistoryScreen.kt$HistoryScreen</ID>
    <ID>ModifierMissing:HomeScreen.kt$HomeScreen$NavigationRailItem</ID>
    <ID>ModifierMissing:InfoScreen.kt$InfoScreen</ID>
    <ID>ModifierMissing:LibraryContent.kt$LibraryContent</ID>
    <ID>ModifierMissing:LibraryPager.kt$LibraryPager</ID>
    <ID>ModifierMissing:LibrarySettingsDialog.kt$LibrarySettingsDialog</ID>
    <ID>ModifierMissing:LogoHeader.kt$LogoHeader</ID>
    <ID>ModifierMissing:MangaCoverDialog.kt$MangaCoverDialog</ID>
    <ID>ModifierMissing:MangaDexDescriptionAdapter.kt$MangaDexDescription</ID>
    <ID>ModifierMissing:MangaDexFilterHeader.kt$MangaDexFilterHeader</ID>
    <ID>ModifierMissing:MangaInfoButtons.kt$MangaInfoButtons</ID>
    <ID>ModifierMissing:MangaScreen.kt$MangaScreenLargeImpl</ID>
    <ID>ModifierMissing:MigrateMangaScreen.kt$MigrateMangaScreen</ID>
    <ID>ModifierMissing:MigrateSearchScreen.kt$MigrateSearchScreen</ID>
    <ID>ModifierMissing:MigrateSourceScreen.kt$MigrateSourceScreen</ID>
    <ID>ModifierMissing:MigrationBottomSheetDialog.kt$MigrationBottomSheetDialog</ID>
    <ID>ModifierMissing:MigrationListScreen.kt$MigrationListScreen</ID>
    <ID>ModifierMissing:ModeSelectionDialog.kt$ModeSelectionDialog</ID>
    <ID>ModifierMissing:MoreScreen.kt$MoreScreen</ID>
    <ID>ModifierMissing:NHentaiDescriptionAdapter.kt$NHentaiDescription</ID>
    <ID>ModifierMissing:NamespaceTags.kt$NamespaceTags</ID>
    <ID>ModifierMissing:NewUpdateScreen.kt$NewUpdateScreen</ID>
    <ID>ModifierMissing:OnboardingScreen.kt$OnboardingScreen</ID>
    <ID>ModifierMissing:PageIndicatorText.kt$PageIndicatorText</ID>
    <ID>ModifierMissing:PagePreviewScreen.kt$PagePreviewScreen</ID>
    <ID>ModifierMissing:PagePreviews.kt$PagePreviews</ID>
    <ID>ModifierMissing:PreferenceGroupHeader.kt$PreferenceGroupHeader</ID>
    <ID>ModifierMissing:PreferenceScaffold.kt$PreferenceScaffold</ID>
    <ID>ModifierMissing:PururinDescriptionAdapter.kt$PururinDescription</ID>
    <ID>ModifierMissing:ReaderAppBars.kt$ReaderAppBars</ID>
    <ID>ModifierMissing:ReaderPageActionsDialog.kt$ReaderPageActionsDialog</ID>
    <ID>ModifierMissing:ReaderSettingsDialog.kt$ReaderSettingsDialog</ID>
    <ID>ModifierMissing:SavedSearchItem.kt$SavedSearchItem</ID>
    <ID>ModifierMissing:SectionCard.kt$SectionCard</ID>
    <ID>ModifierMissing:SettingsDebugScreen.kt$SettingsDebugScreen$FunctionList</ID>
    <ID>ModifierMissing:SettingsEhScreen.kt$SettingsEhScreen$FrontPageCategoriesDialogRow</ID>
    <ID>ModifierMissing:SettingsEhScreen.kt$SettingsEhScreen$LanguageDialogRow</ID>
    <ID>ModifierMissing:SettingsEhScreen.kt$SettingsEhScreen$LanguageDialogRowCheckbox</ID>
    <ID>ModifierMissing:SettingsEhScreen.kt$SettingsEhScreen$UpdaterStatisticsLoadingDialog</ID>
    <ID>ModifierMissing:SettingsItems.kt$CheckboxItem</ID>
    <ID>ModifierMissing:SettingsItems.kt$HeadingItem</ID>
    <ID>ModifierMissing:SettingsItems.kt$IconItem</ID>
    <ID>ModifierMissing:SettingsItems.kt$RadioItem</ID>
    <ID>ModifierMissing:SettingsItems.kt$SelectItem</ID>
    <ID>ModifierMissing:SettingsItems.kt$SettingsChipRow</ID>
    <ID>ModifierMissing:SettingsItems.kt$SettingsIconGrid</ID>
    <ID>ModifierMissing:SettingsItems.kt$SliderItem</ID>
    <ID>ModifierMissing:SettingsItems.kt$SortItem</ID>
    <ID>ModifierMissing:SettingsItems.kt$TextItem</ID>
    <ID>ModifierMissing:SettingsItems.kt$TriStateItem</ID>
    <ID>ModifierMissing:SettingsMainScreen.kt$SettingsMainScreen$Content</ID>
    <ID>ModifierMissing:SortTagContent.kt$SortTagContent</ID>
    <ID>ModifierMissing:SortTagScreen.kt$SortTagScreen</ID>
    <ID>ModifierMissing:SourceCategoryContent.kt$SourceCategoryContent</ID>
    <ID>ModifierMissing:SourceCategoryScreen.kt$SourceCategoryScreen</ID>
    <ID>ModifierMissing:SourceFeedScreen.kt$SourceFeedList</ID>
    <ID>ModifierMissing:SourceFeedScreen.kt$SourceFeedScreen</ID>
    <ID>ModifierMissing:SourceFilterDialog.kt$SourceFilterDialog</ID>
    <ID>ModifierMissing:SourcesFilterScreen.kt$SourcesFilterScreen</ID>
    <ID>ModifierMissing:SourcesScreen.kt$SourcesScreen</ID>
    <ID>ModifierMissing:StatsScreenContent.kt$StatsScreenContent</ID>
    <ID>ModifierMissing:TabbedScreen.kt$TabbedScreen</ID>
    <ID>ModifierMissing:Tabs.kt$TabText</ID>
    <ID>ModifierMissing:TrackInfoDialogHome.kt$TrackInfoDialogHome</ID>
    <ID>ModifierMissing:TrackInfoDialogSelector.kt$TrackChapterSelector</ID>
    <ID>ModifierMissing:TrackInfoDialogSelector.kt$TrackDateSelector</ID>
    <ID>ModifierMissing:TrackInfoDialogSelector.kt$TrackScoreSelector</ID>
    <ID>ModifierMissing:TrackInfoDialogSelector.kt$TrackStatusSelector</ID>
    <ID>ModifierMissing:TrackLogoIcon.kt$TrackLogoIcon</ID>
    <ID>ModifierMissing:TrackerSearch.kt$TrackerSearch</ID>
    <ID>ModifierMissing:TsuminoDescriptionAdapter.kt$TsuminoDescription</ID>
    <ID>ModifierMissing:UpdatesScreen.kt$UpdateScreen</ID>
    <ID>ModifierMissing:WebViewScreenContent.kt$WebViewScreenContent</ID>
    <ID>ModifierMissing:WheelPicker.kt$WheelPickerDefaults$Background</ID>
    <ID>ModifierMissing:WheelPicker.kt$WheelPickerDefaults$Item</ID>
    <ID>ModifierNotUsedAtRoot:DropdownMenu.kt$modifier = modifier</ID>
    <ID>ModifierNotUsedAtRoot:MangaChapterListItem.kt$modifier = modifier .selectedBackground(selected) .combinedClickable( onClick = onClick, onLongClick = onLongClick, ) .padding(start = 16.dp, top = 12.dp, end = 8.dp, bottom = 12.dp)</ID>
    <ID>ModifierNotUsedAtRoot:TrackingPreferenceWidget.kt$modifier = modifier .clickable(enabled = onClick != null, onClick = { onClick?.invoke() }) .fillMaxWidth() .padding(horizontal = PrefsHorizontalPadding, vertical = 8.dp)</ID>
    <ID>ModifierWithoutDefault:BiometricTimesListItem.kt$modifier</ID>
    <ID>ModifierWithoutDefault:Chip.kt$modifier</ID>
    <ID>ModifierWithoutDefault:MigrationActionIcon.kt$modifier</ID>
    <ID>ModifierWithoutDefault:MigrationItem.kt$modifier</ID>
    <ID>ModifierWithoutDefault:MigrationItemResult.kt$modifier</ID>
    <ID>ModifierWithoutDefault:PagePreviews.kt$modifier</ID>
    <ID>ModifierWithoutDefault:ReaderAppBars.kt$modifier</ID>
    <ID>ModifierWithoutDefault:SortTagListItem.kt$modifier</ID>
    <ID>ModifierWithoutDefault:SourceCategoryListItem.kt$modifier</ID>
    <ID>ModifierWithoutDefault:SourcesFilterScreen.kt$modifier</ID>
    <ID>MultiLineIfElse:SettingsAppearanceScreen.kt$SettingsAppearanceScreen$pluralStringResource( SYMR.plurals.row_count, previewsRowCount, previewsRowCount, )</ID>
    <ID>MultiLineIfElse:SettingsAppearanceScreen.kt$SettingsAppearanceScreen$stringResource(MR.strings.disabled)</ID>
    <ID>NestedBlockDepth:Anilist.kt$Anilist$override suspend fun update(track: Track, didReadChapter: Boolean): Track</ID>
    <ID>NestedBlockDepth:ApiMangaParser.kt$ApiMangaParser$fun parseIntoMetadata( metadata: MangaDexSearchMetadata, mangaDto: MangaDto, simpleChapters: List&lt;String&gt;, statistics: StatisticsMangaDto?, )</ID>
    <ID>NestedBlockDepth:AppLanguageScreen.kt$AppLanguageScreen$private fun getLangs(context: Context): ImmutableList&lt;Language&gt;</ID>
    <ID>NestedBlockDepth:BackupRestorer.kt$BackupRestorer$private fun writeErrorLog(): File</ID>
    <ID>NestedBlockDepth:BrowseSourceScreenModel.kt$BrowseSourceScreenModel$fun searchGenre(genreName: String)</ID>
    <ID>NestedBlockDepth:ChapterLoader.kt$ChapterLoader$private fun getPageLoader(chapter: ReaderChapter): PageLoader</ID>
    <ID>NestedBlockDepth:CloseableExtensions.kt$inline fun &lt;T : Closeable?&gt; Array&lt;T&gt;.use(block: () -&gt; Unit)</ID>
    <ID>NestedBlockDepth:ContextExtensions.kt$fun Context.openInBrowser(uri: Uri, forceDefaultBrowser: Boolean = false)</ID>
    <ID>NestedBlockDepth:DownloadQueueScreenModel.kt$DownloadQueueScreenModel.&lt;no name provided&gt;$override fun onMenuItemClick(position: Int, menuItem: MenuItem)</ID>
    <ID>NestedBlockDepth:Downloader.kt$Downloader$private fun archiveChapter( mangaDir: UniFile, dirname: String, tmpDir: UniFile, )</ID>
    <ID>NestedBlockDepth:EHentai.kt$EHentai$override suspend fun parseIntoMetadata(metadata: EHentaiSearchMetadata, input: Document)</ID>
    <ID>NestedBlockDepth:EHentai.kt$EHentai$private fun extendedGenericMangaParse(doc: Document)</ID>
    <ID>NestedBlockDepth:EHentaiUpdateWorker.kt$EHentaiUpdateWorker$private suspend fun startUpdating()</ID>
    <ID>NestedBlockDepth:EXHMigrations.kt$EXHMigrations$fun upgrade( context: Context, preferenceStore: PreferenceStore, basePreferences: BasePreferences, uiPreferences: UiPreferences, networkPreferences: NetworkPreferences, sourcePreferences: SourcePreferences, securityPreferences: SecurityPreferences, libraryPreferences: LibraryPreferences, readerPreferences: ReaderPreferences, backupPreferences: BackupPreferences, trackerManager: TrackerManager, pagePreviewCache: PagePreviewCache, ): Boolean</ID>
    <ID>NestedBlockDepth:ExtensionInstaller.kt$ExtensionInstaller$fun installApk(downloadId: Long, uri: Uri)</ID>
    <ID>NestedBlockDepth:FilterHandler.kt$FilterHandler$fun getQueryMap(filters: FilterList): Map&lt;String, Any&gt;</ID>
    <ID>NestedBlockDepth:GalleryAdder.kt$GalleryAdder$suspend fun addGallery( context: Context, url: String, fav: Boolean = false, forceSource: UrlImportableSource? = null, throttleFunc: suspend () -&gt; Unit = {}, retry: Int = 1, ): GalleryAddEvent</ID>
    <ID>NestedBlockDepth:GetMergedChaptersByMangaId.kt$GetMergedChaptersByMangaId$private fun dedupeByPriority( mangaReferences: List&lt;MergedMangaReference&gt;, chapterList: List&lt;Chapter&gt;, ): List&lt;Chapter&gt;</ID>
    <ID>NestedBlockDepth:GoogleDriveSyncService.kt$GoogleDriveSyncService$override suspend fun beforeSync()</ID>
    <ID>NestedBlockDepth:HBrowse.kt$HBrowse$override suspend fun parseIntoMetadata(metadata: HBrowseSearchMetadata, input: Document)</ID>
    <ID>NestedBlockDepth:ImageUtil.kt$ImageUtil$fun chooseBackground(context: Context, imageStream: InputStream): Drawable</ID>
    <ID>NestedBlockDepth:KavitaApi.kt$KavitaApi$fun getNewToken(apiUrl: String, apiKey: String): String?</ID>
    <ID>NestedBlockDepth:KavitaApi.kt$KavitaApi$private fun getLatestChapterRead(url: String): Double</ID>
    <ID>NestedBlockDepth:Kitsu.kt$Kitsu$override suspend fun update(track: Track, didReadChapter: Boolean): Track</ID>
    <ID>NestedBlockDepth:LibraryUpdateJob.kt$LibraryUpdateJob$private fun writeErrorFile(errors: List&lt;Pair&lt;Manga, String?&gt;&gt;): File</ID>
    <ID>NestedBlockDepth:LocalSource.kt$LocalSource$private fun copyComicInfoFile(comicInfoFileStream: InputStream, folder: UniFile): UniFile?</ID>
    <ID>NestedBlockDepth:LocalSource.kt$LocalSource$private fun copyComicInfoFileFromArchive(chapterArchives: List&lt;UniFile&gt;, folder: UniFile): UniFile?</ID>
    <ID>NestedBlockDepth:LocalSource.kt$LocalSource$private fun updateCover(chapter: SChapter, manga: SManga): UniFile?</ID>
    <ID>NestedBlockDepth:MigrationListScreenModel.kt$MigrationListScreenModel$private suspend fun migrateMangaInternal( prevManga: Manga, manga: Manga, replace: Boolean, )</ID>
    <ID>NestedBlockDepth:MigrationListScreenModel.kt$MigrationListScreenModel$private suspend fun runMigrations(mangas: List&lt;MigratingManga&gt;)</ID>
    <ID>NestedBlockDepth:Migrations.kt$Migrations$fun upgrade( context: Context, preferenceStore: PreferenceStore, basePreferences: BasePreferences, uiPreferences: UiPreferences, networkPreferences: NetworkPreferences, sourcePreferences: SourcePreferences, securityPreferences: SecurityPreferences, libraryPreferences: LibraryPreferences, readerPreferences: ReaderPreferences, backupPreferences: BackupPreferences, trackerManager: TrackerManager, ): Boolean</ID>
    <ID>NestedBlockDepth:MyAnimeList.kt$MyAnimeList$override suspend fun update(track: Track, didReadChapter: Boolean): Track</ID>
    <ID>NestedBlockDepth:PagerViewerAdapter.kt$PagerViewerAdapter$private fun setJoinedItems(useSecondPage: Boolean = false)</ID>
    <ID>NestedBlockDepth:Pururin.kt$Pururin$override suspend fun parseIntoMetadata(metadata: PururinSearchMetadata, input: Document)</ID>
    <ID>NestedBlockDepth:RaisedSearchMetadata.kt$RaisedSearchMetadata$fun tagsToDescription()</ID>
    <ID>NestedBlockDepth:SearchEngine.kt$SearchEngine$fun queryToSql(q: List&lt;QueryComponent&gt;): Pair&lt;String, List&lt;String&gt;&gt;</ID>
    <ID>NestedBlockDepth:SmartSearchEngine.kt$SmartSearchEngine$private fun removeTextInBrackets(text: String, readForward: Boolean): String</ID>
    <ID>NestedBlockDepth:SyncChaptersWithSource.kt$SyncChaptersWithSource$suspend fun await( rawSourceChapters: List&lt;SChapter&gt;, manga: Manga, source: Source, manualFetch: Boolean = false, fetchWindow: Pair&lt;Long, Long&gt; = Pair(0, 0), ): List&lt;Chapter&gt;</ID>
    <ID>NestedBlockDepth:UniFileExtensions.kt$fun UniFile.unzip(destination: File, onlyCopyImages: Boolean = false)</ID>
    <ID>NestedBlockDepth:UniFileTempFileManager.kt$UniFileTempFileManager$fun createTempFile(file: UniFile): File</ID>
    <ID>NestedBlockDepth:WebtoonRecyclerView.kt$WebtoonRecyclerView.Detector$override fun onTouchEvent(ev: MotionEvent): Boolean</ID>
    <ID>NestedBlockDepth:WebtoonViewer.kt$WebtoonViewer$fun scrollDown()</ID>
    <ID>NewLineAtEndOfFile:Commands.kt$.Commands.kt</ID>
    <ID>NoConsecutiveBlankLines:LocalesConfigPlugin.kt$ </ID>
    <ID>NoTrailingSpaces:ReaderViewModel.kt$ReaderViewModel$ </ID>
    <ID>NoUnusedImports:BackupManga.kt$eu.kanade.tachiyomi.data.backup.models.BackupManga.kt</ID>
    <ID>NoUnusedImports:CreateBackupScreen.kt$eu.kanade.presentation.more.settings.screen.data.CreateBackupScreen.kt</ID>
    <ID>NoUnusedImports:TachiyomiImageDecoder.kt$eu.kanade.tachiyomi.data.coil.TachiyomiImageDecoder.kt</ID>
    <ID>PreviewPublic:NamespaceTags.kt$NamespaceTagsPreview</ID>
    <ID>PreviewPublic:Scrollbar.kt$LazyListHorizontalScrollbarPreview</ID>
    <ID>PreviewPublic:Scrollbar.kt$LazyListScrollbarPreview</ID>
    <ID>PrintStackTrace:EnhancedFilePrinter.kt$EnhancedFilePrinter.Worker$e</ID>
    <ID>PrintStackTrace:EnhancedFilePrinter.kt$EnhancedFilePrinter.Writer$e</ID>
    <ID>RethrowCaughtException:LocalSource.kt$LocalSource$throw e</ID>
    <ID>ReturnCount:AndroidSourceManager.kt$AndroidSourceManager$private suspend fun createStubSource(id: Long): StubSource</ID>
    <ID>ReturnCount:BackupCreateJob.kt$BackupCreateJob$override suspend fun doWork(): Result</ID>
    <ID>ReturnCount:BrowseSourceScreen.kt$@Composable fun BrowseSourceContent( source: Source?, mangaList: LazyPagingItems&lt;StateFlow&lt;/* SY --&gt; */Pair&lt;Manga, RaisedSearchMetadata?&gt;/* SY &lt;-- */&gt;&gt;, columns: GridCells, // SY --&gt; ehentaiBrowseDisplayMode: Boolean, // SY &lt;-- displayMode: LibraryDisplayMode, snackbarHostState: SnackbarHostState, contentPadding: PaddingValues, // SY --&gt; onWebViewClick: (() -&gt; Unit)?, onHelpClick: (() -&gt; Unit)?, onLocalSourceHelpClick: (() -&gt; Unit)?, // SY &lt;-- onMangaClick: (Manga) -&gt; Unit, onMangaLongClick: (Manga) -&gt; Unit, )</ID>
    <ID>ReturnCount:ChapterRecognition.kt$ChapterRecognition$fun parseChapterNumber( mangaTitle: String, chapterName: String, chapterNumber: Double? = null, ): Double</ID>
    <ID>ReturnCount:ChapterRecognition.kt$ChapterRecognition$private fun checkForDecimal(decimal: String?, alpha: String?): Double</ID>
    <ID>ReturnCount:EHentai.kt$EHentai.ThumbnailPreviewInterceptor$override fun intercept(chain: Interceptor.Chain): Response</ID>
    <ID>ReturnCount:EXHMigrations.kt$EXHMigrations$fun upgrade( context: Context, preferenceStore: PreferenceStore, basePreferences: BasePreferences, uiPreferences: UiPreferences, networkPreferences: NetworkPreferences, sourcePreferences: SourcePreferences, securityPreferences: SecurityPreferences, libraryPreferences: LibraryPreferences, readerPreferences: ReaderPreferences, backupPreferences: BackupPreferences, trackerManager: TrackerManager, pagePreviewCache: PagePreviewCache, ): Boolean</ID>
    <ID>ReturnCount:EhLoginActivity.kt$EhLoginActivity$private fun applyExHentaiCookies(url: String, customIgneous: String?): Boolean</ID>
    <ID>ReturnCount:ExtensionInstallService.kt$ExtensionInstallService$override fun onStartCommand(intent: Intent?, flags: Int, startId: Int): Int</ID>
    <ID>ReturnCount:ExtensionInstallerPreference.kt$ExtensionInstallerPreference$private fun check(value: ExtensionInstaller): ExtensionInstaller</ID>
    <ID>ReturnCount:ExtensionLoader.kt$ExtensionLoader$fun installPrivateExtensionFile(context: Context, file: File): Boolean</ID>
    <ID>ReturnCount:ExtensionLoader.kt$ExtensionLoader$private fun loadExtension(context: Context, extensionInfo: ExtensionInfo): LoadResult</ID>
    <ID>ReturnCount:ExtensionLoader.kt$ExtensionLoader$private fun selectExtensionPackage(shared: ExtensionInfo?, private: ExtensionInfo?): ExtensionInfo?</ID>
    <ID>ReturnCount:FavoritesSyncHelper.kt$FavoritesSyncHelper$private suspend fun beginSync()</ID>
    <ID>ReturnCount:GalleryAdder.kt$GalleryAdder$suspend fun addGallery( context: Context, url: String, fav: Boolean = false, forceSource: UrlImportableSource? = null, throttleFunc: suspend () -&gt; Unit = {}, retry: Int = 1, ): GalleryAddEvent</ID>
    <ID>ReturnCount:GoogleDriveSyncService.kt$GoogleDriveSyncService$override suspend fun pullSyncData(): SyncData?</ID>
    <ID>ReturnCount:HttpPageLoader.kt$HttpPageLoader$private fun preloadNextPages(currentPage: ReaderPage, amount: Int): List&lt;PriorityPage&gt;</ID>
    <ID>ReturnCount:ImageUtil.kt$ImageUtil$fun chooseBackground(context: Context, imageStream: InputStream): Drawable</ID>
    <ID>ReturnCount:KavitaApi.kt$KavitaApi$fun getNewToken(apiUrl: String, apiKey: String): String?</ID>
    <ID>ReturnCount:KavitaApi.kt$KavitaApi$private fun getLatestChapterRead(url: String): Double</ID>
    <ID>ReturnCount:LibraryUpdateJob.kt$LibraryUpdateJob$override suspend fun doWork(): Result</ID>
    <ID>ReturnCount:LibraryUpdateJob.kt$LibraryUpdateJob$private suspend fun updateManga(manga: Manga, fetchWindow: Pair&lt;Long, Long&gt;): List&lt;Chapter&gt;</ID>
    <ID>ReturnCount:LibraryUpdateJob.kt$LibraryUpdateJob.Companion$fun startNow( context: Context, category: Category? = null, target: Target = Target.CHAPTERS, // SY --&gt; group: Int = LibraryGroup.BY_DEFAULT, groupExtra: String? = null, // SY &lt;-- ): Boolean</ID>
    <ID>ReturnCount:LocalCoverManager.kt$LocalCoverManager$actual fun update( manga: SManga, inputStream: InputStream, // SY --&gt; encrypted: Boolean, // SY &lt;-- ): UniFile?</ID>
    <ID>ReturnCount:LocalSource.kt$LocalSource$private fun copyComicInfoFileFromArchive(chapterArchives: List&lt;UniFile&gt;, folder: UniFile): UniFile?</ID>
    <ID>ReturnCount:MainActivity.kt$MainActivity$private fun handleIntentAction(intent: Intent, navigator: Navigator): Boolean</ID>
    <ID>ReturnCount:MangaCoverFetcher.kt$MangaCoverFetcher$private suspend fun httpLoader(): FetchResult</ID>
    <ID>ReturnCount:MangaDexAuthInterceptor.kt$MangaDexAuthInterceptor$override fun intercept(chain: Interceptor.Chain): Response</ID>
    <ID>ReturnCount:MangaExtensions.kt$fun Manga.shouldDownloadNewChapters(dbCategories: List&lt;Long&gt;, preferences: DownloadPreferences): Boolean</ID>
    <ID>ReturnCount:MdUtil.kt$MdUtil.Companion$fun getMissingChapterCount(chapters: List&lt;SChapter&gt;, mangaStatus: Int): String?</ID>
    <ID>ReturnCount:Migrations.kt$Migrations$fun upgrade( context: Context, preferenceStore: PreferenceStore, basePreferences: BasePreferences, uiPreferences: UiPreferences, networkPreferences: NetworkPreferences, sourcePreferences: SourcePreferences, securityPreferences: SecurityPreferences, libraryPreferences: LibraryPreferences, readerPreferences: ReaderPreferences, backupPreferences: BackupPreferences, trackerManager: TrackerManager, ): Boolean</ID>
    <ID>ReturnCount:MyAnimeList.kt$MyAnimeList$override suspend fun search(query: String): List&lt;TrackSearch&gt;</ID>
    <ID>ReturnCount:NetworkExtensions.kt$fun Context.isConnectedToWifi(): Boolean</ID>
    <ID>ReturnCount:PageHandler.kt$PageHandler$@Suppress("UNCHECKED_CAST") private fun updateExtensionVariable(mangadex: Source, atHomeRequestUrl: String)</ID>
    <ID>ReturnCount:PagePreviewFetcher.kt$PagePreviewFetcher$private suspend fun httpLoader(): FetchResult</ID>
    <ID>ReturnCount:PagerPageHolder.kt$PagerPageHolder$private fun mergePages(imageStream: InputStream, imageStream2: InputStream?): InputStream</ID>
    <ID>ReturnCount:PagerViewer.kt$PagerViewer$override fun handleKeyEvent(event: KeyEvent): Boolean</ID>
    <ID>ReturnCount:PagerViewerAdapter.kt$PagerViewerAdapter$fun onPageSplit(currentPage: Any?, newPage: InsertPage)</ID>
    <ID>ReturnCount:ReaderActivity.kt$ReaderActivity$override fun onKeyUp(keyCode: Int, event: KeyEvent?): Boolean</ID>
    <ID>ReturnCount:ReaderViewModel.kt$ReaderViewModel$fun saveImages()</ID>
    <ID>ReturnCount:ReaderViewModel.kt$ReaderViewModel$fun setAsCover(useExtraPage: Boolean)</ID>
    <ID>ReturnCount:ReaderViewModel.kt$ReaderViewModel$fun shareImages()</ID>
    <ID>ReturnCount:ReorderSortTag.kt$ReorderSortTag$fun await(tag: String, newPosition: Int): Result</ID>
    <ID>ReturnCount:SyncManager.kt$SyncManager$private fun areChaptersDifferent(localChapters: List&lt;Chapters&gt;, remoteChapters: List&lt;BackupChapter&gt;): Boolean</ID>
    <ID>ReturnCount:SyncManager.kt$SyncManager$private suspend fun isMangaDifferent(localManga: Manga, remoteManga: BackupManga): Boolean</ID>
    <ID>ReturnCount:SyncManager.kt$SyncManager$suspend fun syncData()</ID>
    <ID>ReturnCount:TimeRange.kt$TimeRange.Companion$fun fromPreferenceString(timeRange: String): TimeRange?</ID>
    <ID>ReturnCount:WebViewInterceptor.kt$WebViewInterceptor$override fun intercept(chain: Interceptor.Chain): Response</ID>
    <ID>ReturnCount:WebViewInterceptor.kt$private fun isRequestHeaderSafe(_name: String, _value: String): Boolean</ID>
    <ID>ReturnCount:WebtoonFrame.kt$WebtoonFrame$override fun dispatchTouchEvent(ev: MotionEvent): Boolean</ID>
    <ID>ReturnCount:WebtoonRecyclerView.kt$WebtoonRecyclerView.Detector$override fun onTouchEvent(ev: MotionEvent): Boolean</ID>
    <ID>ReturnCount:WebtoonViewer.kt$WebtoonViewer$override fun handleKeyEvent(event: KeyEvent): Boolean</ID>
    <ID>SerialVersionUIDInSerializableClass:Category.kt$Category : Serializable</ID>
    <ID>SerialVersionUIDInSerializableClass:Manga.kt$Manga : Serializable</ID>
    <ID>SerialVersionUIDInSerializableClass:MigrationProcedureConfig.kt$MigrationProcedureConfig : Serializable</ID>
    <ID>SerialVersionUIDInSerializableClass:SourcesScreen.kt$SourcesScreen$SmartSearchConfig : Serializable</ID>
    <ID>SerialVersionUIDInSerializableClass:Track.kt$Track : Serializable</ID>
    <ID>SpreadOperator:App.kt$App$( logConfig, *printers.toTypedArray(), )</ID>
    <ID>SpreadOperator:ChapterRepositoryImpl.kt$ChapterRepositoryImpl$(*chapterUpdates.toTypedArray())</ID>
    <ID>SpreadOperator:ChapterSanitizer.kt$ChapterSanitizer$(*CHAPTER_TRIM_CHARS)</ID>
    <ID>SpreadOperator:LibraryScreenModel.kt$LibraryScreenModel$(*prefFlows)</ID>
    <ID>SpreadOperator:LibraryUpdateJob.kt$LibraryUpdateJob$(true, *newReadChapters.toTypedArray())</ID>
    <ID>SpreadOperator:MangaMergeRepositoryImpl.kt$MangaMergeRepositoryImpl$(*values.toTypedArray())</ID>
    <ID>SpreadOperator:MangaRepositoryImpl.kt$MangaRepositoryImpl$(*mangaUpdates.toTypedArray())</ID>
    <ID>SpreadOperator:ReaderViewModel.kt$ReaderViewModel$(true, *it.toTypedArray())</ID>
    <ID>SpreadOperator:SourcesScreenModel.kt$SourcesScreenModel$( SourceUiModel.Header(it.key.removePrefix(CATEGORY_KEY_PREFIX), it.value.firstOrNull()?.category != null), *it.value.map { source -&gt; SourceUiModel.Item(source) }.toTypedArray(), )</ID>
    <ID>SpreadOperator:TrackRepositoryImpl.kt$TrackRepositoryImpl$(*tracks.toTypedArray())</ID>
    <ID>SwallowedException:AboutScreen.kt$AboutScreen$e: Exception</ID>
    <ID>SwallowedException:AndroidPreference.kt$AndroidPreference$e: ClassCastException</ID>
    <ID>SwallowedException:AndroidPreference.kt$AndroidPreference.Object$e: Exception</ID>
    <ID>SwallowedException:Anilist.kt$Anilist$e: ClassCastException</ID>
    <ID>SwallowedException:Anilist.kt$Anilist$e: Exception</ID>
    <ID>SwallowedException:Anilist.kt$Anilist$e: Throwable</ID>
    <ID>SwallowedException:AnilistModels.kt$ALManga$e: Exception</ID>
    <ID>SwallowedException:BackupRestorer.kt$BackupRestorer$e: Exception</ID>
    <ID>SwallowedException:Bangumi.kt$Bangumi$e: Exception</ID>
    <ID>SwallowedException:Bangumi.kt$Bangumi$e: Throwable</ID>
    <ID>SwallowedException:BrowseIcons.kt$e: Exception</ID>
    <ID>SwallowedException:ChapterCache.kt$ChapterCache$e: IOException</ID>
    <ID>SwallowedException:ChapterLoader.kt$ChapterLoader$e: UnsupportedRarV5Exception</ID>
    <ID>SwallowedException:ContextExtensions.kt$e: Exception</ID>
    <ID>SwallowedException:ContextExtensions.kt$e: PackageManager.NameNotFoundException</ID>
    <ID>SwallowedException:CrashLogUtil.kt$CrashLogUtil$e: Throwable</ID>
    <ID>SwallowedException:CreateBackupScreen.kt$CreateBackupScreen$e: ActivityNotFoundException</ID>
    <ID>SwallowedException:CustomMangaRepositoryImpl.kt$CustomMangaRepositoryImpl$e: Exception</ID>
    <ID>SwallowedException:DeviceUtil.kt$DeviceUtil$e: Exception</ID>
    <ID>SwallowedException:DownloadPendingDeleter.kt$DownloadPendingDeleter$e: Exception</ID>
    <ID>SwallowedException:DownloadStore.kt$DownloadStore$e: Exception</ID>
    <ID>SwallowedException:Downloader.kt$Downloader$e: Throwable</ID>
    <ID>SwallowedException:EHNetworkLogging.kt$ex: Exception</ID>
    <ID>SwallowedException:EHentaiUpdateWorker.kt$EHentaiUpdateWorker$e: Exception</ID>
    <ID>SwallowedException:EXHMigrations.kt$EXHMigrations$e: Exception</ID>
    <ID>SwallowedException:EXHMigrations.kt$EXHMigrations$e: URISyntaxException</ID>
    <ID>SwallowedException:EXHMigrations.kt$EXHMigrations.MangaConfig.Companion$e: Exception</ID>
    <ID>SwallowedException:EnhancedFilePrinter.kt$EnhancedFilePrinter.Writer$e: IOException</ID>
    <ID>SwallowedException:ExceptionUtil.kt$t: Throwable</ID>
    <ID>SwallowedException:ExtensionLoader.kt$ExtensionLoader$error: PackageManager.NameNotFoundException</ID>
    <ID>SwallowedException:FeedScreenModel.kt$FeedScreenModel$e: Exception</ID>
    <ID>SwallowedException:GalleryAdder.kt$GalleryAdder$e: Exception</ID>
    <ID>SwallowedException:GetChapterByUrlAndMangaId.kt$GetChapterByUrlAndMangaId$e: Exception</ID>
    <ID>SwallowedException:GetPagePreviews.kt$GetPagePreviews$e: Exception</ID>
    <ID>SwallowedException:HttpSource.kt$HttpSource$e: URISyntaxException</ID>
    <ID>SwallowedException:ImageUtil.kt$ImageUtil$e: Exception</ID>
    <ID>SwallowedException:Kavita.kt$Kavita$e: Exception</ID>
    <ID>SwallowedException:KavitaApi.kt$KavitaApi$e: SocketTimeoutException</ID>
    <ID>SwallowedException:Kitsu.kt$Kitsu$e: Exception</ID>
    <ID>SwallowedException:KitsuModels.kt$KitsuSearchManga$e: IllegalArgumentException</ID>
    <ID>SwallowedException:Komga.kt$Komga$e: Exception</ID>
    <ID>SwallowedException:LibrarySortMode.kt$LibrarySort.Companion$e: Exception</ID>
    <ID>SwallowedException:LibraryUpdateJob.kt$LibraryUpdateJob$e: Exception</ID>
    <ID>SwallowedException:LocalSource.kt$LocalSource$e: Format.UnknownFormatException</ID>
    <ID>SwallowedException:MangaScreen.kt$MangaScreen$e: Exception</ID>
    <ID>SwallowedException:MangaUpdates.kt$MangaUpdates$e: Exception</ID>
    <ID>SwallowedException:MangaUpdatesApi.kt$MangaUpdatesApi$e: Exception</ID>
    <ID>SwallowedException:MdUtil.kt$MdUtil.Companion$e: Exception</ID>
    <ID>SwallowedException:MetadataUpdateJob.kt$MetadataUpdateJob$e: Exception</ID>
    <ID>SwallowedException:MigrationListScreenModel.kt$MigrationListScreenModel$e: CancellationException</ID>
    <ID>SwallowedException:MigrationListScreenModel.kt$MigrationListScreenModel$e: Exception</ID>
    <ID>SwallowedException:MyAnimeList.kt$MyAnimeList$e: Exception</ID>
    <ID>SwallowedException:MyAnimeList.kt$MyAnimeList$e: Throwable</ID>
    <ID>SwallowedException:MyAnimeListApi.kt$MyAnimeListApi$e: Exception</ID>
    <ID>SwallowedException:OkHttpExtensions.kt$ex: Throwable</ID>
    <ID>SwallowedException:PagePreviewCache.kt$PagePreviewCache$e: Exception</ID>
    <ID>SwallowedException:PagePreviewCache.kt$PagePreviewCache$e: IOException</ID>
    <ID>SwallowedException:Pager.kt$Pager$e: IllegalArgumentException</ID>
    <ID>SwallowedException:Pager.kt$Pager$e: IndexOutOfBoundsException</ID>
    <ID>SwallowedException:Pager.kt$Pager$e: NullPointerException</ID>
    <ID>SwallowedException:PreferenceStore.kt$e: IllegalArgumentException</ID>
    <ID>SwallowedException:RarPageLoader.kt$RarPageLoader$e: Exception</ID>
    <ID>SwallowedException:ReaderActivity.kt$ReaderActivity$e: ArrayIndexOutOfBoundsException</ID>
    <ID>SwallowedException:ReaderViewModel.kt$ReaderViewModel$e: Exception</ID>
    <ID>SwallowedException:SettingsAdvancedScreen.kt$SettingsAdvancedScreen$e: ActivityNotFoundException</ID>
    <ID>SwallowedException:SettingsDataScreen.kt$SettingsDataScreen$e: ActivityNotFoundException</ID>
    <ID>SwallowedException:Shikimori.kt$Shikimori$e: Exception</ID>
    <ID>SwallowedException:Shikimori.kt$Shikimori$e: Throwable</ID>
    <ID>SwallowedException:SourceFeedScreenModel.kt$SourceFeedScreenModel$e: Exception</ID>
    <ID>SwallowedException:StorageStep.kt$StorageStep$e: ActivityNotFoundException</ID>
    <ID>SwallowedException:Suwayomi.kt$Suwayomi$e: Exception</ID>
    <ID>SwallowedException:TrackInfoDialog.kt$TrackInfoDialogHomeScreen.Model$e: Exception</ID>
    <ID>SwallowedException:UrlImportableSource.kt$UrlImportableSource$e: URISyntaxException</ID>
    <ID>ThrowingExceptionsWithoutMessageOrCause:MangaScreenModel.kt$MangaScreenModel$IllegalStateException()</ID>
    <ID>ThrowingExceptionsWithoutMessageOrCause:OkHttpExtensions.kt$Exception()</ID>
    <ID>ThrowingExceptionsWithoutMessageOrCause:PackageInstallerInstaller.kt$PackageInstallerInstaller$IllegalStateException()</ID>
    <ID>ThrowingExceptionsWithoutMessageOrCause:ShizukuInstaller.kt$ShizukuInstaller$IllegalStateException()</ID>
    <ID>ThrowingExceptionsWithoutMessageOrCause:TrackInfoDialog.kt$TrackInfoDialogHomeScreen.Model$Exception()</ID>
    <ID>ThrowsCount:BackupCreator.kt$BackupCreator$suspend fun backup(uri: Uri, options: BackupOptions): String</ID>
    <ID>ThrowsCount:EHentaiUpdateWorker.kt$EHentaiUpdateWorker$private suspend fun updateEntryAndGetChapters(manga: Manga): Pair&lt;List&lt;Chapter&gt;, List&lt;Chapter&gt;&gt;</ID>
    <ID>ThrowsCount:FileExtensions.kt$fun File.copyAndSetReadOnlyTo(target: File, overwrite: Boolean = false, bufferSize: Int = DEFAULT_BUFFER_SIZE): File</ID>
    <ID>ThrowsCount:KavitaApi.kt$KavitaApi$fun getNewToken(apiUrl: String, apiKey: String): String?</ID>
    <ID>ThrowsCount:LocalSource.kt$LocalSource$fun getFormat(chapter: SChapter): Format</ID>
    <ID>ThrowsCount:MangaScreenModel.kt$MangaScreenModel$suspend fun smartSearchMerge(manga: Manga, originalMangaId: Long): Manga</ID>
    <ID>ThrowsCount:MigrationListScreenModel.kt$MigrationListScreenModel$private suspend fun runMigrations(mangas: List&lt;MigratingManga&gt;)</ID>
    <ID>TooGenericExceptionCaught:AboutScreen.kt$AboutScreen$e: Exception</ID>
    <ID>TooGenericExceptionCaught:AddTracks.kt$AddTracks$e: Exception</ID>
    <ID>TooGenericExceptionCaught:AndroidPreference.kt$AndroidPreference.Object$e: Exception</ID>
    <ID>TooGenericExceptionCaught:Anilist.kt$Anilist$e: Exception</ID>
    <ID>TooGenericExceptionCaught:Anilist.kt$Anilist$e: Throwable</ID>
    <ID>TooGenericExceptionCaught:AnilistModels.kt$ALManga$e: Exception</ID>
    <ID>TooGenericExceptionCaught:ApiMangaParser.kt$ApiMangaParser$e: Exception</ID>
    <ID>TooGenericExceptionCaught:App.kt$App$e: Exception</ID>
    <ID>TooGenericExceptionCaught:AppUpdateDownloadJob.kt$AppUpdateDownloadJob$e: Exception</ID>
    <ID>TooGenericExceptionCaught:BackupCreateJob.kt$BackupCreateJob$e: Exception</ID>
    <ID>TooGenericExceptionCaught:BackupCreator.kt$BackupCreator$e: Exception</ID>
    <ID>TooGenericExceptionCaught:BackupFileValidator.kt$BackupFileValidator$e: Exception</ID>
    <ID>TooGenericExceptionCaught:BackupRestoreJob.kt$BackupRestoreJob$e: Exception</ID>
    <ID>TooGenericExceptionCaught:BackupRestorer.kt$BackupRestorer$e: Exception</ID>
    <ID>TooGenericExceptionCaught:Bangumi.kt$Bangumi$e: Exception</ID>
    <ID>TooGenericExceptionCaught:Bangumi.kt$Bangumi$e: Throwable</ID>
    <ID>TooGenericExceptionCaught:BaseTracker.kt$BaseTracker$e: Exception</ID>
    <ID>TooGenericExceptionCaught:BaseTracker.kt$BaseTracker$e: Throwable</ID>
    <ID>TooGenericExceptionCaught:BrowseIcons.kt$e: Exception</ID>
    <ID>TooGenericExceptionCaught:ChapterCache.kt$ChapterCache$e: Exception</ID>
    <ID>TooGenericExceptionCaught:ChapterLoader.kt$ChapterLoader$e: Throwable</ID>
    <ID>TooGenericExceptionCaught:ChapterRepositoryImpl.kt$ChapterRepositoryImpl$e: Exception</ID>
    <ID>TooGenericExceptionCaught:CloseableExtensions.kt$closeException: Throwable</ID>
    <ID>TooGenericExceptionCaught:CloseableExtensions.kt$e: Throwable</ID>
    <ID>TooGenericExceptionCaught:CloudflareInterceptor.kt$CloudflareInterceptor$e: Exception</ID>
    <ID>TooGenericExceptionCaught:ConfigureExhDialog.kt$e: Exception</ID>
    <ID>TooGenericExceptionCaught:ContextExtensions.kt$e: Exception</ID>
    <ID>TooGenericExceptionCaught:ContextExtensions.kt$e: Throwable</ID>
    <ID>TooGenericExceptionCaught:CrashLogUtil.kt$CrashLogUtil$e: Throwable</ID>
    <ID>TooGenericExceptionCaught:CrashlyticsPrinter.kt$CrashlyticsPrinter$t: Throwable</ID>
    <ID>TooGenericExceptionCaught:CreateCategoryWithName.kt$CreateCategoryWithName$e: Exception</ID>
    <ID>TooGenericExceptionCaught:CustomMangaRepositoryImpl.kt$CustomMangaRepositoryImpl$e: Exception</ID>
    <ID>TooGenericExceptionCaught:DeleteCategory.kt$DeleteCategory$e: Exception</ID>
    <ID>TooGenericExceptionCaught:DeleteTrack.kt$DeleteTrack$e: Exception</ID>
    <ID>TooGenericExceptionCaught:DeviceUtil.kt$DeviceUtil$e: Exception</ID>
    <ID>TooGenericExceptionCaught:DownloadCache.kt$DownloadCache$e: Throwable</ID>
    <ID>TooGenericExceptionCaught:DownloadPendingDeleter.kt$DownloadPendingDeleter$e: Exception</ID>
    <ID>TooGenericExceptionCaught:DownloadProvider.kt$DownloadProvider$e: Throwable</ID>
    <ID>TooGenericExceptionCaught:DownloadStore.kt$DownloadStore$e: Exception</ID>
    <ID>TooGenericExceptionCaught:Downloader.kt$Downloader$e: Exception</ID>
    <ID>TooGenericExceptionCaught:Downloader.kt$Downloader$e: Throwable</ID>
    <ID>TooGenericExceptionCaught:Downloader.kt$Downloader$error: Throwable</ID>
    <ID>TooGenericExceptionCaught:EHNetworkLogging.kt$ex: Exception</ID>
    <ID>TooGenericExceptionCaught:EHentaiUpdateWorker.kt$EHentaiUpdateWorker$e: Exception</ID>
    <ID>TooGenericExceptionCaught:EHentaiUpdateWorker.kt$EHentaiUpdateWorker$t: Throwable</ID>
    <ID>TooGenericExceptionCaught:EXHMigrations.kt$EXHMigrations$e: Exception</ID>
    <ID>TooGenericExceptionCaught:EXHMigrations.kt$EXHMigrations.MangaConfig.Companion$e: Exception</ID>
    <ID>TooGenericExceptionCaught:EnhancedFilePrinter.kt$EnhancedFilePrinter.Writer$e: Exception</ID>
    <ID>TooGenericExceptionCaught:ExceptionUtil.kt$t: Throwable</ID>
    <ID>TooGenericExceptionCaught:ExtensionApi.kt$ExtensionApi$e: Throwable</ID>
    <ID>TooGenericExceptionCaught:ExtensionDetailsScreenModel.kt$ExtensionDetailsScreenModel$e: Exception</ID>
    <ID>TooGenericExceptionCaught:ExtensionInstallActivity.kt$ExtensionInstallActivity$error: Exception</ID>
    <ID>TooGenericExceptionCaught:ExtensionInstaller.kt$ExtensionInstaller$e: Exception</ID>
    <ID>TooGenericExceptionCaught:ExtensionLoader.kt$ExtensionLoader$e: Exception</ID>
    <ID>TooGenericExceptionCaught:ExtensionLoader.kt$ExtensionLoader$e: Throwable</ID>
    <ID>TooGenericExceptionCaught:ExtensionManager.kt$ExtensionManager$e: Exception</ID>
    <ID>TooGenericExceptionCaught:FavoritesEntryRepositoryImpl.kt$FavoritesEntryRepositoryImpl$e: Exception</ID>
    <ID>TooGenericExceptionCaught:FavoritesSyncHelper.kt$FavoritesSyncHelper$e: Exception</ID>
    <ID>TooGenericExceptionCaught:FeedScreenModel.kt$FeedScreenModel$e: Exception</ID>
    <ID>TooGenericExceptionCaught:GalleryAdder.kt$GalleryAdder$e: Exception</ID>
    <ID>TooGenericExceptionCaught:GetChapter.kt$GetChapter$e: Exception</ID>
    <ID>TooGenericExceptionCaught:GetChapterByUrl.kt$GetChapterByUrl$e: Exception</ID>
    <ID>TooGenericExceptionCaught:GetChapterByUrlAndMangaId.kt$GetChapterByUrlAndMangaId$e: Exception</ID>
    <ID>TooGenericExceptionCaught:GetChaptersByMangaId.kt$GetChaptersByMangaId$e: Exception</ID>
    <ID>TooGenericExceptionCaught:GetFlatMetadataById.kt$GetFlatMetadataById$e: Exception</ID>
    <ID>TooGenericExceptionCaught:GetManga.kt$GetManga$e: Exception</ID>
    <ID>TooGenericExceptionCaught:GetMergedChaptersByMangaId.kt$GetMergedChaptersByMangaId$e: Exception</ID>
    <ID>TooGenericExceptionCaught:GetMergedManga.kt$GetMergedManga$e: Exception</ID>
    <ID>TooGenericExceptionCaught:GetMergedMangaById.kt$GetMergedMangaById$e: Exception</ID>
    <ID>TooGenericExceptionCaught:GetMergedReferencesById.kt$GetMergedReferencesById$e: Exception</ID>
    <ID>TooGenericExceptionCaught:GetPagePreviews.kt$GetPagePreviews$e: Exception</ID>
    <ID>TooGenericExceptionCaught:GetTracks.kt$GetTracks$e: Exception</ID>
    <ID>TooGenericExceptionCaught:GlobalExceptionHandler.kt$GlobalExceptionHandler.Companion$e: Exception</ID>
    <ID>TooGenericExceptionCaught:GoogleDriveSyncService.kt$GoogleDriveService$e: Exception</ID>
    <ID>TooGenericExceptionCaught:GoogleDriveSyncService.kt$GoogleDriveSyncService$e: Exception</ID>
    <ID>TooGenericExceptionCaught:HistoryRepositoryImpl.kt$HistoryRepositoryImpl$e: Exception</ID>
    <ID>TooGenericExceptionCaught:HttpPageLoader.kt$HttpPageLoader$e: Throwable</ID>
    <ID>TooGenericExceptionCaught:ImageSaver.kt$ImageSaver$e: Exception</ID>
    <ID>TooGenericExceptionCaught:ImageUtil.kt$ImageUtil$e: Exception</ID>
    <ID>TooGenericExceptionCaught:InsertFeedSavedSearch.kt$InsertFeedSavedSearch$e: Exception</ID>
    <ID>TooGenericExceptionCaught:InsertFlatMetadata.kt$InsertFlatMetadata$e: Exception</ID>
    <ID>TooGenericExceptionCaught:InsertSavedSearch.kt$InsertSavedSearch$e: Exception</ID>
    <ID>TooGenericExceptionCaught:InsertTrack.kt$InsertTrack$e: Exception</ID>
    <ID>TooGenericExceptionCaught:Kavita.kt$Kavita$e: Exception</ID>
    <ID>TooGenericExceptionCaught:KavitaApi.kt$KavitaApi$e: Exception</ID>
    <ID>TooGenericExceptionCaught:Kitsu.kt$Kitsu$e: Exception</ID>
    <ID>TooGenericExceptionCaught:Komga.kt$Komga$e: Exception</ID>
    <ID>TooGenericExceptionCaught:KomgaApi.kt$KomgaApi$e: Exception</ID>
    <ID>TooGenericExceptionCaught:LibrarySortMode.kt$LibrarySort.Companion$e: Exception</ID>
    <ID>TooGenericExceptionCaught:LibraryUpdateJob.kt$LibraryUpdateJob$e: Exception</ID>
    <ID>TooGenericExceptionCaught:LibraryUpdateJob.kt$LibraryUpdateJob$e: Throwable</ID>
    <ID>TooGenericExceptionCaught:LocalSource.kt$LocalSource$e: Exception</ID>
    <ID>TooGenericExceptionCaught:LocalSource.kt$LocalSource$e: Throwable</ID>
    <ID>TooGenericExceptionCaught:MainActivity.kt$MainActivity$e: Exception</ID>
    <ID>TooGenericExceptionCaught:MangaCoverFetcher.kt$MangaCoverFetcher$e: Exception</ID>
    <ID>TooGenericExceptionCaught:MangaCoverScreenModel.kt$MangaCoverScreenModel$e: Exception</ID>
    <ID>TooGenericExceptionCaught:MangaCoverScreenModel.kt$MangaCoverScreenModel$e: Throwable</ID>
    <ID>TooGenericExceptionCaught:MangaMergeRepositoryImpl.kt$MangaMergeRepositoryImpl$e: Exception</ID>
    <ID>TooGenericExceptionCaught:MangaRepositoryImpl.kt$MangaRepositoryImpl$e: Exception</ID>
    <ID>TooGenericExceptionCaught:MangaScreen.kt$MangaScreen$e: Exception</ID>
    <ID>TooGenericExceptionCaught:MangaScreenModel.kt$MangaScreenModel$e: Exception</ID>
    <ID>TooGenericExceptionCaught:MangaScreenModel.kt$MangaScreenModel$e: Throwable</ID>
    <ID>TooGenericExceptionCaught:MangaUpdates.kt$MangaUpdates$e: Exception</ID>
    <ID>TooGenericExceptionCaught:MangaUpdatesApi.kt$MangaUpdatesApi$e: Exception</ID>
    <ID>TooGenericExceptionCaught:MdUtil.kt$MdUtil.Companion$e: Exception</ID>
    <ID>TooGenericExceptionCaught:MemAutoFlushingLookupTable.kt$MemAutoFlushingLookupTable$t: Throwable</ID>
    <ID>TooGenericExceptionCaught:MergedSource.kt$MergedSource$e: Exception</ID>
    <ID>TooGenericExceptionCaught:MetadataUpdateJob.kt$MetadataUpdateJob$e: Exception</ID>
    <ID>TooGenericExceptionCaught:MetadataUpdateJob.kt$MetadataUpdateJob$e: Throwable</ID>
    <ID>TooGenericExceptionCaught:MigrationListScreenModel.kt$MigrationListScreenModel$e: Exception</ID>
    <ID>TooGenericExceptionCaught:MyAnimeList.kt$MyAnimeList$e: Exception</ID>
    <ID>TooGenericExceptionCaught:MyAnimeList.kt$MyAnimeList$e: Throwable</ID>
    <ID>TooGenericExceptionCaught:MyAnimeListApi.kt$MyAnimeListApi$e: Exception</ID>
    <ID>TooGenericExceptionCaught:OkHttpExtensions.kt$&lt;no name provided&gt;$e: Exception</ID>
    <ID>TooGenericExceptionCaught:OkHttpExtensions.kt$&lt;no name provided&gt;$error: Throwable</ID>
    <ID>TooGenericExceptionCaught:OkHttpExtensions.kt$ex: Throwable</ID>
    <ID>TooGenericExceptionCaught:OkHttpUtil.kt$t: Throwable</ID>
    <ID>TooGenericExceptionCaught:OkioExtensions.kt$e: Exception</ID>
    <ID>TooGenericExceptionCaught:PackageInstallerInstaller.kt$PackageInstallerInstaller$e: Exception</ID>
    <ID>TooGenericExceptionCaught:PagePreviewCache.kt$PagePreviewCache$e: Exception</ID>
    <ID>TooGenericExceptionCaught:PagePreviewFetcher.kt$PagePreviewFetcher$e: Exception</ID>
    <ID>TooGenericExceptionCaught:Pager.kt$Pager$e: IndexOutOfBoundsException</ID>
    <ID>TooGenericExceptionCaught:Pager.kt$Pager$e: NullPointerException</ID>
    <ID>TooGenericExceptionCaught:PagerPageHolder.kt$PagerPageHolder$e: Exception</ID>
    <ID>TooGenericExceptionCaught:PagerPageHolder.kt$PagerPageHolder$e: Throwable</ID>
    <ID>TooGenericExceptionCaught:QueryPagingSource.kt$QueryPagingSource$e: Exception</ID>
    <ID>TooGenericExceptionCaught:RarPageLoader.kt$RarPageLoader$e: Exception</ID>
    <ID>TooGenericExceptionCaught:ReaderActivity.kt$ReaderActivity$e: ArrayIndexOutOfBoundsException</ID>
    <ID>TooGenericExceptionCaught:ReaderViewModel.kt$ReaderViewModel$e: Exception</ID>
    <ID>TooGenericExceptionCaught:ReaderViewModel.kt$ReaderViewModel$e: Throwable</ID>
    <ID>TooGenericExceptionCaught:RecommendsPagingSource.kt$RecommendsPagingSource$e: Exception</ID>
    <ID>TooGenericExceptionCaught:RefreshTracks.kt$RefreshTracks$e: Throwable</ID>
    <ID>TooGenericExceptionCaught:RenameCategory.kt$RenameCategory$e: Exception</ID>
    <ID>TooGenericExceptionCaught:ReorderCategory.kt$ReorderCategory$e: Exception</ID>
    <ID>TooGenericExceptionCaught:RestoreBackupScreen.kt$RestoreBackupScreenModel$e: Exception</ID>
    <ID>TooGenericExceptionCaught:RxCoroutineBridge.kt$e: Throwable</ID>
    <ID>TooGenericExceptionCaught:SearchScreenModel.kt$SearchScreenModel$e: Exception</ID>
    <ID>TooGenericExceptionCaught:SetMangaCategories.kt$SetMangaCategories$e: Exception</ID>
    <ID>TooGenericExceptionCaught:SetReadStatus.kt$SetReadStatus$e: Exception</ID>
    <ID>TooGenericExceptionCaught:SettingsAdvancedScreen.kt$SettingsAdvancedScreen$e: Throwable</ID>
    <ID>TooGenericExceptionCaught:SettingsDataScreen.kt$SettingsDataScreen$e: Throwable</ID>
    <ID>TooGenericExceptionCaught:SettingsDebugScreen.kt$SettingsDebugScreen$e: Exception</ID>
    <ID>TooGenericExceptionCaught:SettingsEhScreen.kt$SettingsEhScreen$e: Exception</ID>
    <ID>TooGenericExceptionCaught:SettingsMangadexScreen.kt$SettingsMangadexScreen$e: Exception</ID>
    <ID>TooGenericExceptionCaught:SettingsTrackingScreen.kt$SettingsTrackingScreen$e: Throwable</ID>
    <ID>TooGenericExceptionCaught:Shikimori.kt$Shikimori$e: Exception</ID>
    <ID>TooGenericExceptionCaught:Shikimori.kt$Shikimori$e: Throwable</ID>
    <ID>TooGenericExceptionCaught:ShizukuInstaller.kt$ShizukuInstaller$e: Exception</ID>
    <ID>TooGenericExceptionCaught:SmartSearchScreenModel.kt$SmartSearchScreenModel$e: Exception</ID>
    <ID>TooGenericExceptionCaught:SourceFeedScreenModel.kt$SourceFeedScreenModel$e: Exception</ID>
    <ID>TooGenericExceptionCaught:SourcePagingSource.kt$SourcePagingSource$e: Exception</ID>
    <ID>TooGenericExceptionCaught:Suwayomi.kt$Suwayomi$e: Exception</ID>
    <ID>TooGenericExceptionCaught:SyncChapterProgressWithTrack.kt$SyncChapterProgressWithTrack$e: Throwable</ID>
    <ID>TooGenericExceptionCaught:SyncDataJob.kt$SyncDataJob$e: Exception</ID>
    <ID>TooGenericExceptionCaught:TrackChapter.kt$TrackChapter$e: Exception</ID>
    <ID>TooGenericExceptionCaught:TrackInfoDialog.kt$TrackInfoDialogHomeScreen.Model$e: Exception</ID>
    <ID>TooGenericExceptionCaught:TrackInfoDialog.kt$TrackerSearchScreen.Model$e: Throwable</ID>
    <ID>TooGenericExceptionCaught:UncaughtExceptionInterceptor.kt$UncaughtExceptionInterceptor$e: Exception</ID>
    <ID>TooGenericExceptionCaught:UpdateCategory.kt$UpdateCategory$e: Exception</ID>
    <ID>TooGenericExceptionCaught:UpdateChapter.kt$UpdateChapter$e: Exception</ID>
    <ID>TooGenericExceptionCaught:WebViewActivity.kt$WebViewActivity$e: Exception</ID>
    <ID>TooGenericExceptionCaught:WebViewScreenModel.kt$WebViewScreenModel$e: Exception</ID>
    <ID>TooGenericExceptionCaught:WebViewUtil.kt$WebViewUtil$e: Throwable</ID>
    <ID>TooGenericExceptionCaught:WebtoonPageHolder.kt$WebtoonPageHolder$e: Throwable</ID>
    <ID>TooGenericExceptionCaught:WidgetManager.kt$WidgetManager$e: Exception</ID>
    <ID>TooGenericExceptionThrown:Anilist.kt$Anilist$throw Exception("$track not found on user library")</ID>
    <ID>TooGenericExceptionThrown:Anilist.kt$Anilist$throw Exception("Unknown score type")</ID>
    <ID>TooGenericExceptionThrown:AnilistApi.kt$AnilistApi$throw Exception("Could not find manga")</ID>
    <ID>TooGenericExceptionThrown:AnilistInterceptor.kt$AnilistInterceptor$throw Exception("Not authenticated with Anilist")</ID>
    <ID>TooGenericExceptionThrown:AppUpdateDownloadJob.kt$AppUpdateDownloadJob$throw Exception("Unsuccessful response")</ID>
    <ID>TooGenericExceptionThrown:BangumiApi.kt$BangumiApi$throw Exception("Null Response")</ID>
    <ID>TooGenericExceptionThrown:BangumiInterceptor.kt$BangumiInterceptor$throw Exception("Not authenticated with Bangumi")</ID>
    <ID>TooGenericExceptionThrown:BilibiliHandler.kt$BilibiliHandler$throw Exception("Unknown chapter $chapterNumber")</ID>
    <ID>TooGenericExceptionThrown:ChapterLoader.kt$ChapterLoader$throw Exception(context.stringResource(MR.strings.page_list_empty_error))</ID>
    <ID>TooGenericExceptionThrown:DownloadManager.kt$DownloadManager$throw Exception(context.stringResource(MR.strings.page_list_empty_error))</ID>
    <ID>TooGenericExceptionThrown:DownloadProvider.kt$DownloadProvider$throw Exception( context.stringResource( MR.strings.invalid_location, downloadsDir?.displayablePath ?: "", ), )</ID>
    <ID>TooGenericExceptionThrown:Downloader.kt$Downloader$throw Exception(context.stringResource(MR.strings.page_list_empty_error))</ID>
    <ID>TooGenericExceptionThrown:EHentai.kt$EHentai$throw Exception( "Invalid igneous cookie, try re-logging or finding a correct one to input in the login menu", )</ID>
    <ID>TooGenericExceptionThrown:EHentai.kt$EHentai$throw Exception("Exceeded page quota")</ID>
    <ID>TooGenericExceptionThrown:EHentai.kt$EHentai$throw Exception("HTTP error ${response.code}", exception)</ID>
    <ID>TooGenericExceptionThrown:EHentai.kt$EHentai$throw Exception("HTTP error ${response.code}", stacktrace)</ID>
    <ID>TooGenericExceptionThrown:EHentai.kt$EHentai$throw Exception(it.text())</ID>
    <ID>TooGenericExceptionThrown:ExtensionLoader.kt$ExtensionLoader$throw Exception("Unknown source class type: ${obj.javaClass}")</ID>
    <ID>TooGenericExceptionThrown:GoogleDriveSyncService.kt$GoogleDriveService$throw Exception(context.stringResource(MR.strings.google_drive_not_signed_in))</ID>
    <ID>TooGenericExceptionThrown:GoogleDriveSyncService.kt$GoogleDriveSyncService$throw Exception(context.stringResource(MR.strings.error_before_sync_gdrive) + ": ${e.message}", e)</ID>
    <ID>TooGenericExceptionThrown:GoogleDriveSyncService.kt$GoogleDriveSyncService$throw Exception(context.stringResource(MR.strings.error_before_sync_gdrive) + ": Max retries reached.")</ID>
    <ID>TooGenericExceptionThrown:GoogleDriveSyncService.kt$GoogleDriveSyncService$throw Exception(context.stringResource(MR.strings.error_deleting_google_drive_lock_file), e)</ID>
    <ID>TooGenericExceptionThrown:GoogleDriveSyncService.kt$GoogleDriveSyncService$throw Exception(context.stringResource(MR.strings.error_uploading_sync_data) + ": ${e.message}", e)</ID>
    <ID>TooGenericExceptionThrown:GoogleDriveSyncService.kt$GoogleDriveSyncService$throw Exception(context.stringResource(MR.strings.google_drive_not_signed_in))</ID>
    <ID>TooGenericExceptionThrown:GoogleDriveSyncService.kt$GoogleDriveSyncService$throw Exception(e.message, e)</ID>
    <ID>TooGenericExceptionThrown:HttpSource.kt$HttpSource$throw RuntimeException(e)</ID>
    <ID>TooGenericExceptionThrown:KitsuApi.kt$KitsuApi$throw Exception("Could not find manga")</ID>
    <ID>TooGenericExceptionThrown:KitsuInterceptor.kt$KitsuInterceptor$throw Exception("Not authenticated with Kitsu")</ID>
    <ID>TooGenericExceptionThrown:KitsuModels.kt$KitsuLibManga$throw Exception("Unknown status")</ID>
    <ID>TooGenericExceptionThrown:KitsuModels.kt$throw Exception("Unknown status")</ID>
    <ID>TooGenericExceptionThrown:LocalSource.kt$LocalSource$throw Exception(context.stringResource(MR.strings.chapter_not_found))</ID>
    <ID>TooGenericExceptionThrown:LocalSource.kt$LocalSource$throw Exception(context.stringResource(MR.strings.local_invalid_format))</ID>
    <ID>TooGenericExceptionThrown:MangaPlusHandler.kt$MangaPlusHandler$throw Exception("error getting images")</ID>
    <ID>TooGenericExceptionThrown:MangaUpdates.kt$MangaUpdates$throw Throwable("Unable to login")</ID>
    <ID>TooGenericExceptionThrown:MdList.kt$MdList$throw Exception("not used")</ID>
    <ID>TooGenericExceptionThrown:PageHandler.kt$PageHandler$throw Exception("${chapter.scanlator} not supported")</ID>
    <ID>TooGenericExceptionThrown:ReaderViewModel.kt$ReaderViewModel$throw Exception("Not an image")</ID>
    <ID>TooGenericExceptionThrown:RecommendsPagingSource.kt$Anilist$throw Exception("'$queryParam' not found")</ID>
    <ID>TooGenericExceptionThrown:ShikimoriApi.kt$ShikimoriApi$throw Exception("Too much mangas in response")</ID>
    <ID>TooGenericExceptionThrown:ShikimoriInterceptor.kt$ShikimoriInterceptor$throw Exception("Not authenticated with Shikimori")</ID>
    <ID>TooGenericExceptionThrown:ShizukuInstaller.kt$ShizukuInstaller$throw RuntimeException("Failed to commit install session $sessionId")</ID>
    <ID>TooGenericExceptionThrown:ShizukuInstaller.kt$ShizukuInstaller$throw RuntimeException("Failed to create install session")</ID>
    <ID>TooGenericExceptionThrown:ShizukuInstaller.kt$ShizukuInstaller$throw RuntimeException("Failed to write APK to session $sessionId")</ID>
    <ID>TooGenericExceptionThrown:TrackInfoDialog.kt$TrackInfoDialogHomeScreen.Model$throw Exception()</ID>
    <ID>TooGenericExceptionThrown:WhatsNewDialog.kt$throw Exception("Exception on ${version.versionName}:$index:$charIndex", e)</ID>
    <ID>TooManyFunctions:AndroidDatabaseHandler.kt$AndroidDatabaseHandler : DatabaseHandler</ID>
    <ID>TooManyFunctions:AndroidSourceManager.kt$AndroidSourceManager : SourceManager</ID>
    <ID>TooManyFunctions:Anilist.kt$Anilist : BaseTrackerDeletableTracker</ID>
    <ID>TooManyFunctions:AnilistApi.kt$AnilistApi</ID>
    <ID>TooManyFunctions:Bangumi.kt$Bangumi : BaseTracker</ID>
    <ID>TooManyFunctions:BaseTracker.kt$BaseTracker : Tracker</ID>
    <ID>TooManyFunctions:BilibiliHandler.kt$BilibiliHandler</ID>
    <ID>TooManyFunctions:BrowseSourceScreenModel.kt$BrowseSourceScreenModel : StateScreenModel</ID>
    <ID>TooManyFunctions:CategoryRepositoryImpl.kt$CategoryRepositoryImpl : CategoryRepository</ID>
    <ID>TooManyFunctions:CbzCrypto.kt$CbzCrypto</ID>
    <ID>TooManyFunctions:ChapterRepository.kt$ChapterRepository</ID>
    <ID>TooManyFunctions:ChapterRepositoryImpl.kt$ChapterRepositoryImpl : ChapterRepository</ID>
    <ID>TooManyFunctions:ChapterTransition.kt$eu.kanade.presentation.reader.ChapterTransition.kt</ID>
    <ID>TooManyFunctions:DatabaseHandler.kt$DatabaseHandler</ID>
    <ID>TooManyFunctions:DebugFunctions.kt$DebugFunctions</ID>
    <ID>TooManyFunctions:DelegatedHttpSource.kt$DelegatedHttpSource : HttpSource</ID>
    <ID>TooManyFunctions:DohProviders.kt$eu.kanade.tachiyomi.network.DohProviders.kt</ID>
    <ID>TooManyFunctions:DownloadCache.kt$DownloadCache</ID>
    <ID>TooManyFunctions:DownloadManager.kt$DownloadManager</ID>
    <ID>TooManyFunctions:DownloadPreferences.kt$DownloadPreferences</ID>
    <ID>TooManyFunctions:DownloadProvider.kt$DownloadProvider</ID>
    <ID>TooManyFunctions:DownloadQueueScreenModel.kt$DownloadQueueScreenModel : ScreenModel</ID>
    <ID>TooManyFunctions:Downloader.kt$Downloader</ID>
    <ID>TooManyFunctions:EHentai.kt$EHentai : HttpSourceMetadataSourceUrlImportableSourceNamespaceSourcePagePreviewSource</ID>
    <ID>TooManyFunctions:EnhancedHttpSource.kt$EnhancedHttpSource : HttpSource</ID>
    <ID>TooManyFunctions:EpubFile.kt$EpubFile : Closeable</ID>
    <ID>TooManyFunctions:ExtensionLoader.kt$ExtensionLoader</ID>
    <ID>TooManyFunctions:ExtensionManager.kt$ExtensionManager</ID>
    <ID>TooManyFunctions:ExtensionsScreenModel.kt$ExtensionsScreenModel : StateScreenModel</ID>
    <ID>TooManyFunctions:FeedSavedSearchRepository.kt$FeedSavedSearchRepository</ID>
    <ID>TooManyFunctions:FeedSavedSearchRepositoryImpl.kt$FeedSavedSearchRepositoryImpl : FeedSavedSearchRepository</ID>
    <ID>TooManyFunctions:FeedScreenModel.kt$FeedScreenModel : StateScreenModel</ID>
    <ID>TooManyFunctions:HttpSource.kt$HttpSource : CatalogueSource</ID>
    <ID>TooManyFunctions:ImageUtil.kt$ImageUtil</ID>
    <ID>TooManyFunctions:Kavita.kt$Kavita : BaseTrackerEnhancedTracker</ID>
    <ID>TooManyFunctions:Kitsu.kt$Kitsu : BaseTrackerDeletableTracker</ID>
    <ID>TooManyFunctions:Komga.kt$Komga : BaseTrackerEnhancedTracker</ID>
    <ID>TooManyFunctions:LibraryPreferences.kt$LibraryPreferences</ID>
    <ID>TooManyFunctions:LibraryScreenModel.kt$LibraryScreenModel : StateScreenModel</ID>
    <ID>TooManyFunctions:LibraryUpdateJob.kt$LibraryUpdateJob : CoroutineWorker</ID>
    <ID>TooManyFunctions:LocalSource.kt$LocalSource : CatalogueSourceUnmeteredSource</ID>
    <ID>TooManyFunctions:Logging.kt$exh.log.Logging.kt</ID>
    <ID>TooManyFunctions:MangaCoverFetcher.kt$MangaCoverFetcher : Fetcher</ID>
    <ID>TooManyFunctions:MangaDex.kt$MangaDex : DelegatedHttpSourceMetadataSourceUrlImportableSourceFollowsSourceLoginSourceRandomMangaSourceNamespaceSource</ID>
    <ID>TooManyFunctions:MangaDexAuthService.kt$MangaDexAuthService</ID>
    <ID>TooManyFunctions:MangaDexService.kt$MangaDexService</ID>
    <ID>TooManyFunctions:MangaMergeRepository.kt$MangaMergeRepository</ID>
    <ID>TooManyFunctions:MangaMergeRepositoryImpl.kt$MangaMergeRepositoryImpl : MangaMergeRepository</ID>
    <ID>TooManyFunctions:MangaMetadataRepository.kt$MangaMetadataRepository</ID>
    <ID>TooManyFunctions:MangaMetadataRepositoryImpl.kt$MangaMetadataRepositoryImpl : MangaMetadataRepository</ID>
    <ID>TooManyFunctions:MangaRepository.kt$MangaRepository</ID>
    <ID>TooManyFunctions:MangaRepositoryImpl.kt$MangaRepositoryImpl : MangaRepository</ID>
    <ID>TooManyFunctions:MangaRestorer.kt$MangaRestorer</ID>
    <ID>TooManyFunctions:MangaScreen.kt$MangaScreen : ScreenAssistContentScreen</ID>
    <ID>TooManyFunctions:MangaScreenModel.kt$MangaScreenModel : StateScreenModel</ID>
    <ID>TooManyFunctions:MangaType.kt$exh.util.MangaType.kt</ID>
    <ID>TooManyFunctions:MangaUpdates.kt$MangaUpdates : BaseTrackerDeletableTracker</ID>
    <ID>TooManyFunctions:MdList.kt$MdList : BaseTracker</ID>
    <ID>TooManyFunctions:MdUtil.kt$MdUtil$Companion</ID>
    <ID>TooManyFunctions:MergedSource.kt$MergedSource : HttpSource</ID>
    <ID>TooManyFunctions:MigrationListScreenModel.kt$MigrationListScreenModel : ScreenModel</ID>
    <ID>TooManyFunctions:MyAnimeList.kt$MyAnimeList : BaseTrackerDeletableTracker</ID>
    <ID>TooManyFunctions:MyAnimeListApi.kt$MyAnimeListApi</ID>
    <ID>TooManyFunctions:NotificationReceiver.kt$NotificationReceiver : BroadcastReceiver</ID>
    <ID>TooManyFunctions:NotificationReceiver.kt$NotificationReceiver$Companion</ID>
    <ID>TooManyFunctions:PagePreviewFetcher.kt$PagePreviewFetcher : Fetcher</ID>
    <ID>TooManyFunctions:PagerPageHolder.kt$PagerPageHolder : ReaderPageImageViewPositionableView</ID>
    <ID>TooManyFunctions:PagerViewer.kt$PagerViewer : Viewer</ID>
    <ID>TooManyFunctions:ParsedHttpSource.kt$ParsedHttpSource : HttpSource</ID>
    <ID>TooManyFunctions:RaisedSearchMetadata.kt$RaisedSearchMetadata</ID>
    <ID>TooManyFunctions:ReaderActivity.kt$ReaderActivity : BaseActivity</ID>
    <ID>TooManyFunctions:ReaderPageImageView.kt$ReaderPageImageView : FrameLayout</ID>
    <ID>TooManyFunctions:ReaderPreferences.kt$ReaderPreferences</ID>
    <ID>TooManyFunctions:ReaderViewModel.kt$ReaderViewModel : ViewModel</ID>
    <ID>TooManyFunctions:SecurityPreferences.kt$SecurityPreferences</ID>
    <ID>TooManyFunctions:SettingsAdvancedScreen.kt$SettingsAdvancedScreen : SearchableSettings</ID>
    <ID>TooManyFunctions:SettingsDataScreen.kt$SettingsDataScreen : SearchableSettings</ID>
    <ID>TooManyFunctions:SettingsEhScreen.kt$SettingsEhScreen : SearchableSettings</ID>
    <ID>TooManyFunctions:SettingsItems.kt$tachiyomi.presentation.core.components.SettingsItems.kt</ID>
    <ID>TooManyFunctions:SettingsReaderScreen.kt$SettingsReaderScreen : SearchableSettings</ID>
    <ID>TooManyFunctions:SharedPreferencesDataStore.kt$SharedPreferencesDataStore : PreferenceDataStore</ID>
    <ID>TooManyFunctions:Shikimori.kt$Shikimori : BaseTrackerDeletableTracker</ID>
    <ID>TooManyFunctions:SourceFeedScreenModel.kt$SourceFeedScreenModel : StateScreenModel</ID>
    <ID>TooManyFunctions:SourcePreferences.kt$SourcePreferences</ID>
    <ID>TooManyFunctions:Suwayomi.kt$Suwayomi : BaseTrackerEnhancedTracker</ID>
    <ID>TooManyFunctions:SyncPreferences.kt$SyncPreferences</ID>
    <ID>TooManyFunctions:SyncService.kt$SyncService</ID>
    <ID>TooManyFunctions:Tracker.kt$Tracker</ID>
    <ID>TooManyFunctions:UiPreferences.kt$UiPreferences</ID>
    <ID>TooManyFunctions:UnsortedPreferences.kt$UnsortedPreferences</ID>
    <ID>TooManyFunctions:UpdatesScreenModel.kt$UpdatesScreenModel : StateScreenModel</ID>
    <ID>TooManyFunctions:WebtoonPageHolder.kt$WebtoonPageHolder : WebtoonBaseHolder</ID>
    <ID>TooManyFunctions:WebtoonRecyclerView.kt$WebtoonRecyclerView : RecyclerView</ID>
    <ID>TooManyFunctions:WebtoonViewer.kt$WebtoonViewer : Viewer</ID>
    <ID>TopLevelPropertyNaming:App.kt$private const val ACTION_DISABLE_INCOGNITO_MODE = "tachi.action.DISABLE_INCOGNITO_MODE"</ID>
    <ID>TopLevelPropertyNaming:AppBar.kt$const val SEARCH_DEBOUNCE_MILLIS = 250L</ID>
    <ID>TopLevelPropertyNaming:AppModule.kt$// SY --&gt; private const val LEGACY_DATABASE_NAME = "tachiyomi.db"</ID>
    <ID>TopLevelPropertyNaming:BackupCreateJob.kt$private const val IS_AUTO_BACKUP_KEY = "is_auto_backup" // Boolean</ID>
    <ID>TopLevelPropertyNaming:BackupCreateJob.kt$private const val LOCATION_URI_KEY = "location_uri" // String</ID>
    <ID>TopLevelPropertyNaming:BackupCreateJob.kt$private const val OPTIONS_KEY = "options" // BooleanArray</ID>
    <ID>TopLevelPropertyNaming:BackupCreateJob.kt$private const val TAG_AUTO = "BackupCreator"</ID>
    <ID>TopLevelPropertyNaming:BackupCreateJob.kt$private const val TAG_MANUAL = "$TAG_AUTO:manual"</ID>
    <ID>TopLevelPropertyNaming:BackupRestoreJob.kt$private const val LOCATION_URI_KEY = "location_uri" // String</ID>
    <ID>TopLevelPropertyNaming:BackupRestoreJob.kt$private const val OPTIONS_KEY = "options" // BooleanArray</ID>
    <ID>TopLevelPropertyNaming:BackupRestoreJob.kt$private const val SYNC_KEY = "sync" // Boolean</ID>
    <ID>TopLevelPropertyNaming:CbzCrypto.kt$private const val ALIAS_CBZ = "cbzPw"</ID>
    <ID>TopLevelPropertyNaming:CbzCrypto.kt$private const val ALIAS_SQL = "sqlPw"</ID>
    <ID>TopLevelPropertyNaming:CbzCrypto.kt$private const val BLOCK_MODE = KeyProperties.BLOCK_MODE_CBC</ID>
    <ID>TopLevelPropertyNaming:CbzCrypto.kt$private const val BUFFER_SIZE = 2048</ID>
    <ID>TopLevelPropertyNaming:CbzCrypto.kt$private const val CRYPTO_SETTINGS = "$ALGORITHM/$BLOCK_MODE/$PADDING"</ID>
    <ID>TopLevelPropertyNaming:CbzCrypto.kt$private const val IV_SIZE = 16</ID>
    <ID>TopLevelPropertyNaming:CbzCrypto.kt$private const val KEY_SIZE = 256</ID>
    <ID>TopLevelPropertyNaming:CbzCrypto.kt$private const val SQL_PASSWORD_LENGTH = 32</ID>
    <ID>TopLevelPropertyNaming:ChapterCache.kt$/** Application cache version. */ private const val PARAMETER_APP_VERSION = 1</ID>
    <ID>TopLevelPropertyNaming:ChapterCache.kt$/** The maximum number of bytes this cache should use to store. */ private const val PARAMETER_CACHE_SIZE = 100L * 1024 * 1024</ID>
    <ID>TopLevelPropertyNaming:ChapterCache.kt$/** The number of values per cache entry. Must be positive. */ private const val PARAMETER_VALUE_COUNT = 1</ID>
    <ID>TopLevelPropertyNaming:ColorFilterPage.kt$private const val ALPHA_MASK: Long = 0xFF000000</ID>
    <ID>TopLevelPropertyNaming:ColorFilterPage.kt$private const val BLUE_MASK: Long = 0x000000FF</ID>
    <ID>TopLevelPropertyNaming:ColorFilterPage.kt$private const val GREEN_MASK: Long = 0x0000FF00</ID>
    <ID>TopLevelPropertyNaming:ColorFilterPage.kt$private const val RED_MASK: Long = 0x00FF0000</ID>
    <ID>TopLevelPropertyNaming:ComicInfo.kt$const val COMIC_INFO_FILE = "ComicInfo.xml"</ID>
    <ID>TopLevelPropertyNaming:DatabaseAdapter.kt$private const val LIST_OF_STRINGS_SEPARATOR = ", "</ID>
    <ID>TopLevelPropertyNaming:DisplayExtensions.kt$// make sure icons on the nav rail fit private const val TABLET_UI_MIN_SCREEN_WIDTH_LANDSCAPE_DP = 600</ID>
    <ID>TopLevelPropertyNaming:DisplayExtensions.kt$// some tablets have screen width like 711dp = 1600px / 2.25 private const val TABLET_UI_MIN_SCREEN_WIDTH_PORTRAIT_DP = 700</ID>
    <ID>TopLevelPropertyNaming:DisplayExtensions.kt$private const val TABLET_UI_REQUIRED_SCREEN_WIDTH_DP = 720</ID>
    <ID>TopLevelPropertyNaming:DohProviders.kt$/** * Based on https://github.com/square/okhttp/blob/ef5d0c83f7bbd3a0c0534e7ca23cbc4ee7550f3b/okhttp-dnsoverhttps/src/test/java/okhttp3/dnsoverhttps/DohProviders.java */ const val PREF_DOH_CLOUDFLARE = 1</ID>
    <ID>TopLevelPropertyNaming:DohProviders.kt$const val PREF_DOH_360 = 7</ID>
    <ID>TopLevelPropertyNaming:DohProviders.kt$const val PREF_DOH_ADGUARD = 3</ID>
    <ID>TopLevelPropertyNaming:DohProviders.kt$const val PREF_DOH_ALIDNS = 5</ID>
    <ID>TopLevelPropertyNaming:DohProviders.kt$const val PREF_DOH_CONTROLD = 10</ID>
    <ID>TopLevelPropertyNaming:DohProviders.kt$const val PREF_DOH_DNSPOD = 6</ID>
    <ID>TopLevelPropertyNaming:DohProviders.kt$const val PREF_DOH_GOOGLE = 2</ID>
    <ID>TopLevelPropertyNaming:DohProviders.kt$const val PREF_DOH_MULLVAD = 9</ID>
    <ID>TopLevelPropertyNaming:DohProviders.kt$const val PREF_DOH_NJALLA = 11</ID>
    <ID>TopLevelPropertyNaming:DohProviders.kt$const val PREF_DOH_QUAD101 = 8</ID>
    <ID>TopLevelPropertyNaming:DohProviders.kt$const val PREF_DOH_QUAD9 = 4</ID>
    <ID>TopLevelPropertyNaming:DohProviders.kt$const val PREF_DOH_SHECAN = 12</ID>
    <ID>TopLevelPropertyNaming:Downloader.kt$// Arbitrary minimum required space to start a download: 200 MB private const val MIN_DISK_SPACE = 200L * 1024 * 1024</ID>
    <ID>TopLevelPropertyNaming:ExtensionInstallActivity.kt$private const val INSTALL_REQUEST_CODE = 500</ID>
    <ID>TopLevelPropertyNaming:GLUtil.kt$// Safe minimum default size private const val IMAGE_MAX_BITMAP_DIMENSION = 2048</ID>
    <ID>TopLevelPropertyNaming:GuidesStep.kt$const val GETTING_STARTED_URL = "https://mihon.app/docs/guides/getting-started"</ID>
    <ID>TopLevelPropertyNaming:KomgaApi.kt$private const val READLIST_API = "/api/v1/readlists"</ID>
    <ID>TopLevelPropertyNaming:LibraryUpdateNotifier.kt$private const val MANGA_PER_SOURCE_QUEUE_WARNING_THRESHOLD = 60</ID>
    <ID>TopLevelPropertyNaming:LibraryUpdateNotifier.kt$private const val NOTIF_ICON_SIZE = 192</ID>
    <ID>TopLevelPropertyNaming:LibraryUpdateNotifier.kt$private const val NOTIF_MAX_CHAPTERS = 5</ID>
    <ID>TopLevelPropertyNaming:LibraryUpdateNotifier.kt$private const val NOTIF_TITLE_MAX_LEN = 45</ID>
    <ID>TopLevelPropertyNaming:LocalCoverManager.kt$private const val COVER_ARCHIVE_NAME = "cover.cbi"</ID>
    <ID>TopLevelPropertyNaming:LocalCoverManager.kt$private const val DEFAULT_COVER_NAME = "cover.jpg"</ID>
    <ID>TopLevelPropertyNaming:MainActivity.kt$// Splash screen private const val SPLASH_MIN_DURATION = 500 // ms</ID>
    <ID>TopLevelPropertyNaming:MainActivity.kt$private const val SPLASH_EXIT_ANIM_DURATION = 400L // ms</ID>
    <ID>TopLevelPropertyNaming:MainActivity.kt$private const val SPLASH_MAX_DURATION = 5000 // ms</ID>
    <ID>TopLevelPropertyNaming:PackageInstallerInstaller.kt$private const val INSTALL_ACTION = "PackageInstallerInstaller.INSTALL_ACTION"</ID>
    <ID>TopLevelPropertyNaming:ReaderNavigationOverlayView.kt$private const val FADE_DURATION = 1000L</ID>
    <ID>TopLevelPropertyNaming:ReaderPageImageView.kt$private const val MAX_ZOOM_SCALE = 5F</ID>
    <ID>TopLevelPropertyNaming:ShizukuInstaller.kt$private const val SHIZUKU_PERMISSION_REQUEST_CODE = 14045</ID>
    <ID>TopLevelPropertyNaming:SourceIds.kt$// Lewd source IDs const val LEWD_SOURCE_SERIES = 6900L</ID>
    <ID>TopLevelPropertyNaming:SourceIds.kt$const val EH_SOURCE_ID = LEWD_SOURCE_SERIES + 1</ID>
    <ID>TopLevelPropertyNaming:SourceIds.kt$const val EIGHTMUSES_SOURCE_ID = 1802675169972965535</ID>
    <ID>TopLevelPropertyNaming:SourceIds.kt$const val EXH_SOURCE_ID = LEWD_SOURCE_SERIES + 2</ID>
    <ID>TopLevelPropertyNaming:SourceIds.kt$const val HBROWSE_SOURCE_ID = 1401584337232758222</ID>
    <ID>TopLevelPropertyNaming:SourceIds.kt$const val MERGED_SOURCE_ID = LEWD_SOURCE_SERIES + 69</ID>
    <ID>TopLevelPropertyNaming:SourceIds.kt$const val PURURIN_SOURCE_ID = 2221515250486218861</ID>
    <ID>TopLevelPropertyNaming:SourceIds.kt$const val TSUMINO_SOURCE_ID = 6707338697138388238</ID>
    <ID>TopLevelPropertyNaming:StorageManager.kt$// SY --&gt; private const val LOGS_PATH = "logs"</ID>
    <ID>TopLevelPropertyNaming:StorageManager.kt$private const val AUTOMATIC_BACKUPS_PATH = "autobackup"</ID>
    <ID>TopLevelPropertyNaming:StorageManager.kt$private const val DOWNLOADS_PATH = "downloads"</ID>
    <ID>TopLevelPropertyNaming:StorageManager.kt$private const val LOCAL_SOURCE_PATH = "local"</ID>
    <ID>TopLevelPropertyNaming:SuwayomiApi.kt$private const val ADDRESS_DEFAULT = ""</ID>
    <ID>TopLevelPropertyNaming:SuwayomiApi.kt$private const val ADDRESS_TITLE = "Server URL Address"</ID>
    <ID>TopLevelPropertyNaming:SuwayomiApi.kt$private const val LOGIN_DEFAULT = ""</ID>
    <ID>TopLevelPropertyNaming:SuwayomiApi.kt$private const val LOGIN_TITLE = "Login (Basic Auth)"</ID>
    <ID>TopLevelPropertyNaming:SuwayomiApi.kt$private const val PASSWORD_DEFAULT = ""</ID>
    <ID>TopLevelPropertyNaming:SuwayomiApi.kt$private const val PASSWORD_TITLE = "Password (Basic Auth)"</ID>
    <ID>TopLevelPropertyNaming:Version.kt$const val syDebugVersion: String = "0"</ID>
    <ID>TopLevelPropertyNaming:WebtoonAdapter.kt$/** * View holder type of a chapter page view. */ private const val PAGE_VIEW = 0</ID>
    <ID>TopLevelPropertyNaming:WebtoonAdapter.kt$/** * View holder type of a chapter transition view. */ private const val TRANSITION_VIEW = 1</ID>
    <ID>TopLevelPropertyNaming:WebtoonRecyclerView.kt$private const val ANIMATOR_DURATION_TIME = 200</ID>
    <ID>TopLevelPropertyNaming:WebtoonRecyclerView.kt$private const val DEFAULT_RATE = 1f</ID>
    <ID>TopLevelPropertyNaming:WebtoonRecyclerView.kt$private const val MAX_SCALE_RATE = 3f</ID>
    <ID>TopLevelPropertyNaming:WebtoonRecyclerView.kt$private const val MIN_RATE = 0.5f</ID>
    <ID>TopLevelPropertyNaming:WhatsNewDialog.kt$private const val bullet = "\u2022"</ID>
    <ID>TopLevelPropertyNaming:__Assets.kt$private var __AllAssets: ____KtList&lt;ImageVector&gt;? = null</ID>
    <ID>TopLevelPropertyNaming:__EhAssets.kt$private var __AllAssets: ____KtList&lt;ImageVector&gt;? = null</ID>
    <ID>TopLevelPropertyNaming:__Ehassets.kt$private var __AllAssets: ____KtList&lt;ImageVector&gt;? = null</ID>
    <ID>TopLevelPropertyNaming:__Exh.kt$private var __AllAssets: ____KtList&lt;ImageVector&gt;? = null</ID>
    <ID>UnstableCollections:Commons.kt$List&lt;Category&gt;</ID>
    <ID>UnstableCollections:Commons.kt$Set&lt;String&gt;</ID>
    <ID>UnstableCollections:GlobalSearchCardRow.kt$List&lt;Manga&gt;</ID>
    <ID>UnstableCollections:LibraryComfortableGrid.kt$List&lt;LibraryItem&gt;</ID>
    <ID>UnstableCollections:LibraryComfortableGrid.kt$List&lt;LibraryManga&gt;</ID>
    <ID>UnstableCollections:LibraryCompactGrid.kt$List&lt;LibraryItem&gt;</ID>
    <ID>UnstableCollections:LibraryCompactGrid.kt$List&lt;LibraryManga&gt;</ID>
    <ID>UnstableCollections:LibraryContent.kt$List&lt;Category&gt;</ID>
    <ID>UnstableCollections:LibraryContent.kt$List&lt;LibraryManga&gt;</ID>
    <ID>UnstableCollections:LibraryList.kt$List&lt;LibraryItem&gt;</ID>
    <ID>UnstableCollections:LibraryList.kt$List&lt;LibraryManga&gt;</ID>
    <ID>UnstableCollections:LibraryPager.kt$List&lt;LibraryManga&gt;</ID>
    <ID>UnstableCollections:LibraryTabs.kt$List&lt;Category&gt;</ID>
    <ID>UnstableCollections:ListPreferenceWidget.kt$Map&lt;out T, String&gt;</ID>
    <ID>UnstableCollections:MangaScreen.kt$List&lt;ChapterList.Item&gt;</ID>
    <ID>UnstableCollections:MultiSelectListPreferenceWidget.kt$Set&lt;String&gt;</ID>
    <ID>UnstableCollections:PreferenceScreen.kt$List&lt;Preference&gt;</ID>
    <ID>UnstableCollections:SettingsDownloadScreen.kt$SettingsDownloadScreen$List&lt;Category&gt;</ID>
    <ID>UnstableCollections:SettingsLibraryScreen.kt$SettingsLibraryScreen$List&lt;Category&gt;</ID>
    <ID>UnstableCollections:TrackInfoDialogHome.kt$List&lt;TrackItem&gt;</ID>
    <ID>UnstableCollections:TrackInfoDialogSelector.kt$Map&lt;Long, StringResource?&gt;</ID>
    <ID>UnstableCollections:TriStateListDialog.kt$List&lt;T&gt;</ID>
    <ID>UnstableCollections:UpdatesScreen.kt$List&lt;UpdatesItem&gt;</ID>
    <ID>UnstableCollections:WebViewScreenContent.kt$Map&lt;String, String&gt;</ID>
    <ID>UnusedParameter:EditMangaDialog.kt$context: Context</ID>
    <ID>UnusedParameter:MergedSource.kt$MergedSource$dedupe: Boolean = true</ID>
    <ID>UnusedParameter:MergedSource.kt$MergedSource$editScanlators: Boolean = false</ID>
    <ID>UnusedParameter:UpdatesRepositoryImpl.kt$UpdatesRepositoryImpl$dateUpload: Long</ID>
    <ID>UnusedPrivateMember:AppThemePreferenceWidget.kt$@PreviewLightDark @Composable private fun AppThemesListPreview()</ID>
    <ID>UnusedPrivateMember:ChapterTransition.kt$@PreviewLightDark @Composable private fun TransitionTextLongTitlePreview()</ID>
    <ID>UnusedPrivateMember:ChapterTransition.kt$@PreviewLightDark @Composable private fun TransitionTextNoNextPreview()</ID>
    <ID>UnusedPrivateMember:ChapterTransition.kt$@PreviewLightDark @Composable private fun TransitionTextNoPreviousPreview()</ID>
    <ID>UnusedPrivateMember:ChapterTransition.kt$@PreviewLightDark @Composable private fun TransitionTextPreview()</ID>
    <ID>UnusedPrivateMember:ChapterTransition.kt$@PreviewLightDark @Composable private fun TransitionTextWithGapPreview()</ID>
    <ID>UnusedPrivateMember:CrashScreen.kt$@PreviewLightDark @Composable private fun CrashScreenPreview()</ID>
    <ID>UnusedPrivateMember:EmptyScreen.kt$@PreviewLightDark @Composable private fun NoActionPreview()</ID>
    <ID>UnusedPrivateMember:EmptyScreen.kt$@PreviewLightDark @Composable private fun WithActionPreview()</ID>
    <ID>UnusedPrivateMember:ExhUtils.kt$@Composable @PreviewLightDark private fun ExhUtilsPreview()</ID>
    <ID>UnusedPrivateMember:GuidesStep.kt$@PreviewLightDark @Composable private fun GuidesStepPreview()</ID>
    <ID>UnusedPrivateMember:HistoryDialogs.kt$@PreviewLightDark @Composable private fun HistoryDeleteDialogPreview()</ID>
    <ID>UnusedPrivateMember:HistoryItem.kt$@PreviewLightDark @Composable private fun HistoryItemPreviews( @PreviewParameter(HistoryWithRelationsProvider::class) historyWithRelations: HistoryWithRelations, )</ID>
    <ID>UnusedPrivateMember:InfoScreen.kt$@PreviewLightDark @Composable private fun InfoScaffoldPreview()</ID>
    <ID>UnusedPrivateMember:InfoWidget.kt$@PreviewLightDark @Composable private fun InfoWidgetPreview()</ID>
    <ID>UnusedPrivateMember:LibraryBadges.kt$@PreviewLightDark @Composable private fun BadgePreview()</ID>
    <ID>UnusedPrivateMember:MissingChapterCountListItem.kt$@PreviewLightDark @Composable private fun Preview()</ID>
    <ID>UnusedPrivateMember:ModeSelectionDialog.kt$@PreviewLightDark @Composable private fun Preview()</ID>
    <ID>UnusedPrivateMember:NewUpdateScreen.kt$@PreviewLightDark @Composable private fun NewUpdateScreenPreview()</ID>
    <ID>UnusedPrivateMember:OrientationSelectDialog.kt$@PreviewLightDark @Composable private fun DialogContentPreview()</ID>
    <ID>UnusedPrivateMember:PageIndicatorText.kt$@PreviewLightDark @Composable private fun PageIndicatorTextPreview()</ID>
    <ID>UnusedPrivateMember:PermissionStep.kt$PermissionStep$@Composable private fun SectionHeader( text: String, modifier: Modifier = Modifier, )</ID>
    <ID>UnusedPrivateMember:ReadingModeSelectDialog.kt$@PreviewLightDark @Composable private fun DialogContentPreview()</ID>
    <ID>UnusedPrivateMember:SettingsAdvancedScreen.kt$SettingsAdvancedScreen$@Composable private fun getDownloaderGroup(): Preference.PreferenceGroup</ID>
    <ID>UnusedPrivateMember:SwitchPreferenceWidget.kt$@PreviewLightDark @Composable private fun SwitchPreferenceWidgetPreview()</ID>
    <ID>UnusedPrivateMember:TextPreferenceWidget.kt$@PreviewLightDark @Composable private fun TextPreferenceWidgetPreview()</ID>
    <ID>UnusedPrivateMember:TrackInfoDialogHome.kt$@PreviewLightDark @Composable private fun TrackInfoDialogHomePreviews( @PreviewParameter(TrackInfoDialogHomePreviewProvider::class) content: @Composable () -&gt; Unit, )</ID>
    <ID>UnusedPrivateMember:TrackInfoDialogSelector.kt$@PreviewLightDark @Composable private fun TrackStatusSelectorPreviews()</ID>
    <ID>UnusedPrivateMember:TrackLogoIcon.kt$@PreviewLightDark @Composable private fun TrackLogoIconPreviews( @PreviewParameter(TrackLogoIconPreviewProvider::class) tracker: Tracker, )</ID>
    <ID>UnusedPrivateMember:TrackerSearch.kt$@PreviewLightDark @Composable private fun TrackerSearchPreviews( @PreviewParameter(TrackerSearchPreviewProvider::class) content: @Composable () -&gt; Unit, )</ID>
    <ID>UnusedPrivateProperty:ChapterCache.kt$/** The maximum number of bytes this cache should use to store. */ private const val PARAMETER_CACHE_SIZE = 100L * 1024 * 1024</ID>
    <ID>UnusedPrivateProperty:FavoritesSyncHelper.kt$FavoritesSyncHelper$i</ID>
    <ID>UnusedPrivateProperty:FeedScreenModel.kt$FeedScreenModel$private val updateManga: UpdateManga = Injekt.get()</ID>
    <ID>UnusedPrivateProperty:GalleryAdder.kt$GalleryAdder$i</ID>
    <ID>UnusedPrivateProperty:JavaScriptEngine.kt$JavaScriptEngine$context: Context</ID>
    <ID>UnusedPrivateProperty:LibraryUpdateJob.kt$LibraryUpdateJob.Companion$private const val MANGA_PER_SOURCE_QUEUE_WARNING_THRESHOLD = 60</ID>
    <ID>UnusedPrivateProperty:MetadataUpdateJob.kt$MetadataUpdateJob.Companion$private const val MANGA_PER_SOURCE_QUEUE_WARNING_THRESHOLD = 60</ID>
    <ID>UnusedPrivateProperty:PageHandler.kt$PageHandler$private val mdList: MdList</ID>
    <ID>UnusedPrivateProperty:PageHandler.kt$PageHandler$private val preferences: TrackPreferences</ID>
    <ID>UnusedPrivateProperty:SourceFeedScreenModel.kt$SourceFeedScreenModel$private val updateManga: UpdateManga = Injekt.get()</ID>
    <ID>UseCheckOrError:CatalogueSource.kt$CatalogueSource$throw IllegalStateException("Not used")</ID>
    <ID>UseCheckOrError:MainActivity.kt$MainActivity$throw IllegalStateException("Can only be called on main thread!")</ID>
    <ID>UseCheckOrError:MangaScreenModel.kt$MangaScreenModel$throw IllegalStateException()</ID>
    <ID>UseCheckOrError:PackageInstallerInstaller.kt$PackageInstallerInstaller$throw IllegalStateException()</ID>
    <ID>UseCheckOrError:ReadingMode.kt$ReadingMode.Companion$throw IllegalStateException("Preference value must be resolved: $preference")</ID>
    <ID>UseCheckOrError:ShizukuInstaller.kt$ShizukuInstaller$throw IllegalStateException()</ID>
    <ID>UseCheckOrError:Source.kt$Source$throw IllegalStateException("Not used")</ID>
    <ID>UseCheckOrError:SourceFilterDialog.kt$throw IllegalStateException("Unknown TriState state: $this")</ID>
    <ID>UseCheckOrError:TransactionContext.kt$TransactionElement$throw IllegalStateException("Transaction was never started or was already released")</ID>
    <ID>UtilityClassWithPublicConstructor:MdUtil.kt$MdUtil</ID>
    <ID>VariableNaming:Chapter.kt$Chapter$var date_fetch: Long</ID>
    <ID>VariableNaming:Chapter.kt$Chapter$var last_modified: Long</ID>
    <ID>VariableNaming:Chapter.kt$Chapter$var last_page_read: Int</ID>
    <ID>VariableNaming:Chapter.kt$Chapter$var manga_id: Long?</ID>
    <ID>VariableNaming:Chapter.kt$Chapter$var source_order: Int</ID>
    <ID>VariableNaming:LocalSource.kt$LocalSource$private val LATEST_FILTERS = FilterList(OrderBy.Latest(context))</ID>
    <ID>VariableNaming:LocalSource.kt$LocalSource$private val POPULAR_FILTERS = FilterList(OrderBy.Popular(context))</ID>
    <ID>VariableNaming:SChapter.kt$SChapter$var chapter_number: Float</ID>
    <ID>VariableNaming:SChapter.kt$SChapter$var date_upload: Long</ID>
    <ID>VariableNaming:SManga.kt$SManga$var thumbnail_url: String?</ID>
    <ID>VariableNaming:SManga.kt$SManga$var update_strategy: UpdateStrategy</ID>
    <ID>VariableNaming:Track.kt$Track$var finished_reading_date: Long</ID>
    <ID>VariableNaming:Track.kt$Track$var last_chapter_read: Double</ID>
    <ID>VariableNaming:Track.kt$Track$var library_id: Long?</ID>
    <ID>VariableNaming:Track.kt$Track$var manga_id: Long</ID>
    <ID>VariableNaming:Track.kt$Track$var remote_id: Long</ID>
    <ID>VariableNaming:Track.kt$Track$var started_reading_date: Long</ID>
    <ID>VariableNaming:Track.kt$Track$var total_chapters: Long</ID>
    <ID>VariableNaming:Track.kt$Track$var tracker_id: Long</ID>
    <ID>VariableNaming:Track.kt$Track$var tracking_url: String</ID>
    <ID>VariableNaming:TrackSearch.kt$TrackSearch$var cover_url: String = ""</ID>
    <ID>VariableNaming:TrackSearch.kt$TrackSearch$var publishing_status: String = ""</ID>
    <ID>VariableNaming:TrackSearch.kt$TrackSearch$var publishing_type: String = ""</ID>
    <ID>VariableNaming:TrackSearch.kt$TrackSearch$var start_date: String = ""</ID>
    <ID>Wrapping:LibraryScreenModel.kt$LibraryScreenModel$-&gt;</ID>
  </CurrentIssues>
</SmellBaseline>
